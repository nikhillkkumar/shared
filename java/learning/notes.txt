Effective Java, 2nd ed.

p. 26
The four types are

interfaces (including annotations)
classes (including enums)
arrays
primitives

the first three are reference types; class instances and arrays are objects

Learning Java, 4th ed.

p. 55
== is a test for identity (same object)
the equals() method tests for equality

p. 85 Javadoc comments

/**
 * begin with /**
 * and by convention lines start with *
 * @ indicates special instructions
 * @see produces hypertext links
 * @author John Smith
 * @version 0.1
 */

Doc comments can appear above class, method and variable definitions

p. 87 table 4-2 primitive data types

boolean	 true or false, default value is false

char	 16-bit Unicode character, default value is \0 (null character)

Integers
byte	 8-bit, signed, default is 0
short	 16-bit, signed
int		 32-bit, signed
long	 64-bit, signed

Floating-point
float	 32-bit
double	 64-bit

p. 88
variable assignments can be separated by a comma after the type name
double d1 = 3.14, d2 = 2 * 3.14;

when a smaller type is used with a larger one, it is promoted to the larger
type

integer types wrap around and become negative when overflowing

p. 91
primitives are passed by value, everything else is a reference type and is
passed by reference (a handle or name for an object)

p. 92
if you need to change a caller's reference to an object, you need an extra
level of indirection: wrapping the reference in another object

an interface defines a set of methods and gives it a corresponding type.
an object implementing the methods of the interface can be referred to by
that interface type, as well as its own type.

p. 93
+ and += are the only overloaded operators, adding a String to an int converts
the int to a String

statements include variable initialization (declaration and assignment
together), and language structures such as conditionals and loops

expressions produce values, and include method calls, object allocations, and
mathematical expressions

variable assignment is both an expression and statement

p. 94
variable declarations are limited in scope to their enclosing code block {...}

p. 96
"foreach" loop

for (varDeclaration : iterable)

p. 97
switch cases need a break

p. 99
enumerations may be used to replace integer constants
enum Size { Small, Medium, Large }

p. 103
new binds more tightly than the dot operator, so a method can be called from a
new object without an intermediate assignment step

int hours = new Date().getHours();

p. 104
instanceof determines at runtime the type of an object. Note that null is not
considered an instance of any object.

String s = null;
if (s instanceof String)  // false

instanceof can also check for arrays or interfaces (foo instanceof byte[])

p. 108
try can be followed by multiple catch blocks, which should be ordered from
most to least specific

p. 109
exceptions caught can be combined in a single catch() with the "|" or syntax
catch(ZipException | SSLException e) { }

in this case, the type of e is IOException, the two exceptions' nearest common
ancestor. This syntax is useful to catch only the listed exceptions.

p. 110
try {
	//
} catch (Exception e) {
	e.printStackTrace(System.err);
}

p. 111
may also use getStackTrace() method

most exceptions are checked, that is, methods must declare them if they can
be thrown or allowed to be thrown

the caller must either use a try/catch block to handle the exception, or
declare that it can throw the exception from itself

p. 112
throw new IOException("Sunspots! with file " + f);

p. 113
custom exception

class ParseException extends Exception {
	ParseException() {
		super();
	}
	ParseException(String desc) {
		super(desc);
	}
}

p. 114
exception chaining: include original, causal exception when creating new
exception

throw new Exception("Here's the story...", causalException);

alternately,
Exception e = new IOException("the story is...");
e.initCause(cause);
throw e;

p. 116
the finally block is always executed

p. 118
try with resources:

try (
	Socket sock = new Socket("1.2.3.4");
	FileWriter file = new FileWriter("out");
) {
	// work with resources
} catch (IOException e) { }

p. 120
assert foo != null : "foo is null!"

by default, assertions are turned off
enable assertions when running the application
java -ea MyApplication

p. 123
declaring and allocating arrays:
double[] someNumbers = new double[20];

p. 124
a newly allocated array of objects contains only reference variables, with
default values of null

p. 125
array literal int[] primes = { 2, 3, 5, 7, 11 };

the length of an array is a property (arr.length), while strings have the
length() method

p. 126
java.util.Arrays.copyOf() and copyOfRange() methods may be used to copy arrays
copyOf() takes the original array and a target length. It is a shallow copy

p. 127
example of anonymous array: setPets(new Animal[] { pokey, boojum, simon });

p. 133
instance methods are accessed through an object instance, but the object does
not really have its own copy of the methods (code is not duplicated).
static methods are more like global functions, associated with a class by name
only

p. 135
static members (variables) are shared. They are associated with the class, not
any particular instance

p. 138
enumerations create distinct identifiers
public enum PendulumTypes { Simple, OneSpring, TwoSprings }

p. 140
use the special reference "this" to explicitly refer to the current object

class Bird {
	int xPos, yPos;

	double fly (int xPos, int yPos) {
		this.xPos = xPos;
		this.yPos = yPos;
	}
}

static methods can directly access only other static methods and static
variables, because they are not bound to a particular object. Otherwise, we
would have to ask which instance to act on

p. 141
static methods are used for factory methods, such as

Bird bird = Bird.createBird("pigeon");

p. 143
since objects used as arguments to functions pass a copy of the reference to
the function, if the original reference needs to be changed, it has to be
wrapped in some kind of object. One way is to create a one-element array.

SomeKindOfObject[] wrapper = new SomeKindOfObject[] { obj };

then this object can be referenced as wrapper[0]

another possibility is to use "this" to pass a reference to the calling object.
The calling object serves as the wrapper for the reference

p. 144
primitive wrappers are java.lang.Void, java.lang.Boolean, Character, Byte,
Short, Integer, Long, Float and Double

a wrapper object can be created from the primitive value or a String
representation

Float pi = new Float("3.14");

p. 145
numeric wrappers provide "value" methods that is equivalent to casting:
num.doubleValue(), floatValue(), longValue(), intValue()

wrappers are used when passing their values to a method that requires objects,
such as the Collections API

use .equals() to compare similar number objects, == tests memory locations

p. 147
varargs in methods use ... instead of []

void printObjects(Object ... list) { // list is Object[], has length property }

or
printints(int ... list) { // list is int[] }

there can only be one varargs declaration, coming last, after any number of
fixed arguments

p. 151
if a constructor calls another constructor, it must do so as its first
statement, using the self-referential method this()

class Car {
	String model;
	int doors;

	Car(String model, int doors) { }

	Car(String model) {
		this(model, 4);
	}
}

cannot call object's own functions before the constructor call has completed,
nor refer to a (nonstatic) instance member

p. 153
static initializer blocks may be used to set up static class members

class ColorWheel {
	static Hashtable colors = new Hashtable();

	static {
		colors.put("red");
		colors.put("green");
		colors.put("blue");
	}
}

p. 155
an object's finalize() is invoked just before it is removed by garbage
collection, so it may be used to clean up and free resources

the superclass' finalize must be called explicitly

java.lang.ref.Reference is a wrapper that allows you to hold an object
reference indirectly

if the object is removed, the wrapped reference becomes null

p. 157
an enumeration, is internally a "final class" that is a subtype of the
Enum type, with static final constant object references

using a static import, the enumeration's name does not need to be used

import static mypackage.Weekday.*;

setDay(Friday);	 // instead of Weekday.Friday

p. 158
Enum values can be obtained from TheEnum.values()

Weekday[] weekdays = Weekday.values();

an enum value can be compared by order with compareTo(), which returns an
integer less than, greater than, or equal to zero

enumerations can have values with constructors, methods, and fields just like
regular classes. In these cases, a semicolon is needed after the enum values

public enum Weekday {
	Sunday(8), Friday(6), Saturday(10);

	int fun;
	Weekday(int fun) { this.fun = fun; }
	public int getFun() { return fun; }
}

p. 163
in the hierarchy Animal > Mammal > Cat, the following assignments are valid:

Cat simon = new Cat();
Animal creature = simon;

however, creature will no longer have Cat-specific methods like purr()

PROGRESS p. 165 top

p. 166
for behavior (invoking methods), a subclass (Cat) acts like a Cat, even if the
object is referred to as a superclass (Animal). However, access to a shadowed
variable will find it in the Animal class

in other words, the behavior is dynamic

p. 167
@Override is an annotation that generates a warning if the methods don't match

http://stackoverflow.com/questions/14694852/can-overridden-methods-differ-in-return-type
an overridden method may have a more specific return type

p. 168
instance methods are dynamic by default. Declaring them final prevents
overriding

p. 171
an overriding method can throw subtypes of the original's exception types. In
addition, the return type may be a subclass of the original's return type.

p. 172
this is a special reference that allows you to refer to members of the current
object instance. super is a reference for the object's superclass.

super can be used to access members of a superclass that have been shadowed or
overridden.

p. 173
casting changes the apparent type of an object reference. Casting is mainly
used to restore a type after an object is temporarily assigned to a more
general type.

casts affect only the treatment of references, and never change the form of
the actual object.

a downcast narrows down the type of a reference (makes it more specific)

widening the reference implicitly casts the object

p. 175
to invoke a superclass constructor that takes arguments, super() is needed. It
must be the first statement of the constructor

p. 175-176
if the first statement of a constructor is an ordinary statement, an implicit
call to super() is made.

if the first statement is a call to an overloaded constructor via this(), it
is invoked then the current constructor's statements are executed

p. 176
an abstract method means that it is a prototype. A class containing an abstract
method cannot be used directly. It must be subclassed and then the method must
be implemented.

the class containing abstract methods must also be declared abstract

unless all abstract methods are implemented, a subclass must also be declared
abstract

p. 177
an interface specifies a group of abstract methods defining behavior without
tying it to any implementation at all

implementing an interface does not make the object inherit any part of the
inheritance hierarchy

interface types act like class types, but instead of representing what an
object is (inheritance), it defines what the object can do (implementation)

a class can implement any number of interfaces, replacing much of the need for
multiple inheritance

p. 178
interfaces define capabilities, so they are named after them. For example,
Driveable, Runnable, Updateable

class Automobile implements Driveable { }
class Lawnmower implements Driveable { }

Driveable vehicle;
vehicle = auto;

p. 179
interfaces can be used to implement callbacks. For example, a TickerTape class
displays data from a TextSource. The TextSource can store a reference to an
interface, TextReceiver, and send text to it

p. 180
interfaces can contain constants (static final variables)

p. 181
interfaces can extend various interfaces (separated with commas)

p. 182
when two or more interfaces are implemented by a class, a compile-time error
will occur if there are methods with the same name but differ in return or
exception types

a package is a name for a group of related classes and interfaces

p. 183
the package namespace is flat, not hierarchical

by default, a class is accessible only to other classes in the same package

to be used outside its package, a class must be declared public

p. 184
a Java source file can have only a single public class and the file must be
named for that class

p. 185
if there is ambiguity in using a class name, the fully qualified name must be
used

p. 186
import static can be used to import static members of a class so they don't
have to be qualified

p. 187
protected members are visible to subclasses, even if they are defined in a
different package

p. 188
a member that is private is visible only in its class
default (blank) is visible to classes in the package
protected is visible to classes in the package and subclasses (anywhere)
public is visible everywhere

overriding methods must be at least as visible as the overridden method

the protected variables of a class are visible only through objects of the
subclass's type

p. 189
an array class for a direct subclass of Object is also a direct subclass of
Object

arrays of derived classes are subclasses of the corresponding array classes

p. 191
the meaning of an inner class is made the same, as much as possible, as the
other members that exist at that level of scope

p. 192
an inner class's object cannot exist outside an enclosing instance

Animal monkey = new Animal();
Animal.brain monkeyBrain = monkey.new Brain()  // not commonly used

inner classes can be used as adapter classes, that ties one class to another
in a very specific way

public class EmployeeList {
	private Employee[] employees = ... ;

	class Iterator implements java.util.Iterator {
		int element = 0;
		boolean hasNext() ...
	}

	Iterator getIterator() {
		return new Iterator();
	}
}

p. 195
a method's local variables and arguments referenced by an inner class must be
declared final

p. 196
an inner class that lives within the body of a top-level class can be declared
static

p. 197
creating an anonymous inner class is combining a class declaration with the
allocation of an instance of that class. A one-time only class and instance
is created in one operation

p. 198
from an inner class, an outside reference can be obtained by prefixing the
"this" keyword with the class name -- Animal ourAnimal = Animal.this;

p. 199
automated utilities like jar may not find inner class files, so a wildcard is
needed: jar cvf animal.jar Animal*class

p. 201
the ancestor object Object and class Class are fundamental

p. 202
the == operator tests if two reference variables refer to the same object
(identity). For equality, the equals() method is used

equals() may be overridden but must use Object as an argument (otherwise,
equals will be overloaded)

p. 203
hashCode() is used for storage in Hashtables

objects must implement Cloneable to allow cloning

p. 206
classes in Java are represented at runtime by instances of the Class class.
There is a Class object for every object type you use.

p. 207
Class stringClass = myString.getClass();
Class stringClass = String.class;

try {
	String s2 = (String)stringClass.newInstance();
}
catch (InstantiationException e) { }
catch (IllegalAccessException e) { }

p. 208
lookup a class by name with Class.forName("MyClass");

p. 209
through the Class object, we can access the Field, Method, and Constructor
classes in java.lang.reflect

getFields() returns an array of Field objects representing all public
variables, including inherited ones

getDeclaredFields() returns an array of all variables declared in the class,
regardless of their access modifiers, similarly for methods

getConstructors() returns only public constructors, getDeclaredConstructors()
returns all of them

getInterfaces() gets all interfaces implemented by the class

p. 211
the reflection methods don't belong to a particular instance; they belong to
the java.lang.Class object that describes the given class

a class can still be obtained from an instance:
Method[] methods = myObject.getClass().getMethods()

the java.lang.reflect.Modifier class can tell if a modifier isPublic(), etc.

setAccessible() circumvents normal security

p. 212
a java.lang.reflect.Field represents static variables and instance variables

there are getInt(), setInt(), etc. and get(), set()

p. 213
a java.lang.reflect.Method represents a static or instance method. It may be
called with the invoke() method

p. 215
constructors

p. 216
java.lang.reflect.Type represents generic types

p. 217
the java.lang.reflect.Proxy class allows the creation of adapter objects that
implement arbitrary interfaces at runtime

p. 221
Java packages may be annotated in a special file named package-info.java,
placed in the folder corresponding to the Java package

common annotations are @Deprecated, @Override, and
@SuppressWarnings(value="type")

p. 222
apt, the Annotation Processing Tool, can generate additional files defined by
your plug-ins

p. 225
a generic class requires one or more type parameters

public class List<E> { ... }

p. 227
List<String> listOfStrings = new ArrayList<>();

type parameters to a generic class must be class types (such as Integer)
However, autoboxing makes it appear that regular ints are being used

p. 233
for the simple types of generic instantiations, inheritance applies only to
the base generic type and not to parameter types

there is one-dimensional inheritance, with the additional restriction that
the parameter types must be identical

p. 234
using an actual Java type as a parameter is a concrete type instantiation.
There are also wildcard instantiations, like mathematical set operations on
types

p. 236
you cannot invoke a static method through a parametrized type

p. 238
a class parametrized on a type that must be Throwable
ExceptionTester<T extends Throwable> { ... }

p. 239
the only way to get type information at runtime is to explicitly pass in a
Class reference, generally as an argument to a method, then use reflection or
create instances

p. 240
Class itself is a generic type, such as Class<String>

a bound is a constraint on the type of a type parameter. Bounds use the
extends keyword and & to require implementation of interfaces

class EmployeeList<T extends Employee & Ranked & Printable> { }

p. 241
only one class type may be specified

p. 242
the unbounded wildcard is ? and it is a supertype of everything

List<?> anyInstantiationOfList = new ArrayList<Date>();
anyInstantiationOfList = new ArrayList<String>();

p. 243
bounded wildcards is ? extending a certain type that limits the range of
assignable types

p. 244
a wildcard does not create a new type of collection, but acts as a reference

a wildcard lower bound is specified with super:
List<? super MyDate>

p. 246
wildcard instantiations of generic types can be read as their upper bound and
written as their lower bound

all wildcard instantiations have an upper bound of Object even if none is
specified

p. 252
generic methods may be invoked with specific parameter types
String s = myObject.<String>foo("foo");

