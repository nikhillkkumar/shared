Learning Java, 4th ed.

p. 55
== is a test for identity (same object)
the equals() method tests for equality

p. 85 Javadoc comments

/**
 * begin with /**
 * and by convention lines start with *
 * @ indicates special instructions
 * @see produces hypertext links
 * @author John Smith
 * @version 0.1
 */

Doc comments can appear above class, method and variable definitions

p. 87 table 4-2 primitive data types

boolean	 true or false, default value is false
char	 16-bit Unicode character, default value is \0 (null character)

Integers
byte	 8-bit, signed, default is 0
short	 16-bit, signed
int		 32-bit, signed
long	 64-bit, signed

Floating-point
float	 32-bit
double	 64-bit

p. 88
variable assignments can be separated by a comma after the type name
double d1 = 3.14, d2 = 2 * 3.14;

when a smaller type is used with a larger one, it is promoted to the larger
type

integer types wrap around and become negative when overflowing

p. 91
primitives are passed by value, everything else is a reference type and is
passed by reference (a handle or name for an object)

p. 92
if you need to change a caller's reference to an object, you need an extra
level of indirection: wrapping the reference in another object

an interface defines a set of methods and gives it a corresponding type.
an object implementing the methods of the interface can be referred to by
that interface type, as well as its own type.

p. 93
+ and += are the only overloaded operators, adding a String to an int converts
the int to a String

statements include variable initialization (declaration and assignment
together), and language structures such as conditionals and loops

expressions produce values, and include method calls, object allocations, and
mathematical expressions

variable assignment is both an expression and statement

p. 94
variable declarations are limited in scope to their enclosing code block {...}

p. 96
"foreach" loop

for (varDeclaration : iterable)

p. 97
switch cases need a break

p. 99
enumerations may be used to replace integer constants
enum Size { Small, Medium, Large }

p. 103
new binds more tightly than the dot operator, so a method can be called from a
new object without an intermediate assignment step

int hours = new Date().getHours();

p. 104
instanceof determines at runtime the type of an object. Note that null is not
considered an instance of any object.

String s = null;
if (s instanceof String)  // false

instanceof can also check for arrays or interfaces (foo instanceof byte[])

p. 108
try can be followed by multiple catch blocks, which should be ordered from
most to least specific

p. 109
exceptions caught can be combined in a single catch() with the "|" or syntax
catch(ZipException | SSLException e) { }

in this case, the type of e is IOException, the two exceptions' nearest common
ancestor. This syntax is useful to catch only the listed exceptions.

p. 110
try {
	//
} catch (Exception e) {
	e.printStackTrace(System.err);
}

p. 111
may also use getStackTrace() method

most exceptions are checked, that is, methods must declare them if they can
be thrown or allowed to be thrown

the caller must either use a try/catch block to handle the exception, or
declare that it can throw the exception from itself

p. 112
throw new IOException("Sunspots! with file " + f);

p. 113
custom exception

class ParseException extends Exception {
	ParseException() {
		super();
	}
	ParseException(String desc) {
		super(desc);
	}
}

p. 114
exception chaining: include original, causal exception when creating new
exception

throw new Exception("Here's the story...", causalException);

alternately,
Exception e = new IOException("the story is...");
e.initCause(cause);
throw e;

p. 116
the finally block is always executed

p. 118
try with resources:

try (
	Socket sock = new Socket("1.2.3.4");
	FileWriter file = new FileWriter("out");
) {
	// work with resources
} catch (IOException e) { }

p. 120
assert foo != null : "foo is null!"

by default, assertions are turned off
enable assertions when running the application
java -ea MyApplication

p. 123
declaring and allocating arrays:
double[] someNumbers = new double[20];

p. 124
a newly allocated array of objects contains only reference variables, with
default values of null

p. 125
array literal int[] primes = { 2, 3, 5, 7, 11 };

the length of an array is a property (arr.length), while strings have the
length() method

p. 126
java.util.Arrays.copyOf() and copyOfRange() methods may be used to copy arrays
copyOf() takes the original array and a target length. It is a shallow copy

p. 127
example of anonymous array: setPets(new Animal[] { pokey, boojum, simon });

p. 133
instance methods are accessed through an object instance, but the object does
not really have its own copy of the methods (code is not duplicated).
static methods are more like global functions, associated with a class by name
only

p. 135
static members (variables) are shared. They are associated with the class, not
any particular instance

p. 138
enumerations create distinct identifiers
public enum PendulumTypes { Simple, OneSpring, TwoSprings }

p. 140
use the special reference "this" to explicitly refer to the current object

class Bird {
	int xPos, yPos;

	double fly (int xPos, int yPos) {
		this.xPos = xPos;
		this.yPos = yPos;
	}
}

static methods can directly access only other static methods and static
variables, because they are not bound to a particular object. Otherwise, we
would have to ask which instance to act on

p. 141
static methods are used for factory methods, such as

Bird bird = Bird.createBird("pigeon");

p. 143
since objects used as arguments to functions pass a copy of the reference to
the function, if the original reference needs to be changed, it has to be
wrapped in some kind of object. One way is to create a one-element array.

SomeKindOfObject[] wrapper = new SomeKindOfObject[] { obj };

then this object can be referenced as wrapper[0]

another possibility is to use "this" to pass a reference to the calling object.
The calling object serves as the wrapper for the reference

p. 144
primitive wrappers are java.lang.Void, java.lang.Boolean, Character, Byte,
Short, Integer, Long, Float and Double

a wrapper object can be created from the primitive value or a String
representation

Float pi = new Float("3.14");

p. 145
numeric wrappers provide "value" methods that is equivalent to casting:
num.doubleValue(), floatValue(), longValue(), intValue()

wrappers are used when passing their values to a method that requires objects,
such as the Collections API

use .equals() to compare similar number objects, == tests memory locations

p. 147
varargs in methods use ... instead of []

void printObjects(Object ... list) { // list is Object[], has length property }

or
printints(int ... list) { // list is int[] }

there can only be one varargs declaration, coming last, after any number of
fixed arguments

PROGRESS p. 148 method overloading
