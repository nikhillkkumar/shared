p. 22
Characters go in single quotes, Strings in double quotes

p. 26
to check if 0.0 is positive or negative, divide 1.0 by it, resulting in
positive or negative infinity

to check for NaN, use Float.isNaN() or Double.isNaN()

p. 27
to narrow a variable (convert it to a type with a more restrictive range),
a cast is necessary

p. 30
assignment combined with comparison
while((line = in.readLine()) != null) { }

p. 31
arithmetic return types are double if an operand is double, same with float
and long. Otherwise, they return an int

p. 33
if either operand to + is a String, the other operand is converted to a String

p. 34
to print array contents, import java.util.* and use Arrays.toString(a);

p. 35
== tests if two primitives are identical, but with reference types (objects
and arrays), == tests if they refer the same object or array.

use .equals() to compare Strings

narrower types of numbers are converted before comparing

the special negative and positive 0.0 are considered equal

use Float/Double.isNaN() to compare NaN values

p. 35-36
boolean operators are &&, || (short-circuit) and !

& and | evaluates both sides, but are rarely used

boolean ^ (XOR) is equivalent to !=

p. 40
the ternary conditional operator test ? a : b never evaluates both a and b

null is never an instance of anything

all arrays are instances of Object

p. 43

the body of a for loop (contained in curly braces) is a compound statement

an empty loop body is simply a semicolon ;

labeled statements are used by break and continue

rowLoop: for (int r = 0; ...) {
	colLoop: for (int c = 0; ...) {
		break rowLoop;
	}
}

p. 44
a variable declaration statement can declare and initialize several variables
of the same type, separated by commas

double x = 1.0, y = 2.0;

variables marked final can never change

p. 50-51
for loops can initialize objects, such as nodes of a linked list

a regular for loop can use a variable declared outside the loop

p. 51
the for/in loop is also called "enhanced for" and "foreach"

int[] primes = new int[] { 2, 3, 5, 7, 11 };
for (int n : primes) { }

the declared loop variable can be final, to prevent it from being modified

p. 55
continue, when called in a for loop, will evaluate the loop's update
expression, but in a while loop, control just jumps back to the top of the loop

p. 56
synchronized (expr) {
	statements
}
protects the sections of code that must not be executed simultaneously,
called critical sections

the object or array specified in expr becomes locked, making other threads wait

for example,
public static void SortIntArray(int[] a) {
	synchronized (a) {
		// sort
	}
}

more commonly, synchronized is applied to a method, locking the class or
instance before executing the method

p. 60
if a finally clause issues a return statement, the method returns normally,
even if there have been exceptions thrown

p. 61-62
assert boolean assertion : error message;

assertions are disabled by default, and are enabled with java -ea MyClass

p. 63
verify that the current thread holds the lock
assert Thread.holdsLock(data);

p. 67
an abstract method is a specification without an implementation. Classes with
abstract methods must also be declared abstract

p. 69
a varargs declaration indicates that the last argument can be repeated zero or
more times, such as max(int first, int... rest) { }

if method arguments already exist in an array, they may be passed to the
method that way

p. 70
to pass an Object[] as a single argument, we can pass it as the element of
an array

out.printf("%s\n", new Object[] { arg });

or cast it as (Object) arg

covariant returns refer to overriding methods that narrow the return type

p. 71
a class defines a new data type, that is, a new kind of object

p. 72
a class example

public class Point {
	public double x, y;
	public Point(double x, double y) {
		this.x = x;
		this.y = y;
	}

	public double distanceFromOrigin() {
		return Math.sqrt(x*x + y*y);
	}
}

the 'new' operator creates an object

Point p = new Point(3.0, 2.0);

p. 74
multi-line strings must be concatenated with +

type literals are names of data types followed by .class
Class typeIntArray = int[].class;
Class typePoint = Point.class;

null is a reference to nothing, or an absence of a reference

p. 75
the length of an array is not part of the array type, so it is not possible to
declare a method that expects an array of exactly three int values

array types are not classes, but array instances are objects

all arrays have a field named length

an array type can be widened if its element type can be widened to the new type

p. 76
a length must be specified when an array is created

the automatic default values for primitives are false, '\u0000', 0, 0.0, and
null for reference types

p. 77
arrays may be initialized by a comma-separated list of expressions in curly
braces; a trailing comma is legal

String[] greetings = new String[] { "Hello", "Hi", "Howdy", };

this syntax is used to create anonymous array literals

'new' and the type are optional in a variable declaration

String[] greetings = { "Hello", "Hi", "Howdy", };

array initialization happens at runtime, so expressions may be computed at
runtime

p. 79
an array can be iterated with the for/in loop

for (int p : primes) { }

p. 80
when using new with multidimensional arrays, only the leftmost dimension(s)
must be specified. Because it is an array of arrays, it does not need to be
rectangular

p. 81
the five reference types are classes, arrays, interfaces, enumerations and
annotations

p. 82
primitives are handled exclusively by value, and references exclusively by
reference.

p. 84
a copy of a reference can change the object that it references, but cannot
change the fact that the original reference refers to that object

the clone() method makes an actual copy of an object. A cast is needed, and
the object must explicitly implement Cloneable

Point q = (Point) p.clone();

arrays are always cloneable

clone produces shallow copies; a class may need to override the clone() method

p. 85
when used with primitives, == tests that the two values are identical (same
bits), but with reference types, == compares references, not the objects'
values

== tests whether two references refer to the same object, not whether they
have the same content

the default behavior of .equals(), inherited from Object, is simply ==, that
tests for identity of references

a class can define its version of equals() for meaningful comparisons

for arrays, .equals() does the same thing as ==

arrays can be compared for equality with java.util.Arrays.equals()

p. 86
Java is a pass by value language; the value passed in methods are references

