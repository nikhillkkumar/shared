<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
	<title>Math for the Layman</title>
	<a name="Math"></a>
</head>

<body>

<h3><div align="center">MATH for the LAYMAN</div></h3>

<h3><div align="center">Table of Contents</div></h3>
<h3><a href="#Preface">Preface</a>  </h3>

<h3><a href="#1: Numbers">1: Numbers</a> </h3>
                                                                               
<h3><a href="#2: Computer Use and Experimentation">
2: Computer Use and Experimentation</a>   </h3> 
                                                      
<h3><a href="#3: Graphs and Visualization">3: Graphs and Visualization</a> </h3>

<h3><a href="#4: Polynomials">4: Polynomials</a> </h3>

<h3><a href="#5: Power Series">5: Power Series</a> </h3>
                                       
<h3><a href="#6: Slope and Derivative">6: Slope and Derivative</a> </h3>                                                           

<h3><a href="#7: Growth and Decay">7: Growth and Decay</a> </h3>                                                               

<h3><a href="#8: Vibrations">8: Vibrations</a> </h3>                                               

<h3><a href="#9: Inverses and Equations">9: Inverses and Equations</a> </h3>

<h3><a href="#10: Language and Grammar">10: Language and Grammar</a> </h3>                                                             

<h3><a href="#11: Proofs">11: Proofs</a> </h3>
                               
<h3><a href="#12: Anagrams and Permutations">12: Anagrams and Permutations</a> </h3>                                                                 

<h3><a href="#13: Logic and Sets">13: Logic and Sets</a> </h3>
                                                                                      
<h3><a href="#14: Properties of Functions">14: Properties of Functions</a> </h3>

<h3><a href="#15: Linear Vector Functions">15: Linear Vector Functions</a> </h3>

<h3><a href="#16: Polynomials and NUMBER SYSTEMS">16: Polynomials and Number Systems</a> </h3>               

<h3><a href="#17: Algorithms">17: Algorithms</a> </h3>                                    

<h3><a href="#18: Anti-Derivative and Integral">18: Anti-Derivative and Integral</a> </h3>



<h3>
<a href="#19: Complex Numbers and the Exponential Family">
19: Complex Numbers and the Exponential Family</a> </h3>                                                                

<h3><a href="#20: Further Topics">20: Further Topics</a> </h3>
    
<h3><div align="center"><a href="#Supplement">Supplement</a> </div></h3>


<h3><div align="center"><a href="#Appendix 1: Utilities">Appendix 1: Utilities</a> </div></h3>

<h3><div align="center"><a href="#References">References</a> </div></h3>

<div align="center"><b>___________________________________________________________</b></div>
<h3><div align="center">MATH for the LAYMAN</div></h3>
<div align="center"><b>Kenneth E. Iverson</b></div>

<a name="Preface"></a>
<h3><a href="#MATH">Preface</a></h3>


In 1936, Lancelot Hogben published his still-popular <i>Mathematics 
for the Million</i> [1], stating his objective as follows:
<blockquote><font size="-1">
<p>The view which we shall explore is that mathematics is the 
language of size, shape and order and that it is an essential 
part of the equipment of an intelligent citizen to 
understand this language. If the rules of mathematics are 
the rules of grammar, there is no stupidity involved when 
we fail to see that a mathematical truth is obvious. The rules 
of ordinary grammar are not obvious. They have to be learned. 
They are not eternal truths. They are conveniences without 
whose aid truths about the sorts of things in the 
world cannot be communicated from one person to another.
</blockquote></font>
<p>Our objective is similar, but we now have new tools: the 
development of computer programming 
has provided languages with grammars that are simpler and 
more tractable than that of  
conventional mathematical notation. Moreover, the 
general availability of the computer 
makes possible convenient and accurate experimentation 
with mathematical ideas.
<p>For example, the exclusive use of decimal notation in 
beginning mathematics entails the perplexing 
use of approximations such as <code>0.333333</code> and <code>
0.857143</code> for the fractions one-third 
and six-sevenths, intermixed with exact values such as
<code> 0.046875</code> for the drill-bit-size 
three sixty-fourths. The present treatment also uses <i>rational</i> arithmetic, with exact 
representations such as <code>1r3</code> and <code>6r7</code>
 and <code>3r64</code>, leading to the following computer 
production of an addition table for fractions:<pre>
   + table 1r1 1r2 1r3 1r4 1r5 1r6 1r7 1r8
+---+--------------------------------------------+
|   |  1  1r2   1r3   1r4   1r5   1r6   1r7   1r8|
+---+--------------------------------------------+
|  1|  2  3r2   4r3   5r4   6r5   7r6   8r7   9r8|
|1r2|3r2    1   5r6   3r4  7r10   2r3  9r14   5r8|
|1r3|4r3  5r6   2r3  7r12  8r15   1r2 10r21 11r24|
|1r4|5r4  3r4  7r12   1r2  9r20  5r12 11r28   3r8|
|1r5|6r5 7r10  8r15  9r20   2r5 11r30 12r35 13r40|
|1r6|7r6  2r3   1r2  5r12 11r30   1r3 13r42  7r24|
|1r7|8r7 9r14 10r21 11r28 12r35 13r42   2r7 15r56|
|1r8|9r8  5r8 11r24   3r8 13r40  7r24 15r56   1r4|
+---+--------------------------------------------+
</pre>Hogben continues with:<p><blockquote><font size="-1">
The fact is that modern mathematics does not borrow much from antiquity. To be sure, 
every useful development in mathematics rests on the historical foundation of some 
earlier branch. At the same time, every new branch liquidates the usefulness of clumsier 
tools which preceded it. 
<p>Although algebra, trigonometry, the use of graphs, the calculus 
all depend on the rules of Greek geometry, less than a dozen from the two hundred 
propositions of Euclid’s elements are essential to help us in understanding how to use 
them. The remainder are complicated ways of doing things we can do more simply when 
we know later branches of mathematics.</font></blockquote>
<p>These facts make it possible to present to the layman 
a simple view of calculus as the 
study of the rate of change of a function, 
and to use it to provide insight into matters such 
as the sine and cosine functions (so useful in 
trigonometry and the study of mechanical and 
electrical vibrations), and into the exponential 
and its inverse the logarithm (so useful in 
growth and decay processes, and in matters such as the familiar musical scale).
<p>The presentation consists largely of examples, organized in function tables and illustrated 
by graphs. The more analytical aspects of proofs and the grammar of mathematical 
notation are deferred to Chapters 11 and 10. These chapters can, however, be profitably 
consulted at almost any point.
<p>An overview is provided by the Table of Contents which (when the text is 
used interactively on the computer) can be "clicked on with a mouse" to jump to
any desired Section. Chapters 1-3 introduce Numbers, Computer use, and Graphs
and visualization. Chapters 4-8 introduce many of the important tools of applied
mathematics. The topics of these chapters are commonly considered to be
too difficult for the layman, but are examples of Hogben's comment about
"...doing things we can do more simply when 
we know later branches of mathematics." In particular, the treatment is greatly simplified
by the use of a programming language that makes simple the use of lists (vectors) and tables 
(matrices).
<p>A supplement at the end of the book contains sections that
expand on the treatments in the main text. They are not
essential to the main thread of development, but should be
consulted on occasion (by clicking on S1A, S1B, etc.). 
<p>Although familiarity with Hogben’s book is not essential to a study of the present text, it is 
highly recommended to the layman, especially the brief prologue. We 
conclude with 
the continuation of the preceding quote:<p><blockquote><font size="-1">
For the mathematical technician these complications may provide a useful discipline. 
The person who wants to understand the place of mathematics in modern civilization is 
merely distracted and disheartened by them. What follows is for those who have been 
already disheartened and distracted, and have consequently forgotten what they may 
have learned already, or fail to see the meaning or usefulness of what they remember. So 
we shall begin at the very beginning.</font></blockquote>
<div align="center">
<h3><a name="1: Numbers"></a><a href="#MATH">1: Numbers</a></h3></div>

<a href="#1A.">1A. The Counting (Natural) Numbers</a><p>
<a href="#1B.">1B. Lists and Names</a><p>                                                                                    
<a href="#1C.">1C. Iteration (Repetition)</a><p>                                                                  
<a href="#1D.">1D. Inverse</a><p>                                                                
<a href="#1E.">1E. Addition and Subtraction (+ and -)</a><p>                                                
<a href="#1F.">1F. Bonding<p>                                                                       
<a href="#1G.">1G. Multiplication or Times (*)<p>                   
                                             
<a href="#1H.">1H. Power and Exponent (^)<p>                                                   
<a href="#1I.">1I. Monomials and Polynomials (p.)<p>  
<a href="#1J.">1J. Division (%)<p>                                                                               
<a href="#1K.">1K. Review and Supplement<p>
<a href="#1L.">1L. Notes<p> 


<a name="1A."></a>
<h3><a href="#1: Numbers">1A. The Counting (Natural) Numbers</a>     
<a href="#S1A."><font size="-1">S1A.</font></a></h3>


The <i>Counting numbers</i> begin with <code>1 2 3 4</code> 
and go on forever, because every 
counting number has a <i>successor</i> that comes next after 
it. Thus:<pre>
   &gt;: 1
2
   &gt;: 2
3
   &gt;: 3  
4
   &gt;: 4
5
   &gt;: &gt;: 1
3
   &gt;: &gt;: &gt;: &gt;: 2
6

   &gt;: 1 2 3 4 5 6
2 3 4 5 6 7</pre>
<p><code>&gt;:</code> "performs an action" upon the number to which
it is applied, and is therefore analogous to an "action word" or <i>verb</i> in
English. In math, such a verb is also called a <i>function</i> (from
Latin <i>fungi</i>, to perform or execute).
<p>The number to which a verb applies may be called a <i>noun</i>. In
math it is also called an <i>argument</i>, in the sense of a
<i>topic</i> or <i>subject</i> ("You and love are still my
argument" -- Shakespeare).



<a name="1B."></a>
<h3><a href="#1: Numbers">1B. Lists and Names</a>
<a href="#S1B."><font size="-1">S1B.</font></a></h3>
A collection of numbers may be written as a <i>list</i>, in
the form <code>2 3 5 7 11</code>, and verbs may be applied to 
such lists. For example:<pre>   &gt;: 2 3 5 7 11
3 4 6 8 12
   &gt;: &gt;: &gt;: 2 3 5 7 11
5 6 8 10 14</pre>
A <i>name</i> may be assigned to a number or list by using
the <i>copula</i> <code>=:</code>, and the name may then be used
to refer to its <i>referent</i>. For example:<pre>   primes=: 2 3 5 7 11
   &gt;: primes
3 4 6 8 12
   b=: &gt;: primes
   &gt;: &gt;: b
5 6 8 10 14</pre>
The main copulas used in English are "is" and "are". They may 
be used in reading mathematical expressions aloud, as in "primes are <code>2 3 5 7 11</code>"
for <code>primes=:2 3 5 7 11</code>, and "first is one" for <code>first=:1</code>.


<p>Names may also be assigned to verbs. There appears to be no
English word that corresponds to <code>&gt;:</code> except, perhaps,
the command "next" used to summon a successor from a queue. 
Thus:<pre>   next=: &gt;:
   next 5
6
   next next 5
7</pre> 

<a name="1C."></a>
<h3><a href="#1: Numbers">1C. Iteration (Repetition)</a>
<a href="#S1C."><font size="-1">S1C.</font></a></h3>
The expression <code>next ^: 3</code> produces a verb that is
equivalent to applying the verb <CODE>next</code> <b>for</b> three times.
Thus:<pre>   primes
2 3 5 7 11
   next ^: 3 primes
5 6 8 10 14
   next next next primes
5 6 8 10 14
   for=: ^:
   
   next for 3 primes
5 6 8 10 14
   list=: 1 2 3 4
   next for list primes
3 4 6  8 12
4 5 7  9 13
5 6 8 10 14
6 7 9 11 15</pre>


<h3><a name="1D."></a>
<a href="#1: Numbers">1D. Inverse</a>
<a href="#S1D."><font size="-1">S1D.</font></a></h3>
The verb <code>previous=: &lt;:</code> "undoes" the work of the verb <code>next=: &gt;:</code>,
and is said to be its <i>inverse</i>. Thus:<pre>   previous=: &lt;:

   primes
2 3 5 7 11
   previous primes
1 2 4 6 10
   next previous primes
2 3 5 7 11
   previous next primes
2 3 5 7 11
   previous 3
2
   previous 2
1
   previous 1
0
   previous 0
_1
   previous _1
_2
</pre>


<p>Because <code>1</code> is the <b>first</b> 
counting number, the zero (<code>0</code>)
 and the negative numbers (<code>_1</code> and <code>_2</code>) 
 shown above are not counting numbers. But they are <i>integers</i>,
 so called because they are unbroken or intact (in=not, tag=touch), as
 distinguished from the <i>fractions</i> (broken or fractured) referred
 to in the preface.
 <p>Adopting the seemingly-innocent notion of a verb that undoes the 
 effect of <code>next</code> has, rather surprisingly, 
 led us out of the original domain 
 of counting numbers, and forced the adoption of a broader class,
 the <i>integers</i>, that includes the zero and negative numbers.
 <p>In adopting further inverses we will again experience the
 same need to broaden our domain, to include <i>rational</i>
 numbers, and <i>imaginary</i> numbers. Moreover, the surprising
 effect of inverse processes is not confined to mathematics.
 <p>Consider the effect of reversing a movie projector to run a
 film backward. If the film shows a locomotive moving forward
 along a track, the result of reversal is unremarkable.  But if 
 it concerns the dropping of an egg on the pavement, or a dive
 from a diving-board, the result is a startling illustration
 of the important distinction between <i>reversible</i> and
 <i>irreversible</i> processes.
 
 <p>Finally, the inverse of a function can be obtained by using
 iteration (<code>for</code>) with the right argument <code>_1</code>.
 Thus:<pre>   next for _1 primes
1 2 4 6 10
   &gt;: ^: _1 primes
1 2 4 6 10
   &gt;: ^: _1
&lt;:
   next for _3 _2 _1 0 1 2 3 primes
_1 0 2  4  8
 0 1 3  5  9
 1 2 4  6 10
 2 3 5  7 11
 3 4 6  8 12
 4 5 7  9 13
 5 6 8 10 14</pre>
 
 
<a name="1E."></a>
 <h3><a href="#1: Numbers">1E. Addition and Subtraction (+ and -)</a>
 <a href="#S1E."><font size="-1">S1E.</font></a></h3>
 The effect of the verb <code>next for 3</code> is to <i>add</i>
 <code>3</code> to its argument, and <code>next for 3 primes</code>
 is equivalent to the addition <code>primes + 3</code> (using
 the familiar Saint George's cross to denote the verb). Thus:
 <pre>   next for 3 primes
5 6 8 10 14
   primes + 3
5 6 8 10 14
   0 1 2 3 4 5 + 0 1 2 3 4 5
0 2 4 6 8 10
   + table 0 1 2 3 4 5
+-+------------+
| |0 1 2 3 4  5|
+-+------------+
|0|0 1 2 3 4  5|
|1|1 2 3 4 5  6|
|2|2 3 4 5 6  7|
|3|3 4 5 6 7  8|
|4|4 5 6 7 8  9|
|5|5 6 7 8 9 10|
+-+------------+</pre>
The last result is an <i>addition table</i>, which may be "read"
as follows: <blockquote>
To find the result of <code>3 + 4</code>, choose the result (<code>7</code>)
found in the row headed by <code>3</code> and the column
headed by <code>4</code>.</blockquote>
The verb <code>+ table</code> is only one example of a <i>function</i>
table, and other functions may be used. For example:<pre>   previous for 3 primes
_1 0 2 4 8
   primes - 3
_1 0 2 4 8

   - table 0 1 2 3 4 5
+-+----------------+
| |0  1  2  3  4  5|
+-+----------------+
|0|0 _1 _2 _3 _4 _5|
|1|1  0 _1 _2 _3 _4|
|2|2  1  0 _1 _2 _3|
|3|3  2  1  0 _1 _2|
|4|4  3  2  1  0 _1|
|5|5  4  3  2  1  0|
+-+----------------+</pre>
<b><div align="center">Exercises</div></b> <ol><li>Read 
from the addition table the sums <code>2 + 5</code> and <code>5 + 2</code>
and verify that they agree. Make similar comparisons of additions
of numbers that are similarly interchanged or <i>commuted.</i><p><li>Because
of the agreements noted in Exercise 1, addition is said to 
be <i>commutative</i>. Use the subtraction table to find
whether subtraction is commutative.</ol>


<a name="1F."></a>
<h3><a href="#1: Numbers">1F. Bonding (&amp;)</a>
<a href="#S1F."><font size="-1">S1F.</font></a></h3>

The verb <code>+ &amp; 3</code> is equivalent to "add <code>3</code>",
that is, to <code>next for 3</code>. Thus:<pre>   + &amp; 3 primes
5 6 8 10 14
   primes + 3
5 6 8 10 14

   with=: &amp;
   + with 3 primes
5 6 8 10 14
   next for 3 primes
5 6 8 10 14

   - with 3 primes
_1 0 2 4 8
   primes - 3
_1 0 2 4 8

   - with 3 + with 3 primes
2 3 5 7 11
   + with 2 primes
4 5 7 9 13
   + with 2 for 0 1 2 3 4 primes
 2  3  5  7 11
 4  5  7  9 13
 6  7  9 11 15
 8  9 11 13 17
10 11 13 15 19</pre>
Although the referent of <code>primes</code> is the list
<code>2 3 5 7 11</code>, it would not be correct to substitute the
referent for the name in the foregoing 
expression, because the resulting <code>0 1 2 3 4 2 3 5 7 11</code>
would be treated as a single list argument to <code>for</code>.
Thus:<pre>   + with 2 for 0 1 2 3 4 2 3 5 7 11
+&amp;2^:0 1 2 3 4 2 3 5 7 11</pre>
The lists may, however, be separated by parentheses: 
<pre>   + with 2 for 0 1 2 3 4 (2 3 5 7 11)
 2  3  5  7 11
 4  5  7  9 13
 6  7  9 11 15
 8  9 11 13 17
10 11 13 15 19</pre>


<a name="1G."></a>
 <h3><a href="#1: Numbers">1G. Multiplication or Times (*)</a>
 <a href="#S1G."><font size="-1">S1G.</font></a></h3>

Three times four <code>(3 * 4)</code>
 is said to be the addition of four copies (“plies”) of three. Thus:
<pre>   3 + 3 + 3 + 3
12
   3 * 4
12
   * table 0 1 2 3 4 5 6 7 8 9 10
+--+--------------------------------+
|  |0  1  2  3  4  5  6  7  8  9  10|
+--+--------------------------------+
| 0|0  0  0  0  0  0  0  0  0  0   0|
| 1|0  1  2  3  4  5  6  7  8  9  10|
| 2|0  2  4  6  8 10 12 14 16 18  20|
| 3|0  3  6  9 12 15 18 21 24 27  30|
| 4|0  4  8 12 16 20 24 28 32 36  40|
| 5|0  5 10 15 20 25 30 35 40 45  50|
| 6|0  6 12 18 24 30 36 42 48 54  60|
| 7|0  7 14 21 28 35 42 49 56 63  70|
| 8|0  8 16 24 32 40 48 56 64 72  80|
| 9|0  9 18 27 36 45 54 63 72 81  90|
|10|0 10 20 30 40 50 60 70 80 90 100|
+--+--------------------------------+
</pre>
<b><div align="center">Exercises</div></b><ol><li>Study
the multiplication table, and comment on its properties (such 
as commutativity).<p><li>The numbers in column <code>5</code> are
<i>multiples</i> of <code>5</code>, that is, they result
from multiplying by <code>5</code>. Verify that they progress
by "counting by fives", and check for similar properties in other
columns and rows.<p><li>Comment on any patterns you find in the rows, 
columns, or diagonals of other function tables.<p><li>Make 
the table <code>* table 2 3 4 5 6 6 7 8 9 10</code> and make
a list of the counting numbers beginning with <code>2</code> (and up to perhaps <code>19</code>) 
that <i>do not</i> occur in it. These numbers are called <i>primes</i>.
</ol>


<h3><a name="1H."></a>
<a href="#1: Numbers">1H. Power and Exponent (^)</a>
<a href="#S1H."><font size="-1">S1H.</font></a></h3>

Just as repeated application of addition is equivalent to 
another important function 
(multplication, or <code>*</code>), 
so repeated multiplication is equivalent to <i>power</i>, or 
<code>^ </code>. Thus, 
<code>3 ^ 4</code> is equivalent to <code>3 * 3 * 3 * 3</code>.
The right argument (in this case <code>4</code>) 
is often called the <i>exponent</i>, and the 
expression <code>3 ^ 4</code> is read as “three power 
four” or “three to the power four”. For example:<pre>
   3 ^ 4
81
   3*3*3*3
81
   0 1 2 3 4 5 ^2
0 1 4 9 16 25

   ^ table 0 1 2 3 4 5
+-+-------------------+
| |0 1  2   3   4    5|
+-+-------------------+
|0|1 0  0   0   0    0|
|1|1 1  1   1   1    1|
|2|1 2  4   8  16   32|
|3|1 3  9  27  81  243|
|4|1 4 16  64 256 1024|
|5|1 5 25 125 625 3125|
+-+-------------------+</pre>


<h3><a name="1I."></a>
<a href="#1: Numbers">1I. Monomials and Polynomials (p.)</a>
<a href="#S1I."><font size="-1">S1I.</font></a></h3>

An expression such as <code>5*4^3</code> is called a <i>monomial</i>
(one name) with the 
<i>coefficient</i> <code>5</code>, the argument <code>4</code>,
 and the exponent
 <code>3</code>; a sum of monomials is called 
a <i>polynomial</i> (many names). For example:
<pre>   5 * 4 ^ 3
320

   (5*4^3) + (_2*4^4) + (1*4^1)
_288</pre><p>
A polynomial in which the exponents in the 
successive monomials are successive 
integers beginning with zero, is said to be 
in <i>standard form</i>, and may be expressed 
using the polynomial function <code>p.</code>, with the 
list of coefficients as the left argument. 
For example:<pre>
   x=:  4
   (2*x^0) + (3*x^1) + (4*x^2)
78
   2 3 4 p. x
78</pre> 
<b><div align="center">Exercises</div></b><ol>
<p><lI>
 Evaluate the following expressions, and comment on the results:
<pre>   a=: 0 1 2 3 4 5
   1 2 1 p. a
   (a+1) ^ 2
   1 3 3 1 p. a
   (a+1) ^ 3
   c4=: 0 1 3 3 1 + 1 3 3 1 0
   c4 p. a
   (a+1) ^ 4</pre></ol>
   
   
<h3><a name="1J."></a>
<a href="#1: Numbers">1J. Division (%)</a>
<a href="#S1J."><font size="-1">S1J.</font></a></h3>

Division (to be denoted by <code>%</code>) "undoes" the work of 
multiplication. For example:<pre>   a=: 0 1 2 3 4 5 6
   b=: a * 2
   b
0 2 4 6 8 10 12
   b % 2
0 1 2 3 4 5 6
   b % 3
0 0.666667 1.33333 2 2.66667 3.33333 4</pre>
Just as the inverse of addition introduced new numbers
outside the domain of the counting numbers, so 
some of the results of this inverse function 
lie outside of the domain of integers. These non-integral
results (such as <code>0.666667</code>) are "decimal approximations to"
a new class of numbers, called <i>fractions</i> or <i>rationals</i>.
<p>Just as we introduced a way to represent negative numbers, so
we introduce a representation for rationals: <code>2r3</code> for
the fraction two-thirds, <code>4r3</code> for the fraction four-thirds,
etc. Thus:<pre>   1r3+1r3
2r3
   a=: 0 1r2 1r3 1r4 1r5 1r6
   
   a+a
0 1 2r3 1r2 2r5 1r3
   a-a
0 0 0 0 0 0
   a * a
0 1r4 1r9 1r16 1r25 1r36

   + table a
+---+------------------------------+
|   |  0  1r2  1r3  1r4   1r5   1r6|
+---+------------------------------+
|  0|  0  1r2  1r3  1r4   1r5   1r6|
|1r2|1r2    1  5r6  3r4  7r10   2r3|
|1r3|1r3  5r6  2r3 7r12  8r15   1r2|
|1r4|1r4  3r4 7r12  1r2  9r20  5r12|
|1r5|1r5 7r10 8r15 9r20   2r5 11r30|
|1r6|1r6  2r3  1r2 5r12 11r30   1r3|
+---+------------------------------+

   - table a
+---+--------------------------------+
|   |  0   1r2   1r3   1r4   1r5  1r6|
+---+--------------------------------+
|  0|  0  _1r2  _1r3  _1r4  _1r5 _1r6|
|1r2|1r2     0   1r6   1r4  3r10  1r3|
|1r3|1r3  _1r6     0  1r12  2r15  1r6|
|1r4|1r4  _1r4 _1r12     0  1r20 1r12|
|1r5|1r5 _3r10 _2r15 _1r20     0 1r30|
|1r6|1r6  _1r3  _1r6 _1r12 _1r30    0|
+---+--------------------------------+

   * table a
+---+--------------------------+
|   |0  1r2  1r3  1r4  1r5  1r6|
+---+--------------------------+
|  0|0    0    0    0    0    0|
|1r2|0  1r4  1r6  1r8 1r10 1r12|
|1r3|0  1r6  1r9 1r12 1r15 1r18|
|1r4|0  1r8 1r12 1r16 1r20 1r24|
|1r5|0 1r10 1r15 1r20 1r25 1r30|
|1r6|0 1r12 1r18 1r24 1r30 1r36|
+---+--------------------------+

   % table a
+---+---------------------+
|   |0 1r2 1r3 1r4 1r5 1r6|
+---+---------------------+
|  0|0   0   0   0   0   0|
|1r2|_   1 3r2   2 5r2   3|
|1r3|_ 2r3   1 4r3 5r3   2|
|1r4|_ 1r2 3r4   1 5r4 3r2|
|1r5|_ 2r5 3r5 4r5   1 6r5|
|1r6|_ 1r3 1r2 2r3 5r6   1|
+---+---------------------+
</pre>
<b><div align="center">Exercises</div></b><ol><li>Study the foregoing tables,
and comment on their properties. (See the Exercises in Section 1G.)<p><li>
Comment on the <code>_</code> that occurs in the first column
of the division table (it denotes <i>infinity</i>).<p><li>
Study the multiplication table, and try to formulate rules for
the multiplication of rationals.</ol>


<h3><a name="1K."></a>
<a href="#1: Numbers">1K. Review and Supplement</a>
<a href="#S1K."><font size="-1">S1K.</font></a></h3>

Using notation provided by a programming language (that
will allow us to experiment with our math on a computer),
we have introduced:<ol><li>
The <i>counting numbers</i> <code>1 2 3 4</code> etc.
<p><li>The use of <i>lists</i> and of <i>names</i> 
that are assigned <i>referents</i> by a <i>copula</i>.<p><li>
The <i>iteration</i> operator <code>for=: ^:</code> 
that applies a function for a specified number of times.<p><li>
The function <i>addition</i>.<p><li>Its <i>inverse</i> (<i>subtraction</i>).
<p><li>The class of <i>integers</i> that includes <i>zero</i>, and
the <i>negative numbers</i> <code>_1 _2 _3 _4</code> etc. introduced
by subtraction.
<p><li>The <i>multiplication</i> that is given by iterated addition.
<p><li>The <i>division</i> that is inverse to multiplication.
<p><li>The <i>fractions</i> or <i>rationals</i> that are introduced by
division.<p><li>The <i>power</i> function and the <i>polynomials</i>
based upon it.</ol>
Some of the assigned names (such as the <code>for</code> assigned by
the expression <code>for=: ^:</code>) are "utilities" that
will be utilized throughout the text,
and are collected for easy reference in Appendix 1.<p>

The pace of this text is brisk, moving on quickly to further topics as soon
as the essential foundations for them are established. For example,
although the Polynomials of Chapter 4 could provide a rich subject
in itself, we pass on after a brief three pages to the Power Series
of Chaper 5, and the Slope and Derivative of Chapter 6.

<p>This gives a quick exposure to significant, and sometimes surprising,
consequences of otherwise dull foundations. On the other hand, the reader
may eventually (or immediately) want further treatments of the
successive foundations: these are provided in a separate part of the book
called Supplement.

<p>In a printed text, the need to move between a given section and the
corresponding supplemental section in a different part of the book
might prove onerous. However, in reading the text from a computer (through
a Browser), this switching back and forth is made by a click of a mouse.

<p>For example, click on the S1K that appears to the right of the heading
for this section to read the further discussion in the supplemental
section S1K, and click on its heading to return.

<p>The <i>Find</i> facility can be used as an index to find the occurrences of
words in the text; invoke it by pressing F while
holding down the control key, or select it from the Search menu.

<h3><a name="1L."></a>
<a href="#1: Numbers">1L. Notes</a>
<a href="#S1L."><font size="-1">S1L.</font></a></h3>

On page 75 Hogben says:<blockquote><font size="-1">
<p>It may therefore be soothing for many to whom 
mathematical expressions evoke a 
malaise comparable to being seasick, if they 
can learn to think of mathematics less as an 
exploit in reasoning than as an exercise in 
translating an unfamiliar script like Braille or 
the Morse code. <p>In this chapter we shall
 therefore abandon the historical approach and 
deal mainly with two topics: for what sort 
of communication do we use this highly 
space-saving – now international – written 
language, and on what sort of signs do we 
rely. To emphasize that the aim of this 
chapter is to accustom the reader to approach  
mathematical  rules as Exercises in economical 
translation, every rule in the sign 
language of mathematics will have an arithmetical
illustration …</font></blockquote><p>
He continues with:<blockquote><font size="-1">
<p>In contradistinction to common speech which 
deals largely with the quality of things, 
mathematics deals only with matters of size, 
order, and shape. … First let us consider 
what different sorts of signs go to the 
making of a mathematical statement. We may 
classify these as:<ol>
<LI> punctuation;
<LI> models;
<LI> labels (e.g. 5 or x) for enumeration, measurement, and position in a sequence;
<LI> signs for relations;
<LI> signs for operations.</ol></font></blockquote><p>
Conventional mathematical notation uses three 
pairs of symbols for punctuation: <code>( )</code> 
and <code>[ ]</code> and <code>{ }</code>. We will use only the 
pair <code>( )</code> for this purpose, and will use the 
others for operations: <code>{</code> for 
indexing (selection), <code>{.</code> and <code>}.</code> for 
take and drop of a 
first item, and <code>{:</code> and <code>}:</code> for 
take and drop of a last item.  
<p>Hogben offers the following suggestions for 
study:<blockquote><font size="-1">
<p>Although care has been taken to see that all the logical, or, as we ought to say, the 
grammatical rules are put in a continuous sequence, you must not expect that you will 
necessarily follow every step in the argument the first time you read it. An eminent 
Scottish mathematician gave a very sound piece of advice for lack of which many people 
have been discouraged unnecessarily. “Every mathematical book that is worth 
anything”, said Chrystal, “must be read backwards and forwards …”
<p>---------------------
<p>…Always have a pen and paper, preferably squared paper, in hand …. when you read 
the text for serious study, and work out all the numerical examples as you read …. What 
you get out of the book depends on your 
co-operation in the business of learning.</font></blockquote>
<p>To this we may add the advice to use the computer in the manner introduced in the 
next chapter, and illustrated throughout the entire text. In particular, do not 
hesitate to do any computer experiments that may occur to you – the worst that 
can happen is the appearance of an error message of some kind, after which you 
may continue without any special action.<p>



<div align="center">
<h3><a name="2: Computer Use and Experimentation"></a><a href="#MATH">
2: Computer Use and Experimentation</a></h3></div>

<a href="#2A.">2A. Introduction</a><p>
                                                                        
<a href="#2B.">2B. Number of places</a><p>

<a href="#2C.">2C. Displays</a><p>                                                                         
  
<a href="#2D.">2D. Integer Lists<p>                                                                              
      
<a href="#2E.">2E. Vocabulary<p>                                                                            

<a href="#2F.">2F. Functions over lists<p>                                                                                                                                                                                                                        

<a href="#2G.">2G. Notes<p>  

<h3><a name="2A."></a><a href="#2: Computer Use and Experimentation">2A. Introduction</a>
<a href="#S2A."><font size="-1">S2A.</font></a></h3> 

A computer can be programmed to “interpret” or
 “execute” sentences expressed in 
a variety of <i>notations</i> or <i>programming languages</i>; 
commonly used languages 
include Cobol, Fortran, APL, C, and J. The treatment
 of numbers in Chapter 1 is 
all expressed in J, a system that can be obtained from Website 
www.jsoftware.com .<p>
A computer-executed language such as J not 
only permits one to do extensive 
calculations quickly and accurately, 
it may also permit precise experimentation 
with mathematical ideas. In particular, J 
provides computation both in the rational 
arithmetic used in Chapter 1, and in the
 more familiar decimal notation.
<p>For example, a list of rationals 
such as <code>r=: 1r5 2r5 3r5 4r5 5r5 6r5</code>
and a list of integers <code>a=: 5 * r</code> derived
from it will produce results expressed as rationals
when functions such as addition, multiplication, and
division are applied to them. Thus:
<pre>
   r=: 1r5 2r5 3r5 4r5 1 6r5
   a=: 5 * r
   % table a
+-+---------------------+
| |1   2   3   4   5   6|
+-+---------------------+
|1|1 1r2 1r3 1r4 1r5 1r6|
|2|2   1 2r3 1r2 2r5 1r3|
|3|3 3r2   1 3r4 3r5 1r2|
|4|4   2 4r3   1 4r5 2r3|
|5|5 5r2 5r3 5r4   1 5r6|
|6|6   3   2 3r2 6r5   1|
+-+---------------------+

   % table r
+---+-----------------------+
|   |1r5 2r5 3r5 4r5   1 6r5|
+---+-----------------------+
|1r5|  1 1r2 1r3 1r4 1r5 1r6|
|2r5|  2   1 2r3 1r2 2r5 1r3|
|3r5|  3 3r2   1 3r4 3r5 1r2|
|4r5|  4   2 4r3   1 4r5 2r3|
|  1|  5 5r2 5r3 5r4   1 5r6|
|6r5|  6   3   2 3r2 6r5   1|
+---+-----------------------+
</pre>
<p>However, the list <code>c=: 1 2 3 4 5 6</code>, which
is identical to <code>a</code> except that it is not defined 
as a rational, yields decimal approximations under division.
Thus:<pre>   c=: 1 2 3 4 5 6
   % table c
+-+--------------------------------+
| |1   2        3    4   5        6|
+-+--------------------------------+
|1|1 0.5 0.333333 0.25 0.2 0.166667|
|2|2   1 0.666667  0.5 0.4 0.333333|
|3|3 1.5        1 0.75 0.6      0.5|
|4|4   2  1.33333    1 0.8 0.666667|
|5|5 2.5  1.66667 1.25   1 0.833333|
|6|6   3        2  1.5 1.2        1|
+-+--------------------------------+</pre>
<p>It should be noted that the inclusion of even one
rational in a list makes it behave as a rational.
<p>The function <code>x:</code> applied to an argument causes
its result to be treated as a rational when other
functions are applied to it. Moreover, its inverse
causes functions applied to its results to treat it
in decimal form. Thus:<pre>
   rat=: x:
   dec=: rat^:_1
     
   d=: rat c
   d
1 2 3 4 5 6
   % table d
+-+---------------------+
| |1   2   3   4   5   6|
+-+---------------------+
|1|1 1r2 1r3 1r4 1r5 1r6|
|2|2   1 2r3 1r2 2r5 1r3|
|3|3 3r2   1 3r4 3r5 1r2|
|4|4   2 4r3   1 4r5 2r3|
|5|5 5r2 5r3 5r4   1 5r6|
|6|6   3   2 3r2 6r5   1|
+-+---------------------+
   e=: dec d
   e
1 2 3 4 5 6
   % table e
+-+--------------------------------+
| |1   2        3    4   5        6|
+-+--------------------------------+
|1|1 0.5 0.333333 0.25 0.2 0.166667|
|2|2   1 0.666667  0.5 0.4 0.333333|
|3|3 1.5        1 0.75 0.6      0.5|
|4|4   2  1.33333    1 0.8 0.666667|
|5|5 2.5  1.66667 1.25   1 0.833333|
|6|6   3        2  1.5 1.2        1|
+-+--------------------------------+
</pre>
<b><div align="center">Exercises</div></b>
<ol><li>To gain familiarity with the use of the computer, enter
some of the expressions from Chapter 1, and compare the results
with those shown in the text.</ol><p>



<h3><a name="2B."></a><a href="#2: Computer Use and Experimentation">2B. Number of places</a>
<a href="#S2B."><font size="-1">S2B.</font></a></h3>



The precision of the decimal approximations in 
the table <code>% table c</code> is limited to six
digits after the decimal point. This is a matter
of convenience in display -- the results are 
actually computed to about eighteen decimal
digits, of which only the first few are shown.
<p>The following function may be defined and used
to display any number of digits:
<pre>   set=: 9!:11  
   set 12
   2 % 3
0.666666666667
   dec 2r3
0.666666666667
   set 6</pre>

   
<a name="2C."></a><a href="#2: Computer Use and Experimentation"><h3>2C. Displays</a>
<a href="#S2C."><font size="-1">S2C.</font></a></h3>
   

Tables and other results may also be displayed 
for convenient comparison, using 
the comma-dot to place them side-by-side, and 
the comma to place one table 
below another. For example:<pre>
   (+ table r),.(- table r)
+---+-------------------------+---+----------------------------+
|   |1r5 2r5 3r5 4r5    1  6r5|   |1r5  2r5  3r5  4r5    1  6r5|
+---+-------------------------+---+----------------------------+
|1r5|2r5 3r5 4r5   1  6r5  7r5|1r5|  0 _1r5 _2r5 _3r5 _4r5   _1|
|2r5|3r5 4r5   1 6r5  7r5  8r5|2r5|1r5    0 _1r5 _2r5 _3r5 _4r5|
|3r5|4r5   1 6r5 7r5  8r5  9r5|3r5|2r5  1r5    0 _1r5 _2r5 _3r5|
|4r5|  1 6r5 7r5 8r5  9r5    2|4r5|3r5  2r5  1r5    0 _1r5 _2r5|
|  1|6r5 7r5 8r5 9r5    2 11r5|  1|4r5  3r5  2r5  1r5    0 _1r5|
|6r5|7r5 8r5 9r5   2 11r5 12r5|6r5|  1  4r5  3r5  2r5  1r5    0|
+---+-------------------------+---+----------------------------+

  (* table a),(* table r)
+---+--------------------------------+
|   |        1  2  3  4  5  6        |
+---+--------------------------------+
| 1 |        1  2  3  4  5  6        |
| 2 |        2  4  6  8 10 12        |
| 3 |        3  6  9 12 15 18        |
| 4 |        4  8 12 16 20 24        |
| 5 |        5 10 15 20 25 30        |
| 6 |        6 12 18 24 30 36        |
+---+--------------------------------+
|   | 1r5   2r5   3r5   4r5   1   6r5|
+---+--------------------------------+
|1r5|1r25  2r25  3r25  4r25 1r5  6r25|
|2r5|2r25  4r25  6r25  8r25 2r5 12r25|
|3r5|3r25  6r25  9r25 12r25 3r5 18r25|
|4r5|4r25  8r25 12r25 16r25 4r5 24r25|
|  1| 1r5   2r5   3r5   4r5   1   6r5|
|6r5|6r25 12r25 18r25 24r25 6r5 36r25|
+---+--------------------------------+
</pre>
Function tables may also be produced without 
their bordering arguments by using 
the operator <code>/</code>, and other functions may be
 applied to such tables. For example:<pre>
    a %/ a
1 1r2 1r3 1r4 1r5 1r6
2   1 2r3 1r2 2r5 1r3
3 3r2   1 3r4 3r5 1r2
4   2 4r3   1 4r5 2r3
5 5r2 5r3 5r4   1 5r6
6   3   2 3r2 6r5   1

   (a %/ a)*(a */ a)
 1  1  1  1  1  1
 4  4  4  4  4  4
 9  9  9  9  9  9
16 16 16 16 16 16
25 25 25 25 25 25
36 36 36 36 36 36</pre> 




<a name="2D."></a><a href="#2: Computer Use and Experimentation"><h3>2D. Integer Lists</a>
<a href="#S2D."><font size="-1">S2D.</font></a></h3>

<code>i.5</code> produces a list of the first five non-negative 
integers, and <code>i:5</code> produces a 
symmetric list from <code>_5</code> to <code>5</code>. Both are 
convenient for exploring tables:<pre>
      (* table i.5),.(* table i:5)
+-+-----------+--+---------------------------------------+
| |0 1 2  3  4|  | _5  _4  _3  _2 _1 0  1   2   3   4   5|
+-+-----------+--+---------------------------------------+
| |           |_5| 25  20  15  10  5 0 _5 _10 _15 _20 _25|
| |           |_4| 20  16  12   8  4 0 _4  _8 _12 _16 _20|
| |           |_3| 15  12   9   6  3 0 _3  _6  _9 _12 _15|
|0|0 0 0  0  0|_2| 10   8   6   4  2 0 _2  _4  _6  _8 _10|
|1|0 1 2  3  4|_1|  5   4   3   2  1 0 _1  _2  _3  _4  _5|
|2|0 2 4  6  8| 0|  0   0   0   0  0 0  0   0   0   0   0|
|3|0 3 6  9 12| 1| _5  _4  _3  _2 _1 0  1   2   3   4   5|
|4|0 4 8 12 16| 2|_10  _8  _6  _4 _2 0  2   4   6   8  10|
| |           | 3|_15 _12  _9  _6 _3 0  3   6   9  12  15|
| |           | 4|_20 _16 _12  _8 _4 0  4   8  12  16  20|
| |           | 5|_25 _20 _15 _10 _5 0  5  10  15  20  25|
+-+-----------+--+---------------------------------------+</pre>
<b><div align="center">Exercises</div></b><p><ol>
<li>Examine the second multiplication table above, and
formulate a rule for the sign of a product in terms of
the signs of its factors.<p><li>Examine the rows and columns, and
give reasons for the alternation of signs between quadrants.
</ol>
The <i>signum</i> or <i>sign</i> function denoted by <code>*</code> gives
<code>_1</code> for a negative argument, <code>0</code> for
a zero argument, and <code>1</code> for a positive argument. When applied
on (that is, to the result of) multiplication it yields a table
that shows the pattern of the signs in the multiplication table more
clearly. Thus:<pre>   sign=: *
     on=: @
	 
   (sign on *) table i:5
+--+-------------------------------+
|  |_5 _4 _3 _2 _1 0  1  2  3  4  5|
+--+-------------------------------+
|_5| 1  1  1  1  1 0 _1 _1 _1 _1 _1|
|_4| 1  1  1  1  1 0 _1 _1 _1 _1 _1|
|_3| 1  1  1  1  1 0 _1 _1 _1 _1 _1|
|_2| 1  1  1  1  1 0 _1 _1 _1 _1 _1|
|_1| 1  1  1  1  1 0 _1 _1 _1 _1 _1|
| 0| 0  0  0  0  0 0  0  0  0  0  0|
| 1|_1 _1 _1 _1 _1 0  1  1  1  1  1|
| 2|_1 _1 _1 _1 _1 0  1  1  1  1  1|
| 3|_1 _1 _1 _1 _1 0  1  1  1  1  1|
| 4|_1 _1 _1 _1 _1 0  1  1  1  1  1|
| 5|_1 _1 _1 _1 _1 0  1  1  1  1  1|
+--+-------------------------------+   </pre>
The pattern of signs in the multiplication table may be made
more understandable by considering the behaviour of individual
rows and columns: each proceeds by "counting by" the number at
its head.
For example, the row headed by <code>3</code> begins with 
<code>_15</code>, and proceeds by steps of three through <code>_12</code>
and <code>_9</code> to <code>15</code>. At some point it passes
through the column of zeros, and the result must therefore change
sign. Similar remarks apply to "counting by negative numbers", and
to columns.


<a name="2E."></a><a href="#2: Computer Use and Experimentation"><h3>2E. Vocabulary</a>
<a href="#S2E."><font size="-1">S2E.</font></a></h3>

The complete J vocabulary can be displayed 
by pressing the key labelled F1, can 
then be printed as indicated, and can be closed 
by pressing the Escape key (labelled Esc). 
With the vocabulary displayed, the complete 
definition of any of its items may be 
displayed (and perhaps printed) by clicking 
the mouse on the desired item.
<p>It may be interesting to explore the behaviour 
of various functions by producing 
their tables, either before or after 
studying their definitions. Moreover, it may be 
helpful to first assign more familiar names. 
For example:<pre>
   gcd=: +.
   lcm=: *.
   (gcd table ,. lcm table) a
+-+-----------+-+----------------+
| |1 2 3 4 5 6| |1  2  3  4  5  6|
+-+-----------+-+----------------+
|1|1 1 1 1 1 1|1|1  2  3  4  5  6|
|2|1 2 1 2 1 2|2|2  2  6  4 10  6|
|3|1 1 3 1 1 3|3|3  6  3 12 15  6|
|4|1 2 1 4 1 2|4|4  4 12  4 20 12|
|5|1 1 1 1 5 1|5|5 10 15 20  5 30|
|6|1 2 3 2 1 6|6|6  6  6 12 30  6|
+-+-----------+-+----------------+
</pre>
Composite functions can also be tabled. For example:<pre>
   ((lcm */ gcd) table ,. (* table)) a
+-+----------------+-+----------------+
| |1  2  3  4  5  6| |1  2  3  4  5  6|
+-+----------------+-+----------------+
|1|1  2  3  4  5  6|1|1  2  3  4  5  6|
|2|2  4  6  8 10 12|2|2  4  6  8 10 12|
|3|3  6  9 12 15 18|3|3  6  9 12 15 18|
|4|4  8 12 16 20 24|4|4  8 12 16 20 24|
|5|5 10 15 20 25 30|5|5 10 15 20 25 30|
|6|6 12 18 24 30 36|6|6 12 18 24 30 36|
+-+----------------+-+----------------+
</pre>
<p><b><div align="center">Exercises</b></div>  <ol>
<p><LI>
 Choose other functions from the Vocabulary for 
 experiments such as:
   <pre>
   &lt; table a
   ((&lt; table ,. &gt; table),(&lt;: table,.= table)) a</pre>
<p><LI> Make and study tables for the greatest 
common divisor (<code>gcd=: +.</code>) and the least common
multiple (<code>lcm=: *.</code>). 
<p><LI> Exercise 3 of Section 1J asked to formulate
 rules for multiplying rational numbers. Re-
examine the matter using the <code>gcd</code> function and 
the function <code>nd=: 2&amp;x:</code> that gives the 
numerator and denominator (as a two-element list) 
of a rational number.
<p><LI> Extend the discussion of the preceding 
exercise to the division of rationals.
<p><LI> Use <code>i.</code> and <code>i:</code>
 to make tables of the comparison 
functions <code>&lt;</code> and <code>&gt;</code> and
<code>=</code> .
<p><LI> Make tables for <code>&lt;.</code> (minimum) 
and <code>&gt;.</code>
 (maximum).
<p><LI> Make the table <code>! table i.5</code>, and comment on the 
results.</ol>
<p>The expression  <code>3!5</code> gives the number of distinct 
collections of three items that 
can be chosen from a collection of five distinct 
items. For example, here are the 
ways of choosing three at a time from the first 
five letters of the alphabet:
<pre>   ABC
   ABD
   ABE
   ACD
   ACE
   ADE
   BCD
   BCE
   BDE
   CDE</pre>
<p>The function <code>!</code> might therefore be 
called <code>outof</code> but, for reasons that will appear 
later, we will call it the <i>binomial coefficient</i>
function, and abbreviate it as <code>bc</code>. If 
the zeros in the table produced in 
Exercise 7 are ignored, a triangle remains. This 
triangle (or some orientation of it) 
is (wrongly, according to Hogben, p194) called 
Pascal’s triangle.
<p>Functions for other useful lists are easily defined:<pre>
   even=:  2:*i.
    odd=:  1:+2:*i.
    pow=:  2:^i.
     i1=:  1:+i.
     i2=:  2:+i.
   (even,.odd,.pow,.i1,.i2) 6
 0  1  1 1 2
 2  3  2 2 3
 4  5  4 3 4
 6  7  8 4 5
 8  9 16 5 6
10 11 32 6 7</pre>
<p>The expressions <code>2^3</code> and <code>2^2</code> 
are defined by <code>2*2*2</code> and <code>2*2</code>, respectively, but 
it is not clear what this implies 
for <code>2^1</code> (multiplication with one factor?) 
or for <code>2^0</code>
and <code>2^_1</code>. Function tables give clues to the 
pattern to be expected:<pre>
   2 3 ^ table 2 3 4 5
+-+-----------+
| |2  3  4   5|
+-+-----------+
|2|4  8 16  32|
|3|9 27 81 243|
+-+-----------+
</pre>
<p>The patterns progress to the right by multiplying 
by the argument (<code>2</code> or <code>3</code>); 
conversely they progress to the left 
by dividing by the argument, giving the 
following results for the exponents <code>1</code> 
and <code>0</code>, 
and for negative exponents:<pre>
   2 3 ^ table 0 1 2 3 4 5
+-+---------------+
| |0 1 2  3  4   5|
+-+---------------+
|2|1 2 4  8 16  32|
|3|1 3 9 27 81 243|
+-+---------------+

   2 3 ^ table i:5r1
+-+---------------------------------------+
| |   _5   _4   _3  _2  _1 0 1 2  3  4   5|
+-+---------------------------------------+
|2| 1r32 1r16  1r8 1r4 1r2 1 2 4  8 16  32|
|3|1r243 1r81 1r27 1r9 1r3 1 3 9 27 81 243|
+-+---------------------------------------+

   ^ table i:5r1
+--+-----------------------------------------------------+
|  |     _5    _4     _3   _2   _1 0  1  2    3   4     5|
+--+-----------------------------------------------------+
|_5|_1r3125 1r625 _1r125 1r25 _1r5 1 _5 25 _125 625 _3125|
|_4|_1r1024 1r256  _1r64 1r16 _1r4 1 _4 16  _64 256 _1024|
|_3| _1r243  1r81  _1r27  1r9 _1r3 1 _3  9  _27  81  _243|
|_2|  _1r32  1r16   _1r8  1r4 _1r2 1 _2  4   _8  16   _32|
|_1|     _1     1     _1    1   _1 1 _1  1   _1   1    _1|
| 0|      _     _      _    _    _ 1  0  0    0   0     0|
| 1|      1     1      1    1    1 1  1  1    1   1     1|
| 2|   1r32  1r16    1r8  1r4  1r2 1  2  4    8  16    32|
| 3|  1r243  1r81   1r27  1r9  1r3 1  3  9   27  81   243|
| 4| 1r1024 1r256   1r64 1r16  1r4 1  4 16   64 256  1024|
| 5| 1r3125 1r625  1r125 1r25  1r5 1  5 25  125 625  3125|
+--+-----------------------------------------------------+</pre> 


<a name="2F."></a><a href="#2: Computer Use and Experimentation"><h3>2F. Functions over lists</a>
<a href="#S2F."><font size="-1">S2F.</font></a></h3>

The expression <code>1+4+1+4+2</code> is said to apply 
addition <i>over</i> the list <code>1 4 1 4 2</code>. 
This sum may also be expressed by applying 
the <i>over </i> adverb <code>/</code> to the function <code>+</code>, 
as in <code>+/1 4 1 4 2</code>. It may be applied to 
other functions similarly:<pre>
   a=: 1 4 1 4 2
   +/a
12
   */a
32
   &gt;./a
4
   +./a
1
   *./a
4
   n=: 6
   b=: i1 n
   b
1 2 3 4 5 6
   +/b
21
   */b
720</pre>
The <code>/</code> used in the expressions <code>+/</code> and
<code>*/</code> is called an <i>adverb</i> because it applies to a verb to produce 
a related verb. In math, an adverb is also called an <i>operator</i>, a
rather non-committal term adopted by the mathematician Oliver
Heaviside about a century ago.
<p>The sum <code>+/</code> and the list <code>i.</code> can 
be used to clarify (or at least re-express) the 
polynomial function introduced in Section 1I. Thus:<pre>
   x=: 4
   c=: 2 3 4
   c p. x
78
   x^0 1 2
1 4 16
   c*x^0 1 2
2 12 64
   +/c*x^0 1 2
78
   +/c*x^i.3
78</pre>
<p>In the final expression above it was essential
 that the argument <code>3</code> equalled the 
number of items in the list of coefficients. 
This can be expressed for any coefficient 
list by using the number function 
<code>#</code> as follows:<pre>
   #c
3
   i.#c
0 1 2
   +/c*x^i.#c
78
   d=: 1 4 6 4 1
   +/d*x^i.#d
625
   (d p. x),(x+1)^4
625 625</pre>

<a name="2G."></a><a href="#2: Computer Use and Experimentation"><h3>2G. Notes</a>
<a href="#S2G."><font size="-1">S2G.</font></a></h3>

These two chapters have provided numerous 
examples of the evaluation of a 
variety of functions, but have not provided 
proofs or demonstrations of the 
properties of these functions or of  
relations among them.
<p>On the other hand, the use of lists and 
tables has provided organized 
presentations of these examples that make 
it easy to recognize properties -- 
properties such as the commutativity of the 
functions plus, times, maximum, and 
greatest common divisor in the symmetry 
of their tables, as well as certain “skew-symmetries” 
evident in the tables for subtraction, 
division, and less-than.
<p>Careful study of function tables can provide 
other insights such as the “counting by 
a constant” that occurs in rows and columns 
of certain functions, leading, in 
particular, (in Section 2D) to an informal 
proof or demonstration of the necessity 
for the familiar behaviour of the products 
of signed numbers -- the product of  
numbers of opposite signs is negative, 
and the product of two of the same sign is 
positive.
<p>Conclusions about functions (such as the 
relation of prime numbers to the 
multiplication table, and rules for the 
multiplication of rational numbers) have been 
left to Exercises, as in those for Sections 1G and 1J. 
It is important to attempt these 
Exercises -- to repeat Hogben’s advice: “What 
you get out of the book depends on 
your co-operation in the business of learning”. 
<p>Nevertheless, we will devote some 
attention to deriving certain relations, 
and will devote a separate chapter (11) to 
the treatment of proofs. 
Similarly in the matter of language 
(whose importance is so strongly stated by 
Hogben in the paragraph shown in our preface), 
we have introduced the necessary 
notation in context with no general discussion 
of the grammar involved, and will 
defer such matters to a separate chapter (10). 
<p>However, these cited chapters are 
relatively self-contained, and can be consulted at any point.
But first we will introduce graphing as a 
further tool for making certain 
mathematical relations evident. Concerning graphs, 
Hogben has this to say (p 86):<blockquote><font size="-1">
<p>A third kind of pictorial language used 
in mathematics has its origin in the construction 
of star maps and later of earth maps in the 
last two centuries before the beginning of the 
Christian era. <p>Such is co-ordinate geometry 
for which the slang word is graphs. It did 
not come into its own before the century of 
Newton, whereafter it led to many 
discoveries. 
<p>Unlike Euclid’s geometry, it 
can bring the measurement of time into the 
picture. For instance, it exposes (Fig. 1) 
why and when Achilles (pp 12-13) caught up 
with (and passed) the tortoise.</font></blockquote>



<a name="3: Graphs and Visualization"></a>
<h3><div align="center"><a href="#MATH">3: Graphs and Visualization</a></div></h3>

<a href="#3A.">3A. Plotting<p> 
<a href="#3B.">3B. Local behaviour and area<p>                                                           
<a href="#3C.">3C. Graphs versus function tables<p>                                       
<a href="#3D.">3D. Notes<p>   
   
<h3><a name="3A."></a><a href="#3: Graphs and Visualization">3A. Plotting</a>
<a href="#S3A."><font size="-1">S3A.</font></a></h3>

<p>A table of the function “twenty-five minus 
the square”, or “twenty-five with minus 
on the square” for each item of the 
argument <code>x=: i:5</code> can be prepared as follows:<pre>
   f=: 25 with - on *:
   x=: i:5
   x,:f x
_5 _4 _3 _2 _1  0  1  2  3 4 5
 0  9 16 21 24 25 24 21 16 9 0</pre>
Study of such a function table can reveal 
much about the behaviour of the 
function: for example, from <code>0</code> at the 
argument <code>_5</code>, 
it grows at an ever-decreasing 
rate to a high point at <code>0 25</code>, and then declines 
at an ever-increasing rate to <code>5 0</code>.
<p>However, the characteristics of the 
function can be seen more easily in a graph of 
the function, produced by plotting each column 
of the table as follows: starting at 
an arbitrary point on a sheet of squared 
paper measure a distance <code>x</code> to the right (or 
left, if negative), and a distance <code>f x</code>
 upward (or downward, if negative), and mark 
the resulting point. Then join adjacent points 
by "lines", and points to arguments by "sticks". <p>Graphs can be produced 
quickly and accurately by the computer as follows:<pre>
   load 'plot'
   PLOT=: 'line,stick' with plot
   PLOT x;f x</pre>
<img src="gr3a1.jpg" border=0 alt=""> 
A plot can be removed from the screen 
(to permit further computation) by pressing 
the key labelled Esc.
However, anyone unfamiliar with such 
graphs should perhaps make a few by hand, 
using simple functions such as the cube 
(<code>f=: ^ with 3</code>), negation (<code>f=: -</code>), and 
the identity (<code>f=: ]</code>).
 
<p>Plots of polynomial functions may show 
further interesting characteristics. For 
example, study the plot of the following function, 
use <code>x,:fs x</code> or
<code>x,.fs x</code> to make its table, 
and compare your observations with the 
remarks given below:
<pre>
   fs=: 0 1 0 _1r6 0 1r120 0 _1r5040 with p.
   x=: 1r3*i:10
   PLOT x;fs x</pre>
 <img src="gr3a2.jpg" border=0 alt="">
<p><b>Remarks:</b> <code>fs</code> appears to be an 
oscillating function that begins at about
<code>(-3+1r7),0</code>; drops at a decreasing 
rate to a low of <code>_1</code>; rises 
through <code>0 0</code> to a high of <code>1</code>; and again 
drops to about <code>(3+1r7),0</code>.
<p>The result of <code>PLOT x;f x</code> is said to be a 
plot of <code>f x</code> “against” or “versus” the 
argument <code>x</code>. A function can also be plotted 
against another function, as illustrated 
in the following exercise.
<p><b><div align="center">Exercises</div></b><ol>
<p><li>
 Execute the following sentences, and comment on the results:
 <pre>
   fc=: 1 0 _1r2 0 1r24 0 _1r720 0 1r40320 with p.
   set 5
   x,.fc x
   
   PLOT x;fc x
   
   (fc x),.(fs x)
   
   PLOT (fc x);(fs x)</pre></ol>
<p>To anyone familiar with the functions 
sine and cosine of trigonometry, it may be 
evident that the functions <code>fs</code> and <code>fc</code> are 
approximations of them. <p>Moreover, the 
cosine and sine of a given angle are 
sometimes defined as the coordinates of a 
point on the unit circle of radius 1, located 
at the given angle (that is, the arc length 
along the circumference). It should therefore 
come as no surprise that the plot of 
<code>fs</code> against <code>fc</code> in 
the preceding exercise 
produced an approximate circle.
<p>The expression <code>d,:e</code> 
produces a two-rowed table from the 
lists <code>d</code> and <code>e</code>, and 
expressions of the form <code>c,d,:e</code> 
form multi-rowed tables from further lists. 
Moreover, <code>PLOT x;c,d,:e</code> plots each of the 
lists against <code>x</code> in a single graph, 
providing visual comparison of the functions 
represented by the lists.
<p><b><div align="center">Exercises</div></b><OL>
<p><lI> <code>   PLOT x;(fs x),:fc x)</code>
<p><LI> <code>   PLOT x;(fs x),:fc x-3r2)</code></ol>


<p><h3><a name="3B."></a><a href="#3: Graphs and Visualization">3B. Local behaviour and area</a>
<a href="#S3B."><font size="-1">S3B.</font></a></h3>
<p>In addition to providing an overall view of 
a function, its graph shows the local 
behaviour, the slopes of the individual 
segments reflecting its local rates of growth 
and decay. <p>Moreover, the graph provides 
a direct view of the area under it, a result 
of considerable significance.
<P>This will be illustrated by a 
plot of a semi-circle. The function <code>cir=: 0 with o.</code> gives the square 
root of one minus the square 
of its argument. Its plot for the 
argument <code>a=: 1r5*i:5</code> is therefore a rough 
approximation to a semi-circle with a radius of one unit. Thus:<pre>
   cir=: 0 with o.
   a=: 1r5 * i:5
   a
_1 _4r5 _3r5 _2r5 _1r5 0 1r5 2r5 3r5 4r5 1
   PLOT a;cir a</pre>
<img src="gr3b1.jpg" border=0 alt=""> 
<p>The function <code>sum=: +/</code> sums a list, and 
<code>sum cir a</code> therefore sums the 
altitudes of the graph of the 
semi-circle, thus giving an approximation to its area 
(except that the sum must be multiplied 
by <code>1r5</code>, the common width of the 
trapezoids that form the area). Thus:<pre>
   sum=: +/
   1r5 * sum cir a
1.51852
   2*1r5 * sum cir a
3.03705</pre>
<p>The last result is the approximate area 
of the complete circle, and is therefore an 
approximation to the constant <code>pi</code>. 
Better approximations are provided by a larger 
number of points:<pre>
   b=: 1r1000 * i:1000
   2 * +/1r1000 * cir b
3.14156</pre>

<h3><a name="3C."></a><a href="#3: Graphs and Visualization">3C. Graphs versus function tables</a>
<a href="#S3C."><font size="-1">S3C.</font></a></h3>
Insights provided by the graph of the 
function <code>cir</code> that are not provided so 
directly by its function table are 
based upon the pairwise views of adjacent points; 
the slopes of the line segments between 
them reflect the rate of change of the 
function, and the trapezoids defined by 
them provide a basis for the area.
<p>Tables of functions that apply pairwise 
to their arguments can, however, provide 
similar insights. Moreover, they can provide 
other information (such as the rate of 
change of the rate of change) not readily 
grasped from a graph.
To this end we will define a pairwise 
operator <code>pw</code>, a sum function, a  commuted 
difference function, and an average or 
mean function. Thus:<pre>
   pw=: 1 : '2 with (u.\)'
   sum=: +/
   dif=: -~/
   mean=: sum % #
   y=:  cir a
   y
0 0.6 0.8 0.917 0.98 1 0.98 0.917 0.8 0.6 0
   mean y
0.69
   mean pw y NB. Average heights of the trapezoids
0.3 0.7 0.86 0.95 0.99 0.99 0.95 0.86 0.7 0.3
   dif pw y
0.6 0.2 0.12 0.063 0.02 _0.02 _0.063 _0.12 _0.2 _0.6
</pre>
We will further illustrate the pairwise 
operator on a function for the Fibonacci 
numbers, using a definition discussed 
under “generating functions” in [2]:<pre>
   fib=: (0 1 with p. % 1 _1 _1 with p.)t.
   x=:  1 2 3 4 5 6 7 8 9 10 11 12 13   
   fib x
1 1 2 3 5 8 13 21 34 55 89 144 233

   sum pw fib x
2 3 5 8 13 21 34 55 89 144 233 377

   sum pw sum pw fib x
5 8 13 21 34 55 89 144 233 377 610

   dif pw fib x
0 1 1 2 3 5 8 13 21 34 55 89

   gm=: %/pw fib x  NB. Pairwise ratios
   set 4
   gm NB. Appproximations to golden mean
1 0.5 0.6667 0.6 0.625 0.6154 0.619 0.6176 0.6182 0.618 0.6181 0.618
   gm * 1 + gm
2 0.75 1.111 0.96 1.016 0.9941 1.002 0.9991 1 0.9999 1 1</pre>

<p>Pairwise relations such as <code>dif pw f x</code> are 
easily seen in a graph of <code>f</code>, but 
repeated use (as in <code>dif pw dif pw f x</code>) are 
not. They can, however, 
provide interesting results when 
applied to familiar functions. For example:<pre>
   sqr=: ^ with 2
   sqr x
1 4 9 16 25 36 49 64 81 100 121 144 169
   dif pw sqr x
3 5 7 9 11 13 15 17 19 21 23 25
   dif pw dif pw sqr x
2 2 2 2 2 2 2 2 2 2 2
   dif pw dif pw dif pw sqr x
0 0 0 0 0 0 0 0 0 0

   dp=: dif pw
   dp sqr x
3 5 7 9 11 13 15 17 19 21 23 25
   dp dp sqr x
2 2 2 2 2 2 2 2 2 2 2

   cube=: ^ with 3
   cube x
1 8 27 64 125 216 343 512 729 1000 1331 1728 2197
   dp cube x
7 19 37 61 91 127 169 217 271 331 397 469
   dp dp cube x
12 18 24 30 36 42 48 54 60 66 72
   dp dp dp cube x
6 6 6 6 6 6 6 6 6 6</pre>
<b><div align="center">Exercises</div></b><ol>
<p><li> Experiment with pairwise differences of 
other power functions, and of polynomials.
<p><li> Experiment with the function <code>p2=: 2 with ^ </code>
and the use of the pair-wise quotients <code>%/ pw</code> 
and <code>%~/ pw</code> on  it.</ol>


<h3><a name="3D."></a><a href="#3: Graphs and Visualization">3D. Notes</a>
<a href="#S3D."><font size="-1">S3D.</font></a></h3>
Chapters 2 and 3 introduced two important 
facilities for the study of functions, the 
function table, and graphs. Chapter 1 
introduced one particularly important 
function, the polynomial -- important 
because it can approximate, and therefore be 
used to study, a wide range of functions. 
The next chapter examines it further.

<p>Any reader puzzled by certain notations 
(such as the double use of <code>*</code> for both 
signum and multiplication in Section 1D) may 
wish to turn now to the two-page 
discussion of trains, inflections, ambivalence, 
and bonding in Section 10D.

<a name="4: Polynomials"></a>
<h3><div align="center"><a href="#MATH">4: Polynomials</a></div></h3>

<a href="#4A.">4A. Bonding<p>                                                             
<a href="#4B.">4B. Notes<p>

<h3><a name="4A."></a><a href="#4: Polynomials">4A. Bonding</a>
<a href="#S4A."><font size="-1">S4A.</font></a></h3>
The polynomial function introduced in Chapter 1 
is a function of two arguments, 
the first of which is commonly called the 
coefficients of the function. Using the 
example from Chapter 1:<pre>
   x=: 4
   2 3 4 p. x
78
   c=: 2 3 4
   c p. x
78
   g=: c with p.
   g x
78</pre>
The expression <code>g=: c with p.</code> illustrates the 
fact that the function <code>p.</code> can be 
bonded with a list of coefficients to define a 
specific polynomial function <code>g</code>. Consider 
the following examples:<pre>
   c2=: 1 2 1
   c3=: 1 3 3 1
   c4=: 1 4 6 4 1
   y=: 0 1 2 3 4 5
   f2=: c2 with p.
   f2 y
1 4 9 16 25 36

   f3=: c3 with p.
   f3 y
1 8 27 64 125 216

   (f2 y) * (f3 y)
1 32 243 1024 3125 7776
   g=: f2 * f3
   g y
1 32 243 1024 3125 7776</pre>
The Taylor operator <code>t.</code> applies to a polynomial 
such as <code>f3</code> to produce a function 
which, applied in turn to an integer <code>i</code>, gives 
coefficient <code>i</code> of the polynomial. For 
example:<pre>
   f3 t. 2
3
   f3 t. 0 1 2 3 4 5 6
1 3 3 1 0 0 0
   (f2 * f3) t. 0 1 2 3 4 5 6
1 5 10 10 5 1 0</pre>
The result of <code>f2 f3 y</code> is said to be the result 
of  applying <code>f2</code> to the result of <code>f3</code>. The 
corresponding function is denoted by <code>f2 on f3</code>.
For example:<pre>
   f3 y
1 8 27 64 125 216
   f2 1 8 27 64 125 216
4 81 784 4225 15876 47089
   f2 f3 y
4 81 784 4225 15876 47089
   h=: f2 on f3
   h y
4 81 784 4225 15876 47089
   h t. 0 1 2 3 4 5 6 7 8
4 12 21 22 15 6 1 0 0</pre>
<p><b><div align="center">Exercises</div></b>
<ol>
<p><li> Determine the coefficients of various 
polynomials such as:<pre>
   g1=: f2 * f2
   g2=: f2 * f2 * f2
   g3=: f3 - f2
   g4=: f3 on g</pre></ol>
<p>Polynomials are important for a number of reasons:
<p>* Because of the wide choice of coefficients available,
 polynomials can be defined 
to approximate most functions of practical interest.
<p>* As already illustrated for sums, products, 
and composition of polynomials, they 
are <i>closed</i> under a number of important functions, 
in the sense that the resulting 
function is again a polynomial. These include:<pre>
<b>SUM</b>          c with p. + d with p.

<b>DIFFERENCE</b>   c with p. - d with p.

<b>PRODUCT</b>      c with p. * d with p.

<b>COMPOSITION</b>  (c with p.) on (d with p.)

<b>SLOPE</b>        or rate of increase over an interval

<b>DERIVATIVE</b>   or limit of the slope over small intervals

<b>AGGREGATE</b>    or area under the graph of a function

<b>INTEGRAL</b>     or limit of the area for small intervals</pre>
<p>In most of these cases, the Taylor operator can be used 
to obtain the coefficients 
of the resulting polynomial.</pre>


<h3><a name="4B."></a><a href="#4: Polynomials">4B. Notes</a>
<a href="#S4B."><font size="-1">S4B.</font></a></h3>
This brief treatment of polynomials 
is enough to provide a basis for the treatment 
of the important topics of Power Series, 
Slope and Derivative, Growth and Decay, 
and Vibrations in the next four chapters. 
We therefore defer further discussion of 
the polynomial to Chapter 16: Polynomials 
and Number Systems. That chapter 
may, however, be attempted at any point.
<p>With increasing use of computer experimentation, 
it becomes important to learn to 
use the available tools. In particular:<ol>
<p><li> Use the left and right arrows to position the 
cursor, and use the delete (Del) 
and Backspace keys to delete text.
<p><li> Use the up arrow to move the cursor to an earlier 
line, press the Enter key to 
bring it to the entry line, and then edit and re-enter it.
<p><li> Hold down the Ctrl key and press N to open a script 
window that does not 
execute entries, but allows them to be freely edited 
and then run (in the 
execution window, to which you may return by 
entering Ctrl Tab). <p><li>The run is 
performed by entering Ctrl Shift W, or silently 
by entering Ctrl W. A selected 
segment may be run by using the mouse or shift 
key to highlight it, and then 
entering Ctrl E.
<p><li> Learn to use more general facilities by 
using the mouse to drop the Help menu, 
and then using it to select the index and 
other information offered.
<p><li> Any unfamiliar term such as <i>sine</i> or 
<i>magnitude</i> (or its synonym <i>absolute value</i>) 
may be found in an English dictionary, or 
it may be ignored and returned to as 
suggested in Section 1L. </ol>


<a name="5: Power Series"></a>
<h3><div align="center"><a href="#MATH">5: Power Series</a></div></h3>
<a href="#5A.">5A. Introduction<p>                                                       
<a href="#5B.">5B. Truncated power series<p>                                              
<a href="#5C.">5C. Notes<p>     
   
<h3><a name="5A."></a><a href="#5: Power Series">5A. Introduction</a>
<a href="#S5A."><font size="-1">S5A.</font></a></h3>
Elements of a list may be identified and selected 
by its indices, beginning at zero. 
For example:<pre>
   a=:  1 2 3 4 5 6 ^ 3
   a
1 8 27 64 125 216
   0 { a
1
   1 { a
8
   5 { a
216
   6 { a
|index error
|   6    {a</pre>
A polynomial whose coefficients may be expressed 
as a function of their indices is 
called a power series. For example:<pre>
   g=: ! with 3
   g i. 8
1 3 3 1 0 0 0 0
   (g i.8) with p. 0 1 2 3 4 5 6
1 8 27 64 125 216 343</pre>
<code>g 0</code> gives the number of distinct ways that zero 
things can be chosen from three 
things; <code>g 1</code> gives the number of ways that one thing 
can be chosen, and so on, to 
the case <code>g 4</code> which shows that four things can be 
chosen from three in no ways. 
The resulting coefficients are those used in <code>c3</code> 
in Section 4A; <code>h=: ! with 4</code> 
gives those used in <code>c4</code>, and so on.
The coefficients:<pre>
   0 1 0 _1r6 0 1r120 0 _1r5040
   1 0 _1r2 0 1r24 0 _1r720 0 1r40320</pre>
used in Section 3A can also be expressed as 
power series. Both lists are reciprocal 
factorials (such as <code>1r24</code> and <code>1r120</code>) multiplied 
by <code>_1</code> or <code>0</code> or <code>1</code>. The power 
series function for the first is given by:
<pre>   ps=: % on ! * 2 with | * _1: ^ 3: = 4: | ]
   ps 0 1 2 3 4 5 6 7 8 9 10r1
0 1 0 _1r6 0 1r120 0 _1r5040 0 1r362880 0</pre>
<p><b><div align="center">Exercises</div></b><ol>
<p><li>
 Define a power series function <code>pc</code> for the 
second list of coefficients given above.</ol>



<h3><a name="5B."></a><a href="#5: Power Series">5B. Truncated power series</a>
<a href="#S5B."><font size="-1">S5B.</font></a></h3>
For the power series <code>g=: ! with 3</code>, the coefficients 
following the first four are 
all zero, and the truncated series <code>g i.4</code> therefore 
defines a polynomial that is 
equivalent to the longer list 
produced by <code>g i.8</code>. Thus:<pre>   g i.4
1 3 3 1
   (g i.4) with p. x=: 0 1 2 3 4 5 6
1 8 27 64 125 216 343
   g i.8
1 3 3 1 0 0 0 0
   (g i.8) with p. x
1 8 27 64 125 216 343</pre>
<p>On the other hand, the power series:
   <code>ps=: % on ! * 2 with | * _1: ^ 3: = 4: | ]</code>
never “terminates” with all zeros. However, the 
reciprocal factorial factor (<code>% on !</code>) ensures 
that successive terms diminish rapidly 
in magnitude, and a short series 
may therefore provide a good approximation. For example:<pre>
   ] c12=: ps i. 12r1
0 1 0 _1r6 0 1r120 0 _1r5040 0 1r362880 0 _1r39916800
   ] c10=: ps i. 10r1
0 1 0 _1r6 0 1r120 0 _1r5040 0 1r362880
   set 9
   dec (c12 with p. ,c10 with p.) 2
0.909296136 0.909347443</pre>
However, the definition of the polynomial 
in Section 1I shows that successive 
coefficients are multiplied by successive 
powers of the argument <code>x</code>. For large 
arguments, the growth of this factor may be 
fast enough to overpower the 
decrease in the coefficient. For example:<pre>
   dec (c12 with p. ,c10 with p.) 5
_1.1336173 0.08963018</pre>
For small arguments (particularly for those 
less than one in magnitude), reasonably 
short power series of the type that includes 
a reciprocal factorial factor provide 
good approximations. For example:<pre>
   dec ((ps i.20) with p.,(ps i.18) with p.) 5
_0.958933165 _0.958776369
   y=: 1r5 * i:5
   y
_1 _4r5 _3r5 _2r5 _1r5 0 1r5 2r5 3r5 4r5 1

   sin=: 1 with o.   
   ((ps i.10) with p.,.(ps i.8) with p.,.sin) y
_0.841471010 _0.841468254 _0.841470985
_0.717356093 _0.717355723 _0.717356091
_0.564642473 _0.564642446 _0.564642473
_0.389418342 _0.389418342 _0.389418342
_0.198669331 _0.198669331 _0.198669331
           0            0            0
 0.198669331  0.198669331  0.198669331
 0.389418342  0.389418342  0.389418342
 0.564642473  0.564642446  0.564642473
 0.717356093  0.717355723  0.717356091
 0.841471010  0.841468254  0.841470985 </pre>
<p>As illustrated by the last column, these 
truncated power series are approximations 
to the trigonometric sine function (on radian 
arguments). Moreover, the Taylor 
operator <code>t.</code> can be used to produce the power 
series for the sine as follows:<pre>
   sin t. i. 12r1
0 1 0 _1r6 0 1r120 0 _1r5040 0 1r362880 0 _1r39916800

   sign sin t. i. 12r1
0 1 0 _1 0 1 0 _1 0 1 0 _1</pre>
<p><b><div align="center">Exercises</div></b><ol>
<p><li>
 Try Taylor series of other functions, 
including the exponential <code>^</code><p><li>
 Comment on the results of the following:<pre>
   q=: (^t.i),.(1 with o.t.i),.(2 with o.t.i=: i.12x)
   q,.*q</pre></ol>



<h3><a name="5C."></a><a href="#5: Power Series">5C. Notes</a>
<a href="#S5C."><font size="-1">S5C.</font></a></h3>
Power series are of great importance in math, 
and it is tempting to digress in a 
discussion of reasons for this importance, 
much as was done for polynomials in 
Section 4A. <p>However, it was possible to 
confine that discussion to rather 
elementary ideas, whereas a meaningful 
discussion of the uses of power series 
would quickly lead to more advanced and 
less familiar mathematical notions 
outside the experience of many readers.
<p>The same is true of many topics (such as the 
derivative, symbolic logic, sets, and 
permutations), and we will leave the reader 
to observe the importance of topics as 
they are exploited in later work. In other
words, some faith is expected of the 
reader – a belief that topics will be introduced 
only if they are both important and 
interesting.  



<a name="6: Slope and Derivative"></a>
<h3><div align="center"><a href="#MATH">6: Slope and Derivative</a></div></h3>

<a href="#6A.">6A. Approximation to the derivative (rate of change)<p>                    
<a href="#6B.">6B. Derivatives of polynomials<p>                                          
<a href="#6C.">6C. Taylor coefficients<p>                                                 
<a href="#6D.">6D. Notes<p> 

<h3><a name="6A."></a><a href="#6: Slope and Derivative">6A. Approximation to the derivative (rate of change)</a>
<a href="#S6A."><font size="-1">S6A.</font></a></h3>
As remarked in Section 3B, the slopes of 
the segments of a graph show the 
average rate of change of a function between 
adjacent points. Plotting more points at lesser 
intervals gives a better approximation. For example:<pre>
   c=: 4 _3 _2 1
   f=: c with p.
   x1=: i.4
   PLOT x1;f x1
<img src="gr6a1.jpg" border=0 alt=""> 

   x2=: 1r10*i.31
   PLOT x2;f x2
<img src="gr6a2.jpg" border=0 alt=""> 

   x3=: 1r100 * i.301
   PLOT x3;f x3</pre>
 <img src="gr6a3.jpg" border=0 alt="">

<p>Considered as a sample of points on a 
continuous graph of the function (using an 
infinite number of points), these sloping 
lines are <i>secants</i> (cutting lines) to the 
continuous curve, and the slope at a point 
is the <i>tangent</i> (touching line) to the curve, which may 
be approximated by a secant with a small interval.
<p>The expression <code>((f x+r)-(f x))%r </code>gives the 
slope of the graph of <code>f</code> 
between arguments <code>x</code> and <code>x+r</code> as the ratio of 
the rise <code>(f x+r)-(f x)</code> to the 
run <code>r</code>. For example:<pre>
   x=: 2
   r=: 1r10
   ((f x+r)-(f x)) % r
1.41
   x=: 0 1 2 3 4 5 6
   r=: 1r1000
   ((f x+r)-(f x)) % r
_3.002 _3.999 1.004 12.007 29.01 52.013 81.016

   r=: 1r10000
   ((f x+r)-(f x)) % r
_3.0002 _3.9999 1.0004 12.001 29.001 52.001 81.002</pre>
For these small values of the run, the slopes 
appear to be “approaching a limiting 
value” given approximately by the run of one 
ten-thousandth. This limiting 
value is the derivative of the function <code>f</code>, 
that is, the slope of the tangent.
The value <code>r=: 0</code> might seem appropriate, but this 
only gives the meaningless 
division of a zero rise by a zero run. Thus:<pre>
   r=: 0
   ((f x+r)-(f x)) % r
0 0 0 0 0 0 0</pre>
The desired result is given by the derivative 
operator <code>d.</code>, with <code>f d.1</code> giving the 
(first) derivative of <code>f</code> and <code>f d.2</code> giving the 
second derivative (that is, the 
derivative of the derivative), and so on. For example:<pre>
   f d.1 x
_3 _4 1 12 29 52 81
   f d.2 x
_4 2 8 14 20 26 32
   f d.1 2 3 4 5 x
_3 _4 6 0 0
_4  2 6 0 0
 1  8 6 0 0
12 14 6 0 0
29 20 6 0 0
52 26 6 0 0
81 32 6 0 0</pre> 
Moreover, the application of the Taylor 
operator to the resulting derivatives show 
them to be terminating power series, that 
is, ordinary polynomials:<pre>
   d=:  f d.1 t. i.7
   d
_3 _4 3 0 0 0 0
   f d.2 t. i.7
_4 6 0 0 0 0 0
   d with p. x
_3 _4 1 12 29 52 81
   d with p. d.1 x
_4 2 8 14 20 26 32
   f d.2 x
_4 2 8 14 20 26 32</pre>
The coefficients <code>d</code> of the first derivative 
polynomial must bear some relation to the 
coefficients <code>c</code> of the original polynomial <code>f</code>. 
We will explore this relation by 
examining their ratios, as seen in their divide table:<pre>
   d % table c
+--+----------------+
|  |   4  _3   _2  1|
+--+----------------+
|_3|_3r4   1  3r2 _3|
|_4|  _1 4r3    2 _4|
| 3| 3r4  _1 _3r2  3|
| 0|   0   0    0  0|
| 0|   0   0    0  0|
| 0|   0   0    0  0|
| 0|   0   0    0  0|
+--+----------------+</pre>
The diagonal of successive integers <code>1 2 3</code> suggests 
that <code>d</code> may be obtained from <code>c</code> by 
multiplying by successive integers, and 
rotating the result one place to the left:<pre>
   c
4 _3 _2 1
   #c NB. number of elements in c
4
   i.#c
0 1 2 3
   c * i.#c
0 _3 _4 3
   1 |. c * i.#c
_3 _4 3 0
   d
_3 _4 3 0 0 0 0</pre>
We will first test this relation on another 
polynomial function and then, in the 
following section, examine the question of 
why the relation holds in general:<pre>
   c2=: ! with 5 i.6
   c2
1 5 10 10 5 1
   f2=: c2 with p.
   d2=: f2 d.1 t. i.5
   d2
5 20 30 20 5
   1 |. c2 * i.#c2
5 20 30 20 5 0</pre>



<h3><a name="6B."></a><a href="#6: Slope and Derivative">6B. Derivatives of polynomials</a>
<a href="#S6B."><font size="-1">S6B.</font></a></h3>
The polynomial <code>f=: 4 1 3 2 with p.</code> is a sum of 
four monomials. Thus:<pre>
   f=: 4 1 3 2  with p.
   f0=: 4 with * on (^ with 0)
   f1=: 1 with * on (^ with 1)
   f2=: 3 with * on (^ with 2)
   f3=: 2 with * on (^ with 3)
   (f0,f1,f2,:f3) x
4 4  4  4   4   4   4
0 1  2  3   4   5   6
0 3 12 27  48  75 108
0 2 16 54 128 250 432
   (f0+f1+f2+f3) x
4 10 30 76 160 294 490
   f x
4 10 30 76 160 294 490</pre>
Any slope of a function that is a sum of functions 
equals the sum of the 
corresponding slopes of the component functions, 
and the derivative of a sum of 
functions is therefore the sum of the derivatives 
of the corresponding functions. 
For example:<pre>
   (f0 d.1 , f1 d.1 , f2 d.1 ,: f3 d.1) x
0 0  0  0  0   0   0
1 1  1  1  1   1   1
0 6 12 18 24  30  36
0 6 24 54 96 150 216

   (f0 d.1 + f1 d.1 + f2 d.1 + f3 d.1) x
1 13 37 73 121 181 253
   f d.1 x
1 13 37 73 121 181 253</pre>
Similar remarks apply to the multiplication 
that occurs in the monomials. For 
example, in <code>f2=: 3 with * on (^ with 2)</code>, the 
multiplication by three 
of the square function (<code>^ with 2</code>) multiplies 
each of its slopes by three, and 
therefore multiplies its derivative by three.
It remains to determine the derivative of power 
functions such as the square. If 
<code>f=: ^ with 2</code>, then the rise <code>(f x+r)-(f x)</code> is 
given by the square of 
<code>x+r</code> (that is, <code>(x+r)*(x+r)</code>) minus the square 
of <code>x</code>. <p>Multiplication of 
the sums gives the square of <code>x</code> plus <code>2*x*r</code> plus 
the square of <code>r</code>, and subtraction 
of the square of <code>x</code> then leaves a rise of <code>2*x*r</code> 
plus the square of <code>r</code>. The slope of 
the square function (for the run <code>r</code>) is then 
given by dividing this sum by <code>r</code> to obtain 
<code>(2*x)+r</code>. The derivative is then given by the 
case for <code>r=: 0</code>, that is, <code>2*x</code> (or, 
equivalently, <code>2*x^1)</code>.
<p>Similar calculations for the 
product <code>(x+r)*(x+r)*(x+r)</code>gives <code>3*x^2</code> for 
the derivative of the cube <code>^ with 3</code>, and, 
in general, gives <code>n*x^(n-1)</code>for the 
derivative of <code>^ with n</code>. 
The contribution of a monomial <code>cn * x ^ n</code> 
to the derivative polynomial is 
therefore the monomial <code>n * cn * x ^ (n-1)</code>,
which therefore appears as a 
coefficient <code>n * cn</code> displaced one place to 
the left in the list of coefficients. <p>This 
is all embodied in the calculation <code>d=: 1: |. c * i.#c</code> 
given in the 
preceding section for the coefficients <code>d</code>
of the derivative polynomial.
These results will be summarized by defining 
a function <code>der</code> which, applied to a 
list of coefficients of a polynomial, gives 
the list of coefficients of the derivative 
polynomial. We will illustrate its use on the 
polynomial graphed in Section A, and 
will graph it together with the secant slopes 
of the function so that they can be 
compared:<pre>
   der=: 1: |. ] * i. on #
   c=: 4 _3 _2 1
   d=: der c
   d
_3 _4 3 0
   x2=: 1r10*i.31
   PLOT x2 ; (c with p. ,: d with p.) x2</pre>
<img src="gr6b1.jpg" border=0 alt="">
<p>Note that the zero value of the graph of the 
derivative occurs at the argument 
value for which the original function reaches 
its low point, that is, where its graph 
is horizontal.<p>
The phrase <i>derivative of <code>f</code></i> correctly suggests that it
is a function derived from <code>f</code>, but it is only one among many (such
as the inverse) also derived from <code>f</code>. The phrase
<i>slope of <code>f</code></i> would be more informative, and could be
distinguished from the associated <i>secant slope of <code>f</code></i>.



<h3><a name="6C."></a><a href="#6: Slope and Derivative">6C. Taylor coefficients</a>
<a href="#S6C."><font size="-1">S6C.</font></a></h3>
It is also interesting to compare the Taylor 
coefficients of the derivative of the 
polynomial <code>d with p.</code> with  the result of the 
function <code>der</code>:<pre>
   d with p. d.1 t. i.8
_4 6 0 0 0 0 0 0
   der d
_4 6 0 0</pre>
As a foretaste of the growth and oscillating 
functions of the next two chapters, we 
will also show Taylor series for the exponential and 
sine functions:<pre>
   exp=: ^
   exp t. i=:  i.10r1
1 1 1r2 1r6 1r24 1r120 1r720 1r5040 1r40320 1r362880

   exp d.1 t. i
1 1 1r2 1r6 1r24 1r120 1r720 1r5040 1r40320 1r362880
   exp d.2 t. i
1 1 1r2 1r6 1r24 1r120 1r720 1r5040 1r40320 1r362880

   sin=:  1 with o.
   ]s=: sin t. i.12r1
0 1 0 _1r6 0 1r120 0 _1r5040 0 1r362880 0 _1r39916800
   der s
1 0 _1r2 0 1r24 0 _1r720 0 1r40320 0 _1r3628800 0
   sin d.1 t. i.11r1
1 0 _1r2 0 1r24 0 _1r720 0 1r40320 0 _1r3628800
   der der s
0 _1 0 1r6 0 _1r120 0 1r5040 0 _1r362880 0 0
   der der der s
_1 0 1r2 0 _1r24 0 1r720 0 _1r40320 0 0 0
   der der der der s
0 1 0 _1r6 0 1r120 0 _1r5040 0 0 0 0
   s
0 1 0 _1r6 0 1r120 0 _1r5040 0 1r362880 0 _1r39916800</pre>



<h3><a name="6D."></a><a href="#6: Slope and Derivative">6D. Notes</a>
<a href="#S6D."><font size="-1">S6D.</font></a></h3>
For an arbitrary function <code>f</code> (such as any one 
of the functions of trigonometry), the 
matter of the limiting value of the secant 
slope <code>((f x+r)-(f x)) % r</code> as <code>r</code> 
“approaches” zero (discussed in Section 6A) 
raises difficult questions that are 
properly answered only by lengthy analysis 
of the notion of limits. This is what 
makes Calculus such a forbidding subject.
<p>In this chapter we have skirted the issue 
by confining attention to polynomial 
functions, for which the limit of the secant 
slope is easily obtained. We will, 
however, extend these results to the many 
important functions that can be 
approximated by the power series (themselves 
polynomials) that were discussed in 
Chapter 5.
<p>Can we be certain that the derivative of 
a polynomial approximation to a 
function <code>f</code> is a good approximation to the 
derivative of <code>f</code> ? Yes, but only for 
functions that are “uniformly continuous”. 
This is true of a wide range of functions 
of practical interest, including all of 
those to be treated in subsequent chapters. 



<a name="7: Growth and Decay"></a>
<h3><div align="center"><a href="#MATH">7: Growth and Decay</a></div></h3>

<a href="#7A.">7A. Growth polynomials<p>   
<a href="#7B.">7B. The name "exponential"<p> 

<h3><a name="7A."></a><a href="#7: Growth and Decay">7A. Growth polynomials</a>
<a href="#S7A."><font size="-1">S7A.</font></a></h3>
It is a common observation that growing 
things (such as young plants and animals, 
young commercial companies, and a colony 
of bacteria) change not at a constant 
rate, but at a rate roughly proportional to present size.
<p>The simplest case is where the rate of 
growth is equal to the size -- this is described 
by the exponential function, denoted 
here by <code>^</code> . In a graph of this function this 
relation may be seen approximately in 
the slopes of the secants. Thus:<pre>
   x=: 1r2*i.11
   x
0 1r2 1 3r2 2 5r2 3 7r2 4 9r2 5
   set 4
   ^ x
1 1.649 2.718 4.482 7.389 12.18 20.09 33.12 54.6 90.02 148.4
   PLOT x;^x</pre>
 <img src="gr7a1.jpg" border=0 alt="">
 <p>Since a polynomial may be found that can 
 approximate almost any function, it 
should be possible to find one that approximates 
the exponential. Consider the 
following:<pre>
   c=: 1 1 1r2 1r6 1r24 1r120 1r720 1r5040
   der=: 1:|.]*i.@:# NB. Gives coeffs of derivative 
   d=: der c
   d
1 1 1r2 1r6 1r24 1r120 1r720 0

   dec c with p. x
1 1.649 2.718 4.481 7.381 12.13 19.85 32.23 51.81 82.22 128.6
   dec d with p. x
1 1.649 2.718 4.478 7.356 12.01 19.41 30.95 48.56 74.81 113.1</pre>
The two polynomials differ only in the 
term <code>1r5040*x^7</code>, and are therefore 
nearly equal for reasonably small values of <code>x</code>. Moreover,
 the pattern required of 
further coefficients is clear: coefficient <code>k</code> 
must  be <code>1%!k</code>. Thus:<pre>
   ! i. 12r1
1 1 2 6 24 120 720 5040 40320 362880 3628800 39916800
   a=: 1 % ! i. 12
   b=: der a
   (a with p. ,. b with p. ,. ^) x
    1     1     1
1.649 1.649 1.649
2.718 2.718 2.718
4.482 4.482 4.482
7.389 7.389 7.389
12.18 12.18 12.18
20.08 20.08 20.09
33.11 33.08 33.12
54.55 54.44  54.6
 89.8 89.42 90.02
147.6 146.4 148.4</pre>
<p><b><div align="center">Exercises</div></b><ol>
<p><li> Experiment with expressions such as <code>^(x+3)</code>
 and <code>(^x) * (^3)</code>, and comment on the 
results.
<p><li> Try the following expressions, and 
comment on the results: <pre>
   (^x) * (^-x)
   ^(x+-x)
   set 2
   ^-x
   % ^ x
   decay=: ^ on -
   decay x
   decay t. i. 10</pre></ol>



<h3><a name="7B."></a><a href="#7: Growth and Decay">7B. The name Exponential</a>
<a href="#S7B."><font size="-1">S7B.</font></a></h3>
<p>In the dyadic use of the symbol <code>^</code>, the 
expression <code>x^e</code>
 is said to denote the <i>base</i> <code>x</code> 
to the <i>exponent</i> <code>e</code>, and the 
function <code>x with ^</code> 
may therefore be said to be an 
<i>exponential</i> function. For example:<pre>
   e=: 1r10*i.11
   e
0 1r10 1r5 3r10 2r5 1r2 3r5 7r10 4r5 9r10 1
   3^e
1 1.1 1.2 1.4 1.6 1.7 1.9 2.2 2.4 2.7 3
   3 with ^ e
1 1.1 1.2 1.4 1.6 1.7 1.9 2.2 2.4 2.7 3
   ^e
1 1.1 1.2 1.3 1.5 1.6 1.8 2 2.2 2.5 2.7
   2 with ^ e
1 1.1 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.9 2</pre>
The exponential function <code>^</code> appears to lie 
between the functions <code>2 with ^</code> and 
<code>3 with ^</code>. Thus:<pre>
   set 7
   (^,.2.5 with ^,.2.75 with ^,.2.71 with 
^,.2.718 with ^,.1x1 with ^) e
       1        1        1        1        1        1
1.105171 1.095958 1.106454 1.104834 1.105159 1.105171
1.221403 1.201124  1.22424 1.220658 1.221377 1.221403
1.349859 1.316382 1.354565 1.348624 1.349817 1.349859
1.491825   1.4427 1.498763 1.490005 1.491763 1.491825
1.648721 1.581139 1.658312 1.646208 1.648636 1.648721
1.822119 1.732862 1.834846 1.818786 1.822005 1.822119
2.013753 1.899144 2.030172 2.009456 2.013607 2.013753
2.225541 2.081383 2.246292 2.220115 2.225356 2.225541
2.459603 2.281109 2.485418 2.452858 2.459374 2.459603
2.718282      2.5     2.75     2.71    2.718 2.718282</pre>
The base that gives the exponential exactly is 
called Euler’s number, and is 
denoted in math by <i>e</i> and in J by <code>1x1</code> .



<a name="8: Vibrations"></a>
<h3><div align="center"><a href="#MATH">8: Vibrations</a></div></h3>

<a href="#8A.">8A. Introduction<p>                                     
<a href="#8B.">8B. Harmonics<p>
<a href="#8C.">8C. Decay<p>
<h3><a name="8A."></a><a href="#8: Vibrations">8A. Introduction</a>
<a href="#S8A."><font size="-1">S8A.</font></a></h3>
Vibrations are commonly seen in 
the motions of a clock pendulum, of a 
piano string, and of a weight (such as a plumb bob suspended on a 
rubber band or steel spring). If the 
bob is pulled straight down a certain distance from 
its rest position and released, it 
visibly oscillates above and below its rest position 
until it is brought to rest by friction 
in the air and in the suspension.
<p>If <code>b</code> is a function that gives the position of the bob 
as a function of time, then its 
speed or velocity is given by <code>b d.1</code> (the rate of change 
of position), and its 
acceleration is given by the 
second derivative <code>b d.1 d.1</code>
 (the rate of change of 
its velocity).
<p>Moreover, the acceleration is caused by the 
“restoring force” exerted by the 
spring, which is proportional to its extension 
as measured by the position <code>b</code> of the 
bob. In other words, the second 
derivative <code>b d.1</code>
 is proportional to <code>-b</code>.
<p>In the simplest case <code>-b</code> is equal 
to <code>b d.1 d.1</code>, and 
we seek a polynomial with 
this property. Consider the coefficients of the 
function <code>fs</code> introduced in Section 3A:<pre>
   c=:  0 1 0 _1r6 0 1r120 0 _1r5040
   der c
1 0 _1r2 0 1r24 0 _1r720 0
   der der c
0 _1 0 1r6 0 _1r120 0 0
   -der der c
0 1 0 _1r6 0 1r120 0 0</pre>
The required pattern is clear: it is the same 
as for the exponential of Chapter 7, 
except that alternate coefficients are zero, 
and that the other coefficients alternate 
in sign. 
The function with this property is called the 
sine, commonly abbreviated to sin:<pre>
   sin=: 1 with o.
   sin t. i.12
0 1 0 _1r6 0 1r120 0 _1r5040 0 1r362880 0 
_1r39916800
   sin t. 20 21 22 23
0 1r51090942171709440000 0 _1r25852016738884976640000</pre>



<h3><a name="8B."></a><a href="#8: Vibrations">8B. Harmonics</a>
<a href="#S8B."><font size="-1">S8B.</font></a></h3>
The function <code>sin on (2:*])</code> applies the sin to the
double of its argument, and therefore produces a vibration
(or <i>oscillation</i>)
of twice the frequency. It is called an <i>harmonic</i> of
the oscillation <code>sin</code>. This may be seen in a combined plot
of the two functions:<pre>  x=: 1r10 * i.65
  plot x;(sin x) ,: (sin on (2:*]) x)</pre>
<img src="gr8b1.jpg" border=0 alt="">
<p><b><div align="center">Exercises</div></b><ol>
<p><LI>Replace the <code>2</code> in the function <code>sin on (2:*])</code>
by other integers to produce other harmonics, and plot the 
results.<p><li>Plot the function <code>cos</code> and some of its harmonics.
<p><li>Plot the function <code>cos</code> against its harmonic
<code>cos on (2:*])</code>.</ol>



<h3><a name="8C."></a><a href="#8: Vibrations">8C. Decay</a>
<a href="#S8C."><font size="-1">S8C.</font></a></h3>
Because of "friction" of some sort, vibrations 
commonly decay, usually at an approximately exponential rate
determined by a function of the form <code>decay=: ^ on - on (] % [)</code>.
<p><b><div align="center">Exercises</div></b><ol>
<p><li>Plot the decaying oscillation <code>sin * 6 with decay </code>.
<p><li>Plot sine and cosine functions with rates of decay other
than <code>6</code>, and plot them together with their non-decaying
counterparts.</ol>



<a name="9: Inverses and Equations"></a>
<h3><div align="center"><a href="#MATH">9: Inverses and Equations</a></div></h3>

<a href="#9A.">9A. Inverse<p>                                                                   
<a href="#9B.">9B. Equations<p>                                                                 
<a href="#9C.">9C. The method of false position<p>                                              
<a href="#9D.">9D. Newton’s method<p>                                                           
<a href="#9E.">9E. Roots of Polynomials<p>                                                      
<a href="#9F.">9F. Logarithms<p>   

<h3><a name="9A."></a><a href="#9: Inverses and Equations">9A. Inverse</a>
<a href="#S9A."><font size="-1">S9A.</font></a></h3>
The predecessor function (<code>&lt;:</code>) introduced 
in 1D is said to be the <i>inverse</i> of the 
successor function (<code>&gt;:</code>) because it “undoes” 
its work. For example:<pre>
   &gt;:1 2 3 4 5
2 3 4 5 6
   &lt;:&gt;:1 2 3 4 5
1 2 3 4 5</pre>
Conversely, <code>&gt;:</code> is also the inverse 
of <code>&lt;:</code>, 
and we may simply say that the two are 
inverses.
<p>The need for inverse functions arises frequently.
 For example, the heat produced 
by an electric heater may be given by the 
function <code>h=: (* with 4) on sqr</code>, 
where <code>sqr=: *:</code> is the square function. In 
order to determine the voltage 
required to produce a desired heat, we 
need the inverse <code>v=: sqrt on (% with 4)</code>, 
where <code>sqrt=: %:</code> is the square root function. Thus:<pre>
   h=: (* with 4) on sqr
     sqr=: *:
   v=: sqrt on (% with 4)
     sqrt=: %:
   h 0 1 2 3 4 5 6 7
0 4 16 36 64 100 144 196 
   v h 0 1 2 3 4 5 6 7 
0 1 2 3 4 5 6 7 
   v 0 1 2 3 4 5 6 7 
0 0.5 0.707107 0.866025 1 1.11803 1.22474 1.32288 
   h v 0 1 2 3 4 5 6 7 
0 1 2 3 4 5 6 7</pre> 
For many (but not all) functions, the 
inverse operator <code>INV=: ^:_1</code> produces the 
inverse function. For example:<pre>
   INV=: ^:_1
   &lt;:INV 0 1 2 3 4 5 6 7
1 2 3 4 5 6 7 8
   cube=: ^ with 3
   cuberoot=: cube INV

   cube 0 1 2 3 4 5 6 7
0 1 8 27 64 125 216 343
   cuberoot cube 0 1 2 3 4 5 6 7
0 1 2 3 4 5 6 7

   ^ with 4 INV 0 1 2 3 4 5 6 7
0 1 1.18921 1.31607 1.41421 1.49535 1.56508 1.62658
   ^ with 4 ^ with 4 INV 0 1 2 3 4 5 6 7
0 1 2 3 4 5 6 7

   f=: ^ with 3 + ^ with 4
   f 0 1 2 3 4 5 6 7
0 2 24 108 320 750 1512 2744
   f INV 0 1 2 3 4 5 6 7
|domain error
|       f INV 0 1 2 3 4 5 6 7</pre>



<h3><a name="9B."></a><a href="#9: Inverses and Equations">9B. Equations</a>
<a href="#S9B."><font size="-1">S9B.</font></a></h3>
However, for a specific argument, 
say <code>y=: 20</code>, we could find the value of the 
inverse of <code>f</code> by guessing the result <code>x</code>, and 
applying <code>f</code> to it to guide us to an 
improved guess, by either increasing or
 decreasing <code>x</code>. For example:<pre>
   y=: 20
   x=: 2
   f x
24
   x=: x-1r2 
   set 5
   f x
8.4375
   x=: x+1r4
   dec f x
14.738
   dec f x=: x+1r8
18.951
   dec f x=: x+1r16
21.365
   dec f x=: x-1r32
20.131
   dec f x=: x-1r64
19.535
   dec f x=: x+1r128
19.831
   dec f x=: x+1r256
19.981
   dec f x=: x+1r512
20.056
   dec x
1.9043</pre>
This problem is commonly stated as the 
<i>equation</i> <code>(f x)=y</code>, implying that one is 
to find a value of <code>x</code> such that the relation
 is true. Moreover, the problem of solving 
equations is commonly introduced with little
 or no clue as to why the matter is important.
<p>The function <code>g=: - with y on f</code> differs 
from <code>f</code> in subtracting <code>y</code> from the 
result, and a solution of <code>(g x)=0</code> is therefore 
a solution of <code>(f x)=y</code>. A 
solution of <code>(g x)=0</code> is said 
to be a <i>root</i> of the function <code>g</code>.



<h3><a name="9C."></a><a href="#9: Inverses and Equations">9C. The method of false position</a>
<a href="#S9C."><font size="-1">S9C.</font></a></h3>
If one knows two values <code>a</code> and <code>b</code> 
such that <code>g a</code> and <code>g b</code>
 differ in sign, then a 
root of <code>g</code> must lie somewhere between them; the 
list <code>ab=: a,b</code> is said to bracket 
the root. Evaluation of <code>f</code> at its 
midpoint <code>m</code> (that is, <code>m=: mean ab</code>) will either 
yield zero (in which case <code>m</code> is a root of <code>g</code>), 
or it will differ in sign from one of the two results of <code>g ab</code>.
<p>The element of <code>ab</code> that differs can be used 
with <code>m</code> to form a tighter bracket, whose 
mean will give a better approximation to the 
root of <code>g</code>. This process may be 
repeated to obtain as close an approximation 
as desired. For example:<pre>
   g=: - with y on f
   g ab=: 1,2
_18 4
   mean=: +/ % #
   ]m=: mean ab
1.5
   g m
_11.563
   ]ab=: m,1{ab
1.5 2
   g ab
_11.563 4</pre>
In general, a bracket of a root of a function <code>g</code> 
may be tightened by the function <code>tighten</code>, 
defined and illustrated below:<pre>
   tighten=:  mean,(sign on{. on g = sign on g on mean) { ]
   tighten ab=: 1,2
1.5 2
   tighten tighten tighten ab
1.875 2
   g tighten tighten tighten ab
_1.0486 4</pre>

The function <code>tighten</code> may be paraphrased 
as follows: Compare the sign of 
the first element (<code>{.</code>) of the result of <code>g</code>
 for equality with the sign of <code>g</code> on the 
mean, and use the result (<code>0</code> or <code>1</code>) as an 
index to select from the argument; finally, 
catenate the selection with the mean.
The operator <code>^:</code> can be used to apply a 
function repeatedly, as illustrated below:<pre>
   tighten^:3 ab
1.875 2
   z=: tighten^:0 1 2 3 4 5 6 7 8 9 10 11 12 ab
   z;g z
+---------------+-------------------------+
|      1       2|         _18            4|
|    1.5       2|    _11.5625            4|
|   1.75       2|    _5.26172            4|
|  1.875       2|    _1.04858            4|
| 1.9375   1.875|     1.36501     _1.04858|
|1.90625   1.875|    0.131333     _1.04858|
|1.89063 1.90625|   _0.465246     0.131333|
|1.89844 1.90625|   _0.168624     0.131333|
|1.90234 1.90625|  _0.0190637     0.131333|
| 1.9043 1.90234|   0.0560301   _0.0190637|
|1.90332 1.90234|    0.018457   _0.0190637|
|1.90283 1.90332|_0.000309859     0.018457|
|1.90308 1.90283|  0.00907195 _0.000309859|
+---------------+-------------------------+</pre>



<h3><a name="9D."></a><a href="#9: Inverses and Equations">9D. Newton’s method</a>
<a href="#S9D."><font size="-1">S9D.</font></a></h3>
If <code>x=: 2</code> is an appoximation to the root 
of <code>g</code>, then 
(as suggested by the small 
“triangle” with apex at the point <code>x,g x</code> in the 
accompanying graph) a good 
correction is provided by dividing <code>g x</code> by the 
derivative <code>g d.1 x</code> that gives the 
slope of the tangent to the 
graph at the point <code>x,g x</code>:<pre>
    PLOT x;g x=: 1r10*i.22</pre>
	<img src="gr9d1.jpg" border=0 alt="">
	<pre>
   x=: 2
   (g , g d.1 , g%g d.1) x
4 44 0.0909091
   
   x=: x - (g%g d.1) x
   g x
0.24124
   x=: x - (g%g d.1) x
   g x
0.00106658
   
   newton=: ] - g % g d.1
   newton 2
1.90909
   g newton 2
0.24124
   
   newton^:(i.4) 2
2 1.90909 1.90287 1.90284
   g newton^:(i.4) 2
4 0.24124 0.00106658 2.1139e_8
   
   g newton ^:(i.3 5) 25
  406230     128520      40655     12855.8     4061.08
 1279.01    399.129    121.057     33.5929     7.07075
0.658183 0.00775433 1.11692e_6 2.13163e_14 3.55271e_15
</pre>
<p>Although Newton’s method converged rather rapidly for 
the function <code>g</code>, its 
convergence is not guaranteed in general, especially 
for initial guesses far from the root.



<h3><a name="9E."></a><a href="#9: Inverses and Equations">9E. Roots of Polynomials</a>
<a href="#S9E."><font size="-1">S9E.</font></a></h3>
The (possibly multiple) roots of a polynomial
<code>c with p.</code> may, in principle, be obtained by the 
methods of sections 9C and 9D, but it may be difficult
to find suitable brackets or initial guesses. However,
the function <code>roots=: > on {: on p.</code> may
be applied to the coefficients <code>c</code> to
obtain the roots. For example:<pre>   roots=: &gt; on {: on p.
   c=: _1 0 1
   r=: roots c
   r
1 _1
   c p. r
0 0
   
   d=: 6 1 _4 1
   s=: roots d
   s
3 2 _1
   d p. s
3.55271e_15 2.66454e_15 0</pre>
Because of the limited precision of the computations leading
to the roots <code>s</code>, the application of the polynomial
to them yields tiny results, but not exact zeros. The following
function (the product of the sign function with the magnitude)
serves to make such results more readable by "zeroing" tiny 
results:<pre>   zero=: **|
   zero d p. s
0 0 0</pre>
A graph of the polynomial <code>1 0 1 with p.</code> 
(one plus the square) indicates that it has no roots,
because the graph never drops to zero:
<pre>   e=: 1 0 1
   x=: i:4
   PLOT x;e p. x</pre>
   <img src="gr9e1.jpg" border=0 alt="">
<p>Nevertheless, the function <code>roots</code> applies
   as follows:<pre>   roots e
0j1 0j_1
   e p. roots e
0 0</pre>
The root <code>0j1</code> is an example of an <i>imaginary</i>
number, to be discussed in Chapter 19. Its square is negative 
one:<pre>   0j1*0j1
_1</pre>



<h3><a name="9F."></a><a href="#9: Inverses and Equations">9F. Logarithms</a>
<a href="#S9F."><font size="-1">S9F.</font></a></h3>
The <i>logarithm</i> (<code>^.</code>) is the function inverse to 
the exponential:
<pre>   ^ ^:_1
^.
   ^. ^:_1
^   
   ]x=: i.8
0 1 2 3 4 5 6 7
   ^x
1 2.71828 7.38906 20.0855 54.5982 148.413 403.429 1096.63
   ^.^x
0 1 2 3 4 5 6 7
   
   ^.x
__ 0 0.693147 1.09861 1.38629 1.60944 1.79176 1.94591
   ^^.x
0 1 2 3 4 5 6 7</pre>
As discussed in Section 7B, the exponential <code>^</code>
is equal to <code>e with ^</code>, where <code>e=: 1x1</code>
is Euler's number. Similarly, <code>e with ^.</code> is
inverse to <code>e with ^</code>, as illustrated below:
<pre>   e=: 1x1
   e
2.71828
   e with ^ x
1 2.71828 7.38906 20.0855 54.5982 148.413 403.429 1096.63
   e with ^. e with ^ x
0 1 2 3 4 5 6 7
   
   10 with ^ x
1 10 100 1000 10000 100000 1e6 1e7
   10 with ^. 10 with ^ x
0 1 2 3 4 5 6 7
   
   10 with ^. 1 10 100 1000 10000 100000
0 1 2 3 4 5</pre>
The function <code>10 with ^.</code> is the <i>base</i>-10
<i>logarithm</i>, more commonly used in elementary
math than the <i>natural log</i> <code>^.</code> .
<p>The logarithm is discussed further in Chapter 20.



<a name="10: Language and Grammar"></a>
<h3><div align="center"><a href="#MATH">10: Language and Grammar</a></div></h3>

<a href="#10A.">10A. Introduction<p>                                                             
<a href="#10B.">10B. Word formation<p>                                                           
<a href="#10C.">10C. Parsing<p> 
<a href="#10D.">10D. Conventional mathematical Notation<p>    

<h3><a name="10A."></a><a href="#10: Language and Grammar">10A. Introduction</a>
<a href="#S10A."><font size="-1">S10A.</font></a></h3>
Despite its importance, the grammar of our native 
language is not acquired by 
formal instruction, but by imitation and casual 
guidance in conversation. Formal 
grammar becomes important only at a later stage, 
in addressing more complex and 
more precise uses of language. 
<p>Formal grammar 
becomes particularly important in 
writing, where the reader has no recourse to 
interjected questions, but must extract 
meaning from the text alone.
<p>Similar considerations apply in mathematics. 
Although the Hogben remarks cited 
in our preface emphasize the importance of 
language and grammar, we have 
introduced the grammar of our language J 
only informally, allowing us to 
concentrate on the mathematical notions 
it has been used to convey.
<p>This informal approach has been made 
tolerable by limiting the writing required of 
a student in Exercises to imitation 
of expressions already used, and by providing 
guidance through conversation with the 
computer, a native speaker of the 
language. This chapter will address the 
formal grammar of J, and will also 
comment on the more loosely structured 
grammar of conventional mathematical 
notation.



<h3><a name="10B."></a><a href="#10: Language and Grammar">10B. Word formation</a>
<a href="#S10B."><font size="-1">S10B.</font></a></h3>
Grammar is commonly taken to concern 
parsing the words of a sentence into 
phrases, and determining the order in 
which the phrases are to be interpreted. 
However, it is worth noting that the 
comprehension of a sentence must begin by 
first breaking it into its component words.
<p>In a written English sentence this 
process is so simple as to go unnoticed, although 
the separation by spaces is somewhat 
complicated by things such as hyphens and 
apostrophes. In oral communication it 
is also unnoticed, not because the breaking 
of a continuous stream of sound into words 
is simple, but because (except in the 
case of a foreign language) it is so deeply ingrained.
<p>In the case of J the word formation requires some attention, 
although it is simple 
enough to have been thus far treated informally by example. 
The computer 
provides a word-formation function that may be applied to a 
sentence enclosed in 
quotes. Thus:<pre>
   ;: '12+27'
+--+-+--+
|12|+|27|
+--+-+--+
   ;: '12+.27'
+--+--+--+
|12|+.|27|
+--+--+--+
   ;: '12+0.27'
+--+-+----+
|12|+|0.27|
+--+-+----+
   ;: '+/1 2 3 4'
+-+-+-------+
|+|/|1 2 3 4|
+-+-+-------+
</pre>
The formal rules are stated in the J Dictionary as follows:
<p><blockquote>The alphabet is standard ASCII, comprising 
digits, letters (of the English 
alphabet), the underline (used in names and numbers), 
the (single) quote, 
and others (which include the space) to be referred to as graphics.  
<p>Alternative spellings for the national use 
characters (which differ from 
country to country) are discussed under Alphabet (<code>a.</code>).
<p>Numbers are denoted by digits, the 
underbar (for negative signs and for 
infinity and minus infinity -- when 
used alone or in pairs), the period (used 
for decimal points and necessarily 
preceded by one or more digits), the 
letter <code>e</code> (as in <code>2.4e3</code> to 
signify <code>2400</code> 
in exponential form), and the letter 
<code>j</code> to separate the real and imaginary 
parts of a complex number, as in 
<code>3e4j_0.56</code>.  Also see the discussion of Constants.
<p>A numeric list or vector is denoted by 
a list of numbers separated by 
spaces. A list of ASCII  characters is 
denoted by the list enclosed in single 
quotes, a pair of adjacent single quotes 
signifying the quote itself: 
<code>'can''t'</code> is the five-character abbreviation 
of the six-character word 
<code>'cannot'</code>.  The ace <code>a:</code> denotes 
the boxed empty list <code>&lt;$0</code> .
<p>Names (used for pronouns and other surrogates, 
and assigned referents by 
the copula, as in <code>prices=:  4.5 12</code>) begin with a 
letter and may 
continue with letters, underlines, and digits.  
A name that ends with an 
underline or that contains two consecutive 
underlines is a locative, as 
discussed in Section II.I.
<p>A primitive
 or primary may be denoted by a 
single graphic (such as <code>+</code> for 
plus) or by a graphic modified by one or more 
following inflections (a period or colon), as 
in <code>+.</code> and <code>+:</code> for <i>or</i> and <i>nor</i>.  
A primary may also be 
an inflected name, as in <code>e.</code> and <code>o.</code>
 for membership and pi times.  A 
primary cannot be assigned a referent. </blockquote>
It would clearly be confusing if it were possible to assign the 
name <code>+</code> to multiplication, as in <code>+=: * </code>.



<h3><a name="10C."></a><a href="#10: Language and Grammar">10C. Parsing</a>

<a href="#S10C."><font size="-1">S10C.</font></a></h3>
The complete parsing rules are stated 
in the J dictionary as follows. The leading 
five-point summary will suffice for most purposes:

<p>A sentence is evaluated by executing 
its phrases in a sequence determined by the 
parsing rules of the language.  For 
example, in the sentence <code>10%3+2</code>, the phrase 
<code>3+2</code> is evaluated first to obtain a 
result that is then used to divide <code>10</code>.  In 
summary:<ol><p><li>

 Execution proceeds from right to 
left, except that when a right parenthesis 
is encountered, the segment enclosed 
by it and its matching left parenthesis is 
executed, and its result replaces the 
entire segment and its enclosing parentheses.

<p><li> Adverbs and conjunctions are executed 
before verbs; the phrase <code>,"2-a</code> is 
equivalent to <code>(,"2)-a</code>, not to <code>,"(2-a)</code>.  
<p>Moreover, the left argument of an 
adverb or conjunction is the entire verb 
phrase that precedes it.  Thus, in the 
phrase <code>+/ . */b</code>, the rightmost 
adverb <code>/</code> 
applies to the verb derived from the 
phrase <code>+/ . *</code>, not to the verb <code>* .</code>

<p><li> A verb is applied dyadically if possible; 
that is, if preceded by a noun that is 
not itself the right argument of a conjunction. 

<p><li> Certain trains form verbs, adverbs, and 
conjunctions, as described in Section F.

<p><li> To ensure that these summary parsing rules 
agree with the precise parsing 
rules prescribed below, it may be necessary to 
parenthesize an adverbial or 
conjunctival phrase that produces anything 
other than a noun or verb.</ol>

<p>One important consequence of these rules is that 
in an unparenthesized expression 
the right argument of any verb is the result of 
the entire phrase to its right.  The 
sentence <code>3*p%q^|r-5</code> can therefore be read from 
left to right: the overall result 
is <code>3</code> times the result of the remaining phrase, 
which is the quotient of <code>p</code> and the 
part following the <code>%</code>, and so on.

<p>Parsing proceeds by moving successive elements 
(or their <i>values</i> except in the case 
of proverbs and names immediately to the left 
of a copula) from the tail end of a 
queue (initially the original sentence prefixed by 
a left marker §) to the top of a 
stack, and eventually executing some eligible 
portion of the stack and replacing it 
by the result of the execution.  <p>For example, 
if <code>a=:  1 2 3</code>, then <code>b=: +/2*a</code> 
would be parsed and executed as follows:<pre>

§ b =:  + / 2 * a  
§ b =:  + / 2 *          1  2  3
§ b =:  + / 2          * 1  2  3
§ b =:  + /          2 * 1  2  3
§ b =:  +         /  2 * 1  2  3
§ b =:  +             /  2  4  6
§ b =:              + /  2  4  6
§ b             =:  + /  2  4  6
§ b                       =:  12
§                       b =:  12
§                            12
                           § 12</pre>
The foregoing illustrates two points:  1) Execution of 
the phrase <code>2 * 1 2 3</code> is 
deferred until the next element (the <code>/</code>) 
is transferred; had it been a conjunction, the 
<code>2</code> would have been <i>its</i> argument, and the 
monad <code>*</code> would have applied to <code>1 2 3</code>; 
and  2) Whereas the <i>value</i> of the name <code>a</code> 
moves to the stack, the name <code>b</code> (because it 
precedes a copula) moves unchanged, and 
the pronoun <code>b</code> is assigned the value <code>12</code>.
<p>Parsing can be observed using the trace 
conjunction <code>13!:16 (q.v.)</code>.
The executions in the stack are confined 
to the first four elements only, and 
eligibility for execution is determined 
only by the class of each element (noun, 
verb, etc., an unassigned name being 
treated as a verb), as prescribed in the 
following parse table.  <p>The classes of 
the first four elements of the stack are 
compared with the first four columns of 
the table, and the first row that agrees in 
all four columns is selected.  The bold 
italic elements in the row are then subjected 
to the action shown in the final column, and are replaced by its result.  If no row is 
satisfied, the next element is transferred from the queue:

<pre>
EDGE      <b><i>VERB        NOUN</i></b>   ANY        0  Monad
EDGE+AVN  VERB        <b><i>VERB   NOUN</i></b>       1  Monad
EDGE+AVN  <i><b>NOUN        VERB   NOUN</b></i>       2  Dyad 
EDGE+AVN  <i><b>VERB+NOUN   ADV</b></i>    ANY        3  Adverb
EDGE+AVN  <i><b>VERB+NOUN   CONJ   VERB+NOUN</b></i>  4  Conj
EDGE+AVN  <i><b>VERB        VERB   VERB</b></i>       5  Trident
EDGE      <i><b>CAVN        CAVN   CAVN</b></i>       6  Trident
EDGE      <i><b>CAVN        CAVN</b></i>   ANY        7  Bident
<i><b>NAME+NOUN ASGN        CAVN</b></i>   ANY        8  Is
<i><b>LPAR      CAVN        RPAR</b></i>   ANY        9  Paren

Legend:	AVN	denotes	ADV+VERB+NOUN
CAVN    denotes	CONJ+ADV+VERB+NOUN
EDGE    denotes	MARK+ASGN+LPAR</pre>



<h3><a name="10D."></a><a href="#10: Language and Grammar">10D. Conventional mathematical notation</a>
<a href="#S10D."><font size="-1">S10D.</font></a></h3>
This section is a discussion of mathematical 
notation from the vantage point of 
programming languages, with emphasis on 
ideas from programming that might be 
adopted without conflict in mathematical 
notation. 
<p>It includes a discussion of the 
learnability of mathematical notation as 
compared with other specialized notations 
and with native languages, as well as the 
importance of such learnability.
<p><b>SOME HISTORICAL VIEWS ON NOTATION</b>
Mathematicians have often noted the power 
and importance of notation. In Part IV 
of his two-volume <i>A History of Mathematical 
Notations</i> [3], Florian Cajori offers 
the following examples:<blockquote>
By relieving the brain of all unnecesary work, 
a good notation sets it free 
to concentrate on more advanced problems, and 
in effect increases the 
mental power of the race... By the aid of 
symbolism we can make transitions 
in reasonings almost mechanically by 
the eye... <b>A. N. Whitehead</b>
<p>Nothing in the history of mathematics is to 
me so surprising or impressive 
as the power it has gained by its notation or language ...
But in Napier’s time, when there was practically 
no notation, his discovery 
or invention [of logarithms] was 
accomplished by mind alone, without any 
aid from symbols. <b>J.W.L. Glaisher</b>
<p>Some symbols, like a<sup>n</sup>, ..., log n, 
that were used originally for only positive 
integral values of n stimulated 
intellectual experimentation when n is 
fractional, negative, or complex, which 
led to vital extensions of ideas.  <b>F. Cajori</b>
<p>The quantity of meaning compressed into 
small space by algebraic signs, is 
another circumstance that facilitates 
the reasonings we are accustomed to 
carry on by their aid. <b>Charles Babbage</b>
<p>Symbols which initially appear to have 
no meaning  whatever, acquire 
gradually, after subjection to what 
might be called experimenting, a lucid 
and precise significance. <b>E. Mach</b> </blockquote> 
On the other hand, Cajori comments 
on the paucity of publications concerning the 
general question of notation, and 
quotes De Morgan (“a close student of the 
history of mathematics”) as follows:
Mathematical notation, like language, 
has grown up without much looking 
to, at the dictates of convenience and 
with the sanction of the majority.   
<p>In Sections 740 ff, Cajori laments the 
lack of standardization of mathematical 
notation in the following excerpts: 
<p><b>§740</b> Uniformity of mathematical notations 
has been a dream of many 
mathematicians ...
<p><b>§741</b> The admonition of history is clearly 
that the chance, haphazard procedure of 
the past will not lead to uniformity.
<p><b>§746</b> In this book we have advanced many 
other instances of “muddling along” 
through decades, without endeavor on the 
part of mathematicians to get together 
and agree on a common sign language.
<p><b>§748</b> In the light of the teaching of history 
it is clear that new forces must be 
brought into action in order to safeguard the 
future against the play of blind 
chance. ... We believe that this new agency 
will be organization and co-operation. 
To be sure, the experience of the past in 
this direction is not altogether reassuring.
<p>However, in <i>William Oughtred: A Great 
Seventeenth-Century Teacher of 
Mathematics</i> [4], Cajori touches on a 
quite different agency that bears upon the 
development and teaching of mathematics -- 
the mathematical instrument. On 
page 88 we have:
<blockquote>In that preface William Forster quotes the 
reply of Oughtred to the 
question of how he (Oughtred) had for so 
many years concealed his 
invention of the slide rule from himself 
(Forster) whom he had taught so 
many other things. The reply was:
<blockquote>That the true way of Art is not by Instruments, but by 
Demonstration: and that it is a preposterous course of vulgar 
Teachers, to begin with Instruments, and not 
with the Sciences, and 
so in-stead of Artists, to make their Scholers only doers of tricks, 
and as it were Iuglers ... That the vse of instruments is indeed 
excellent, if a man be an Artist: but contemptible being set and 
opposed to Art. And lastly, that he meant to commend to me, the 
skill of Instruments, but first he would haue me well instructed in 
the Sciences.</blockquote></blockquote> 
On page 93 Cajori continues with:
<blockquote>It may be claimed that there is a middle ground which more nearly 
represents the ideal procedure in teaching. Shall 
the slide rule be placed in 
the student’s hands at the time when he is engaged 
in the mastery of 
principles? Shall there be an alternate study of 
the theory of logarithms and 
of the slide rule -- on the idea of one hand washing 
the other -- ...</blockquote>
Writing in the early 1900’s, Cajori could not have 
foreseen the advent of that 
universal mathematical instrument, the modern 
computer, nor its spawning of the 
development and study of the notations of programming languages.
<p><b>PROGRAMMING LANGUAGES</b>
Early computers provided a small set of operations 
such as addition and 
multiplication, and were controlled by programs 
specifying sequences of these 
operations. For example, on the Harvard Mark IV [5], the program:<pre>
      00 0080 10
      00 0081 11
      10 0082 11</pre>
<i>loaded</i> the number contained in <i>register</i> 80 into the 
<i>accumulator</i>, added register 
81 to it, and <i>stored</i> the resulting sum in register 82.
<p>Programs were later developed to translate from 
languages more congenial to 
mathematicians into equivalent  machine language 
programs for subsequent 
execution. For example, in BASIC, a language 
largely derived from FORTRAN 
(Formula Translator) [6], one might write:<pre>
      Let a=3
      Let b=5
      Let c=(a+b)*(a-b)</pre>
Although a few symbols from programming languages 
(such as FORTRAN’s * for 
multiplication) have been widely adopted in math, 
the mathematical notation used 
in exposition has been largely unaffected. On the 
other hand, many mathematicians 
have been forced to learn programming languages, 
or to work with programmers 
who translate their mathematical expressions. 
<p>Moreover, many have moved to 
Computer Science, unwittingly following the advice of 
Newton, as expressed in 
the following excerpt from page 95 of Cajori [4]:<blockquote>
“I doubt not but that there shall be in convenient time, 
brought to light 
many precepts which may tend to ye perfecting of 
Navigation, and the help 
and safety of such whose Vocations doe inforce 
them to commit their lives 
and estates in the vast Ocean to the providence 
of God.” Thus farr that 
very good and judicious man Mr. Oughtred. I will 
add, that if instead of 
sending the Observations of Seamen to able 
Mathematicians at Land, the 
Land would send able Mathematicians to Sea, 
it would signify much more 
to the improvemt of Navigation and safety of
 Mens lives and estates on 
that element.</blockquote> 
The need to make translation manageable has 
led to the development of languages 
with simple and precisely defined grammars, 
that is, rules for word-formation and 
parsing. Although mathematical notation 
undoubtedly possesses parsing rules, they 
are rather loose, sometimes contradictory, 
and seldom clearly stated. It is perhaps 
significant that Cajori’s History makes 
no mention of the matter of grammar.
<p>The proliferation of programming languages 
shows no more uniformity than 
mathematics. Nevertheless, programming 
languages do bring a different 
perspective. Not only do they provide 
precisely defined grammars, but they 
address a much wider range of applications 
than do any one of the notations 
treated by Cajori. Moreover, they sometimes 
adopt notions from advanced 
mathematics and apply them fruitfully at elementary levels. 
<p>For example, the essential notion of Heaviside’s 
operators [7] (introduced in the 
treatment of differential equations) is the 
application of an entity (called an 
operator) which, applied to a function, 
produces a related function; a notion more 
familiar in the form f ' for the derivative of f.   
In APL [8], an operator (denoted 
by /) is used to provide reduction over a vector 
argument. The sum over a vector 
is obtained as follows:<pre>
   v&lt;-2 7 1 8 2 8
   +/v
28</pre>
The operator applies to any function, such 
as <code>*</code> (times), <code>&gt;.</code> (max), 
or <code>&lt;.</code> (min), and 
may therefore obviate the use of many symbols 
such as the capital Greek sigma and pi for summation and 
product:<pre>
   (*/v),(&gt;./v),(&lt;./v)
1792 8 1</pre>
Because of their application to a broad range 
of topics, their strict grammar, and 
their strict interpretation, programming 
languages can provide new insights into 
mathematical notation. We begin with the matter of symbols.
<p><b>ECONOMY OF SYMBOLS</b>
Far from introducing further symbols in 
the manner of Oughtred’s list (of some 
150) shown in §181 of Cajori [3], programming 
languages are largely confined to 
a standard alphabet (ASCII) whose special characters 
are limited to the following 
familiar list:<pre>
    = &lt; &gt; _  + * - %  ^ $ ~ |  . : , ;  
    # ! / \  [ ] { }  " ' ` @ &amp; ? </pre>  
This economy is achieved in part by adopting from 
mathematics the use of 
<i>reserved</i> words such as sin, cos, e, and log -- reserved 
from use as names for 
variables. Further economies are implicit in notions 
that have been used in 
mathematics but not systematically exploited. We will  
illustrate them by their use 
in J, a language derived from APL.
<p><b>TRAINS</b> Some writers, such as March and Wolf 
in their <i>Calculus</i> [10], denote the 
function that is the sum of functions <code>f</code> and <code>g</code> 
by <code>f+g</code>. This notion can be exploited 
more generally, including constructs such 
as <code>f+g*h</code> for <code>f</code> added to the product of 
<code>g</code> and <code>h</code>. For example, 
using <code>%</code> for divide, 
and <code>#</code> for number of elements:<pre>
   mean=:  +/ % #    NB. Arithmetic mean or average
   mean 1 2 3 4 5
3
   com=:  ] - +/ % # NB. ] is the identity function
   com 1 2 3 4 5    NB. Center on mean
_2 _1 0 1 2</pre>
Non-mathematical functions can  be used in a train. 
For example, the function <code>;</code> 
(which boxes each argument and catenates the boxed 
results) can be used to 
display results for convenient comparison:<pre>
   (];mean;com;] - +/ % #) 1 2 3 4 5
+---------+-+-----------+-----------+
|1 2 3 4 5|3|_2 _1 0 1 2|_2 _1 0 1 2|
+---------+-+-----------+-----------+</pre>
<p><b>INFLECTION</b> A symbol formed by appending a dot 
or colon to a given function 
symbol will be said to be inflected, and such 
inflection is used to assign related 
symbols to related functions, providing names 
that therefore have some mnemonic 
value. For example, in his <i>Laws of Thought</i> [9], 
George Boole used <code>1</code> and <code>0</code> to 
denote true and false, and used the symbols for 
<i>times</i> and <i>plus</i> to denote the 
logical functions <i>and</i> and <i>or</i>. 
<p>The analogy between 
<i>times</i> and <i>and</i> was helpful, and 
the conflict with the normal use of the symbols 
was of no concern within the 
confines of logic. In a wider context it is a 
concern, and J uses <code>*</code>. for <i>and</i> and <code>+</code>. 
for <i>or</i>. Similarly, <code>=</code> is used as a truth-function 
(like </code>&lt;</code> and </code>&gt;</code>), whereas </code>=: </code> is used 
as a copula (to assign a referent to a name), and </code>&lt;</code>. 
is used for lesser-of (that is, 
minimum). Thus:<pre>
   p=:  0 0 1 1 [ q=:  0 1 0 1
   (p *. q);(p +. q);(p + q);(p &lt; q);(p &lt;. q)
+-------+-------+-------+-------+-------+
|0 0 0 1|0 1 1 1|0 1 1 2|0 1 0 0|0 0 0 1|
+-------+-------+-------+-------+-------+</pre>
<b>AMBIVALENCE</b> In the expression <code>a-b</code> the symbol <code>-</code> 
denotes subtraction (a function of two arguments),
whereas in <code>-b</code> it 
denotes negation, a different (albeit 
related) function of one argument. This 
ambivalence (a “binding power” of either 
two or one) introduces no confusion in 
conventional notation, and could be 
exploited for other functions:<pre>
   a=: 2
   b=: 5
   (a-b),(-b)   NB. Subtraction and Negation (0-b)
_3 _5
   (a%b),(%b)   NB. Division and Reciprocal (1%b)
0.4 0.2
   (a^b),(^b)   NB. Power and Exponential (e^b)
32 148.413
   (a^.b),(^.b) NB. Base-a log, Natural log (e^.b)
2.32193 1.60944</pre>
<b>BONDS</b> In their <i>Combinatory Logic</i> [11], 
Curry and Feys developed a set of 
combinators, which we will treat as operators 
in the sense of Heaviside. One of 
these bonds a function of two arguments 
(such as <code>^</code>) to one of its arguments (such 
as <code>3</code>) to produce a function of one argument 
(the cube), an operation that has 
come to be called <i>Currying</i> in honour of its author. 
For example:<pre>
   cube=:  ^ with 3
   log10=:  10 with ^.
   (cube ; log10) 10 50 100 200 
+-------------------+-------------------+
|1000 125000 1e6 8e6|1 1.69897 2 2.30103|
+-------------------+-------------------+</pre>
Conclusion. Taken together, <i>trains</i>, 
<i>inflection</i>, <i>ambivalence</i>, and  <i>bonds</i> provide 
highly mnemonic representations for 
a host of functions. Their advantages can be 
fully appreciated only by careful 
comparison with the alternatives now used in 
mathematics.
<p><b>A UNIFORM NOTATION</b>
Cajori recognizes the importance of 
individual invention, but warns against 
individual efforts to impose a uniform system:<blockquote>
<b>§727</b> Invention of Symbols. -- Whenever the 
source is known, it is found to have 
been individualistic -- the conscious suggestion of one mind.
<p><b>§742</b> This confusion is not due to the 
absence of individual efforts to introduce 
order. Many an enthusiast has proposed 
a system of notation for some particular 
branch of mathematics, with the hope, 
perhaps, that contemporary and succeeding 
workers in the same field would hasten 
to adopt his symbols and hold the 
originator in grateful remembrance. Oughtred 
in the seventeenth century used over 
one hundred and fifty signs for elementary 
mathematics -- algebra, geometry, and 
trigonometry.</blockquote>
Comments about the hope of grateful remembrance 
appear unkind;  perhaps Oughtred 
invented symbols to clarify his own thinking, 
and as a tool for teaching. 
Nevertheless, Cajori’s main point is sound --
any attempt to impose an individual 
system is vain and hopeless. <p>However, 
such a system <i>can</i> be used as a basis for the 
discussion of mathematical notation: the 
precision provided (or enforced) by 
programming languages and their execution 
can identify lacunas, ambiguities, and 
other areas of potential confusion in 
conventional notation. <p>Discussion here will focus 
on such matters, and may suggest remedies. 
Discussion will also center on a single 
programming language (J), for the following reasons: 
<p>* As indicated in my A Personal View of APL [12], 
it was designed “as a simple, 
precise, executable notation for the teaching of 
a wide range of subjects”.
<p>* It has received some use in mathematical exposition.
<p>* Its simple grammar is defined by a ten-by-four 
table in terms of six parts of 
speech.
<p>* It uses vectors, matrices, and higher-dimensional 
arrays, based on the unifying 
concept of <i>rank</i> or <i>order</i> in Tensor Calculus [13].
<p>* In addition to the bond operator already discussed, 
it embraces some fifteen or 
more operators (such as dual, Taylor, and 
Hypergeometric) of interest in 
mathematics.
<p><b>GRAMMAR</b>
The evaluation, interpretation, or execution 
of the mathematical expression (or 
sentence) <code>log(a+b)*(a-b)</code> is carried out by 
identifying the primitive operations 
(such as addition) and then performing 
them in an appropriate order. The process 
begins with word-formation (identification 
of the individual words: <code>log</code>, left 
parenthesis, <code>a</code>, <code>+</code>, <code>b</code>, etc.), and continues 
with parsing the sequence of words 
according to a formal or informal grammar 
based upon the parts of speech 
(variables, functions, punctuation, etc.).
<p>In natural language, the word-formation is 
largely unnoticed, except in listening to 
an unfamiliar language. In programming 
languages, the word-formation and 
parsing are commonly lumped together under 
the term syntax. 
<p>In J, the word-
formation may be made explicit by applying 
the word-formation function (<code>;:</code>) to a 
quoted character string:<pre>
   ;:'log(a+b)*(a-b)'
+---+-+-+-+-+-+-+-+-+-+-+-+
|log|(|a|+|b|)|*|(|a|-|b|)|
+---+-+-+-+-+-+-+-+-+-+-+-+</pre>
<p>Although programming languages adopt the 
term grammar from English, most use 
terms for the parts of speech adopted from 
mathematics. J, on the other hand, uses 
terms from English, avoiding certain ambiguities 
(such as the use of <i>operator</i> both 
as a synonym for function in elementary math, and 
as an operator in the sense of Heaviside), 
and providing additional distinctions. <p>The  
following fragment exemplifies all of the 
parts of speech:<pre>
   sqr=: ^ with 2
   area=: sqr 4
   +/\4#3
3 6 9 12
	
              PARTS OF SPEECH
			 
      MATH TERMS           ENGLISH (J) TERMS
	  
      Constants	   2 3 4   Nouns
      Variable	   area    Pronoun
      Functions	   ^ #     Verbs
      Function	   sqr     Proverb
      Operators	   / \     Adverbs
      Operator	   with    Conjunction
                   ( )     Punctuation
                   =:       Copula</pre>
<p>The choice of English terms is based on the 
analogy between the “action words” 
<i>verb</i> and <i>function</i> (which derives from the 
Latin <i>fungio</i>, to perform). Moreover, 
<i>adverb</i> describes the action of an operator 
in applying to a verb to produce a verb, 
and <i>conjunction</i> reflects the use of the 
copulative conjunction <i>and</i> to produce a 
verb such as "run and hide".  The word 
<i>proverb</i> (in the sense used here) is 
pronounced with a long o. 
<p>The term <i>variable</i> merits further comment. 
The expressions <code>2+2</code> and <code>2*2</code> and 
<code>2^2</code> yield identical results, <i>only</i> for the 
specific argument <code>2</code>, but <code>2*2</code> 
and <code>sqr 2</code> 
are identical for <i>any</i> argument. Such an 
identity is usually expressed by using a 
variable argument in the form <code>x*x</code> and <code>sqr x</code></code> . 
<p>However, the use of the term 
<i>variable</i> for the pronoun <code>pi</code> in the 
expression <code>pi=: 3.14159</code> is jarring, since 
there is no intent to allow its value 
to vary. Although the term <i>pronoun</i> is not 
commonly used in mathematics, Hogben 
uses it (p 432) to refer to the symbol <i>e</i> 
used for Euler’s number.
<p><b>SYNONYMS, ANONYMS, AND SUBSTITUTION</b>
A synonym of a word is a word with a similar, 
but not necessarily equivalent, 
meaning. Synonyms that occur in mathematical 
notation can be misleading if they 
are carelessly interpreted. 
<p>For example, 
division may be expressed as a%b or 
a/b. Are they equivalent? If so, 
are  a%b%c and  and a/b/c and a%b/c and a/b%c 
equivalent? Or do they differ in order of execution?
<p>It may be said that “one would never write 
such forms”, but if not, why not? Are 
there any rules that forbid it, and how is 
the beginning student to know? Notice 
that a/ 3/4 would probably be accepted, if 
only because the form 3/4 no longer 
denotes division: it is the commonly-accepted 
form of the constant three-quarters. 
<p>Synonyms for multiplication raise further questions. For example, are the following 
expressions all executed in the same 
order:  a%b*c and a%bc and a/b*c and 3/4c?
<p>The term anonym (a nameless person) will 
be used for any nameless entity: in the 
product abc, the matrix product M N (or MN), 
and the power </code>x<sup>n</sup></code>, the functions 
applied are unnamed. <p>Although this anonymity 
normally goes unremarked, it has 
consequences. As remarked in the section on 
Programming Languages, the 
notation <code>+/v</code> can replace the Greek sigma for summation and, more 
generally, <code>f/</code> can replace other such 
symbols, but only for functions that 
are not anonymous. <p>Moreover, the strict use 
of the anonymous form abc forbids the 
use of multi-character mnemonic names 
such as age and area in elementary algebra, 
giving the unfortunate impression that 
algebra is about letters rather than about the use of names.
<p>Multi-character names that end in digits do get 
used: a2 is interpreted as a single 
name rather than as the product of a and 2, although 2a 
is interpreted as two times a.   
<p>An important general notion is the validity of  
substituting equals for equals, and it 
is particularly valuable in mathematics. Nevertheless, 
conventional mathematical 
notation does not always permit it. <p>For example, using 
the anonymous form xy:<pre>
   x=:  3 [ y=:  4
   (x*y),(3*4),(xy),(34) NB. xy is NOT a J expression
12 12 12 34</pre>
<b>HIERARCHY AND ORDER OF EXECUTION</b>
The polynomial expression 3x+4x<sup>2</sup>+2x<sup>4</sup> evaluates 
correctly only under the 
convention that the power function is 
executed before multiplication, and 
multiplication before addition. This 
heirarchy is adopted throughout mathematics, 
and in almost all programming languages. 
<p>In APL and J there is no heirarchy, the 
need for parentheses in polynomials (as in 
many other expressions) being obviated 
by the use of vectors, as in <code>+/3 4 2*x^1 2 4</code>, 
and in <code>+/c*x^e</code>.
<p>The expression <code>1-2-3-4-5</code> may be interpreted 
differently according to how it is 
parenthesized: the following interpretations 
are used in mathematics and in J:<pre>
   (((1-2)-3)-4)-5  NB. Math
   1-(2-(3-(4-5)))  NB. J</pre>
<p>The math result is the first element 
less the sum of the rest (i.e., <code>1-(2+3+4+5)</code>), and 
the J result is the alternating sum <code>(1+3+5)-(2+4)</code>. 
<p>Since <code>f/v</code> inserts the 
function <code>f</code> between elements of <code>v</code>, 
the J expression <code>-/v</code> gives the alternating 
sum, a commonly-needed result that is expressed in 
math as the sum over 
(Greek sigma) <code>(-1)<sup>i</sup> v</code>. 
Similarly, 
the alternating product is expressed as <code>%/v</code>. 
<p>Heirarchy introduces ambiguities, particularly for 
synonyms and anonyms, which 
may or may not be accorded the same positions: 
are a/bc and a/b*c equivalent?
<p><b>CONSTANTS</b> 
 Mathematics reserves various symbols for constants, 
such as <i>e</i> (for Euler’s 
number), and the Greek pi. Programming languages 
use “scientific” notation of the form 
<code>3e6</code> to denote <code>3*10^6</code>. Producing no conflict, 
this has also been widely adopted in 
mathematics. <p>Notations such as <code>3j4</code> (a complex 
number) and <code>1r2</code> (a rational) 
and <code>1r2p1</code> could be similarly adopted for many 
convenient constants, as 
illustrated by the following examples from J:<pre>
   2p1 1r2p1 1r4p_1   NB. Multiples of powers of pi
6.28319 1.5708 0.0795775
   3x2 2b101    NB. 3 times e sqared,101 in base 2
22.1672 5 
   2ad30 NB. Complex number, magnitude 2 at 30 deg.
1.73205j1</pre>

<p><b>NEUTRAL OR IDENTITY ELEMENT</b>
In Section 2.6 of <i>Concrete Mathematics</i> [2], 
Graham, Knuth and Patashnik state 
that “... a product of no factors is conventionally 
taken to be 1 (just as a sum of no 
terms is conventionally 0).” 
<p>These choices are not 
mere conventions, and may be 
based more firmly on the <i>neutral</i> or <i>identity 
element</i> of a function, that is, a value 
<code>n</code> (when it exists) such 
that <code>n f x</code> yields <code>x</code> 
for any argument <code>x</code>. For example, <code>0</code>  is
the neutral of <code>+</code>, and <code>1</code> is the neutral 
of <code>* </code>.
<p>Using <code>k{.v</code> 
and <code>k}.v</code> to take and drop the first <code>k</code> elements 
of a vector <code>v</code>, we may write identities 
concerning sums and products over partitions of a vector:<pre>
   v=:  2 3 5 7 11  
   k=:  3
   (k{.v);(k}.v);((+/k{.v) + (+/k}.v));(+/v)    
+-----+----+--+--+
|2 3 5|7 11|28|28|
+-----+----+--+--+
   (*/v);((*/k{.v) * (*/k}.v))
+----+----+
|2310|2310|
+----+----+</pre>
<p>The indicated identities hold as well 
for the case <code>k=: 0</code> (for 
which <code>k{.v</code> is an 
empty vector), but only because the 
results of <code>+/i.0</code> and <code>*/i.0</code> 
are defined to 
be the neutrals of <code>+</code> and <code>*</code>.
The neutral 
of minimum (<code>&lt;./i.0</code>) is infinity, in 
effect defining it.
<p><b>EMPTY CASES IN DEFINITION</b>
In a definition of the form x(x-1)...(x-m+1)  
(As in Eq 2.43 of Concrete 
Mathematics [2] together with the note: m factors 
for m not equal to 0), the notation does not 
show explicitly what happens in the case of m=0. 
<p>In vector notation, this definition 
(of the falling factorial function) 
becomes <code>*/x-i.m</code>, 
correctly including the case 
of the empty vector that occurs when <code>m</code> is zero. 
Moreover, <code>*/x+s*i.m</code> covers a 
host of cases; in particular, the 
values <code>_1</code> and <code>0</code> 
and <code>1</code> for <code>s</code> give the falling 
factorial, the ordinary power function, and the 
rising factorial. Non-integer values 
of <code>s</code> are equally useful in the finite calculus.
<p>Because the factors in the expression change in 
steps like the stope in a mine, these 
functions are collectively called <i>stopes</i>, and the 
fit operator <code>!.</code> provides them in 
expressions of the form <code>^!.s</code>. 
<p>Furthermore, <code>p.!.s</code> 
provides the corresponding 
polynomial functions (in which the power function <code>^</code> 
used in the ordinary 
polynomial is replaced by the stope function <code>^!.s</code>). 
Compare the use of <code>^!.s</code> 
with the notations discussed in the introductory 
Note on Notation in [2].
<p><b>DUALS</b>
It is a familiar observation that almost every 
stated task t is preceded by some 
preparation p, and followed by restoration 
(the inverse of p). This is sometimes 
expressed as performing “t under p”, as 
in “surgery under anesthetic”. <p>In 
mathematics, the terms <i>dual</i> and <i>duality</i> 
are sometimes used, as in “<i>or</i> is the dual 
of <i>and</i> under (or with respect to) negation”, 
and “the duality of <i>and</i> and <i>or</i>”. <p>The 
use of under is ubiquitous in mathematics 
and related disciplines, but often cloaked 
in other terms, such as similarity in the 
product S<sup>-1</sup> A S, where S is a matrix of 
eigenvectors that maps to “natural” coordinates. 
<p>We will express “t under p” as
<code>t under p</code>, using the “under” 
operator  <code>under=: &amp;.</code> . Thus:<pre>
   under=: &amp;.
   0 0 1 1 +. under -. 0 1 0 1 NB. Or under not is and
0 0 0 1
   3 + under ^. 4      NB. Times as add under natural log
12
   3 – under (10 with ^.) 4 NB. Division using base-10 log
0.75

   (&lt;2 1 3) + under p. (&lt;1 0 4)    NB. Add polynomials 
+-+------------------+
|2|3.68614 1 0.813859|
+-+------------------+</pre>
<p>This last example uses the function <code>p.</code> to map 
the polynomial roots given by the 
arguments to corresponding coefficients, 
which are then added and mapped back 
to give the equivalent multiplier <code>2</code> 
and roots <code>3.68614 1 0.813859</code>.
<p><b>LEARNABILITY OF LANGUAGE</b>
The learnability of a discipline depends 
strongly on the learnability of the language 
used. In teaching mathematics we should 
therefore consider the learnability of the 
language  used, and compare it with that of 
specialized languages (such as musical 
notation), and of our native tongue. <p>For example, 
a child can quickly learn to 
transcribe the following tune from musical notation 
to a piano, perhaps by merely 
watching it done by an adult:<pre>
--------------------------------
   O                   O
--------------------------------
        O         O         O
--------------------------------		  
             O
--------------------------------

--------------------------------
</pre><p>Further refinements such as the indication of time, 
sharps, flats, and phrasing may 
be added and learned with equal facility.<p> Two matters
 warrant further comment:
<p>* A less graphic presentation of the notes (such as 
the sequence e c a c e c) 
would be more difficult for a beginner to learn. 
Moreover, the phenomenal rate 
of transcription by a pianist could hardly be 
achieved using parallel lists of 
named notes. Admittedly, this speed is due in 
part to the musical coherence of 
the piece transcribed, just as our speed in reading 
a meaningful English 
sentence is much greater than in reading gibberish.
<p>* The ease of learning musical notation claimed in 
this example is due in part to 
the tool used; in this case the piano. The linear 
arrangement of the piano keys 
mirrors the vertical movement over the musical 
staff, and proves much easier 
to understand than the multiple strings (and 
absence of frets) on a violin.
<p>With the computer and programming languages, 
mathematics has newly-acquired 
tools, and its notation should be reviewed 
in the light of them. The computer may, 
in effect, be used as a patient, precise, 
and knowledgeable “native speaker” of 
mathematical notation.
<p>In <i>The Language Instinct</i> [14], Pinker has 
treated the phenomenal learnability of 
natural languages as an inborn instinct in 
children, and in <i>The Symbolic Species</i> 
[15], Deacon has presented the co-evolution 
of language and the human brain as 
an explanation of this miracle of an inborn 
facility. <p>In Deacon’s view, language has 
developed under evolutionary pressure to have, 
at least for elementary purposes, a 
uniform structure that is easily learned, 
particularly by infants. For example, the 
pattern in the sentences:<pre>
	Hold the doll
	Drop the ball</pre>
<p>applies uniformly to other nouns and verbs. 
Moreover, these patterns extend to 
simple compound sentences and tenses:<pre>
	Drop the ball and hold the doll
	I dropped the ball and holded the doll</pre>
<p>Of course a child never hears a phrase such 
as “holded the doll”, but uniformly 
applies the pattern used in “dropped”, 
finally adopting the anomalous forms of 
strong verbs such as hold. According to 
Pinker, this adoption occurs at a time 
quite independent of badgering by adults 
(No, dear, you held the doll).
<p>However, in contrast to our native tongue, 
mathematical notation is neither 
uniform nor easy to learn. Consider the following 
examples, expressed first in 
English:<pre><font size="-1">
(base 10) logarithm of 3    log10 3

negation of 3               -3

factorial 3                 3! (Order of noun and verb reversed)

(# of combs of)             3 above 5 in large parentheses 

3 to the power 5            3 superscript 5

3 beside 5                  (3,5) (Parens mandatory for vectors)

this is 3                   Let t=3 (Single-letter names only)

that is  5                  Let u=5

this plus that              t+u

(is) this lessthan that     t&lt;u Usually treated as assertions,

(is) this equalto that      t=u     rather than as more usable truth- 
                                    functions that return results</font></pre> 
<p>A review of earlier sections will suggest other 
examples of non-uniform notation 
that further increase the difficulties for a beginner. 
<p>Experienced mathematicians 
may well accept such non-uniformities as obvious or
natural. 
Moreover, they will be properly concerned 
about the continued readability 
of older literature if any change were to be made. 
However, this is not a new 
problem, and there are known ways in which such 
change may be addressed.
<p>Are such non-uniformities essential to mathematics, 
or are they simply relics of the 
“...chance, haphazard procedure of the past...” cited 
by Cajori, and therefore 
replacable? To illustrate the possibilities, we will 
repeat the foregoing examples 
together with equivalent expressions in two distinctly 
different programming 
languages:<pre><font size="-1">
English                 Math                 J         C

logarithm of 3          log10 3              10^.3     log10(3.0)  

negation of 3           3                    -3        -3

factorial 3             3!                   !3        fact(3)

(# of combs of)         3 above 5 in parens  3!5       outof(3,5)

3 to the power 5        3 superscript 5      3^5       pow(3.0,5.0)

3 beside 5              (3,5)                3,5

this is 3               Let t=3              this=: 3   this=3

that is 5               Let u=5              that=: 5   that=5

this plus that          t+u                  this+that this+that

(is) this equalto that  t=u                  this=that this==that</font></pre>
<p><b>A PROGRAM FOR MATHEMATICAL NOTATION</b>
We cannot expect our mathematical notation to be 
as accessible as our native 
language. In particular, it can never enjoy the 
ever-present opportunity to 
experiment and to provide immediate and gratifying 
results that is enjoyed by our 
native language, at least not for very young children. 
<p>However, we might make 
mathematical notation more accessible by:
<p>* Complementing existing notation by notation possessing 
a simple and uniform 
grammar and using only familiar and readily available symbols.
<p>* Making this complementary notation executable on a 
computer, so that a 
student might easily obtain gratifying results that 
encourage exploration.
<p>* Providing material to guide exploration in a 
restrained manner that does not 
stifle the thrill of independent discovery.
<p><b>EXPLORATION</b>
We now present examples of using the computer 
in exploring a few functions and 
operators, as well as in exploring the grammar 
of the notation used. We invite 
mathematicians to ponder the question of how 
they might be presented in 
conventional notation.
<p><b>Exp 1</b>  From the functions: <code>+ - * ^ ! +. *. ^. &lt; = &gt; &gt;:</code> 
select a 
few for exploration by entering expressions such as:<pre>
   16 + 36           
52 
   16 +. 36
4</pre>
<p>Observe the results and attempt to identify 
and name the functions used; but do not 
spend too much time, since the next exploration 
provides better tools.
<p><b>Exp 2</b>  Enter <code>x=:  0 1 2 3 4 5</code> and
 <code>y=:  x</code> and <code>x +/ y</code> to produce an 
addition table. Then enter expressions for further 
tables to identify each of the 
functions listed in Exp 1. Which of the functions 
appear to be commutative?
<p><b>Exp 3</b> Define and experiment with functions 
such as <code>f=: +/*-/</code> and 
<code>g=: &lt;/+.=/</code>
<p><b>Exp 4</b>  Repeat explorations 2 and 3 using the 
following symmetric lists, and 
comment on any interesting characteristics 
of the resulting tables:<pre>
   ]y=: x=:  0 1 2 3 4 5 6 - 3
_3 _2 _1 0 1 2 3</pre>
<b>Exp 5</b> Evaluate the familiar sum over (denoted by capital
Greek sigma) <code>c<sub>i</sub>x<sup>i</sup></code> 
at <code>x=0</code>, 
assuming that (as is often stated) zero to the 
power zero is undefined. 
<p><b>Exp 6</b> Use the results of the following 
expressions (and similar experiments) to 
state in English (and in conventional math notation) 
the relations among the tables 
generated:<pre>
   2 3 5 7;11 13
   x (-/ ; -~/) y
   x (&lt;/ ; =/ ; g ; &lt;:/) y</pre>
<p><b>Exp 7</b>  Enter expressions of the following forms, 
and then describe in English (and 
in mathematical notation) the effects of <code>~</code> , 
and state what part of speech it is in J:<pre>
   x (-/ ; -~/) y
   x (!/ ; !~/) y
   x (*./ ; *.~/) y</pre>
<p><b>Exp 8</b> Examine the production of tables of Stirling 
numbers by the expression<pre>
   S1=:  %.S2=:  |: (^/%.^!._1/)~ i.10r1
   
(%. N is matrix inverse, and M %. N is “matrix divide”)</pre>
<p><b>Exp 9</b> To explore the rhematic (word-formation) rules 
of J, enter expressions 
such as:
   <code>;: 'TABLE=:  x (*./ ; *.~/) y'</code>
<p><b>Exp 10</b> Enter the expressions <code>trace=:  13 !: 16</code> 
and <code>9 trace 1</code> to 
invoke the tracing of subsequent expressions, that 
is, to show their detailed 
parsing and execution. Then enter <code>TABLE=:  x (*./ ; *.~/) y</code> 
and other expressions from earlier explorations. 

<p>Tracing may be switched off by 
entering <code>9 trace 0</code> .
<p>The parsing table from Section C illuminates 
the annotations provided by the trace.
<p><b>Exp 11</b> For further simple explorations use 
Exercises from Chapter 1 of Iverson 
[16]. 
<p><b>SUMMARY</b>
In this section we have attempted to:
<p>* Use the strict grammar and precise 
interpretation of programming languages to 
illuminate some of the vagaries of a mathematical 
notation that has, as De 
Morgan said, “...grown up without much looking to, 
at the dictates of 
convenience ...” 
<p>* Indicate the potentially benign effects on the 
learnability of mathematical 
notation that can be provided by simple uniform 
notation combined with the 
opportunity for precise and independent exploration 
using computers.
<p>* Sketch the possibilities of adopting some 
complementary and non-conflicting 
notation executable on  computers.  


<a name="11: Proofs"></a>
<h3><div align="center"><a href="#MATH">11: Proofs</a></div></h3>
<a href="#11A.">11A. Introduction<p>                                                                       
<a href="#11B.">11B. Informal proofs<p>                                                                    
<a href="#11C.">11C. Formal proofs<p>                                                                      
<a href="#11D.">11D. Inductive proofs<p>                                                                   
<a href="#11E.">11E. Recursive definition<p>                                                               
<a href="#11F.">11F. Guessing games<p>    

<h3><a name="11A."></a><a href="#11: Proofs">11A. Introduction</a>
<a href="#S11A."><font size="-1">S11A.</font></a></h3>
<p>Although proofs are an important (and many 
might say <i>the essential</i>) part of 
mathematics, we will spend little time on them in this book. 
<p>In introducing his book <i>Proofs and 
Refutations: The Logic of Mathematical 
Discovery</i> [17], Imre Lakatos makes the following point:
<blockquote><font size="-1">Its modest aim is to elaborate the 
point that informal, quasi-empirical, 
mathematics does not grow through a 
monotonous increase of the number of 
indubitably established theorems but 
through the incessant improvement of 
<i>guesses</i> [Italics added] by speculation 
and criticism, by the logic of proofs and 
refutations.
<p>The main point of the present book is to 
exploit new tools for the exploration of 
relations and patterns, that can be used 
by both mathematicians and laymen to find 
those guesses that are amenable to, and 
worthy of, proof.</blockquote></font><p> We recommend the 
reading of Lakatos at any point: his book 
is highly entertaining, instructive, and 
readable by any layman with the patience 
to look up the meanings of a small 
number of words such as polyhedron, polygon, and convex.
The following quotes from Lakatos reflect 
his view of the importance of guessing:<p><blockquote><font size="-1">
Just send me the theorems, then I shall find the proofs.
							<b>Chrysippus</b>
<p>I have had my results for a long time, 
but I do not yet know how I am to arrive at 
them.
							<b>Gauss</b>
<p>If only I had the theorems! Then I should 
find the proofs easily enough.
							<b>Riemann</b>
<p>I hope that now all of you see that proofs, 
even though they may not prove, certainly 
do help to <i>im</i>prove our conjecture.
							<b>Lakatos</b>
<p>On the other hand those who, because 
of the usual deductive presentation of 
mathematics, come to believe that the 
path of discovery is from axioms and/or 
definitions to proofs and theorems, may completely forget about the possibility and 
importance of naive guessing.
							<b>Lakatos</b></blockquote></font>
<p>We cite two further comments on 
the effects of excessive formalism in the 
teaching of mathematics: <blockquote><font size="-1">
<p>Plato’s exaltation of mathematics as 
an august and mysterious ritual had its roots in 
dark superstitions which troubled, and 
fanciful puerilities which entranced, people 
who were living through the childhood of 
civilization, when even the cleverest people 
could not clearly distinguish the difference 
between saying that 13 is a ‘prime’ 
number and saying that 13 is an unlucky 
number. <p>His influence on education has 
spread a veil of mystery over mathematics 
and helped to preserve the queer 
freemasonry of the Pythagorean brotherhoods, 
whose members were put to death for 
revealing secrets now printed in school books. 
<p>It reflects no discredit on anyone if this 
veil of mystery makes the subject distasteful. 
Plato’s great achievement was to invent a 
religion which satisfies the emotional needs 
of people who are out of harmony with 
their social environment, and just too 
intelligent or too individualistic to seek 
sanctuary in the cruder forms of animism.
                                   <b>Hogben</b>
<p>… the author has the notion that mathematical 
formulas have their “secret life,” 
behind their Golem-like appearance. To bring 
out the “secret life” of mathematical 
relations by an occasional narrative digression 
does not appear to him a profanation of 
the sacred rituals of formal analysis but 
merely an attempt to a more integrated way of 
understanding The reader who has to struggle 
through a maze of “lemmas,” 
“corollaries,” and “theorems,” can easily 
get lost in formalistic details, to the 
detriment of the essential elements of 
the results obtained. <p>By keeping his mind on the 
principal points he gains in depth, 
although he may lose in details. The loss is not 
serious, however, since any reader 
equipped with the elementary tools of  algebra and 
calculus can easily interpolate the 
missing details. <p>It is a well-known 
experience that 
the only truly enjoyable and profitable 
way of studying mathematics is the method of 
“filling in details” by one’s own efforts.
                                  <b>Lanczos[18]</b>
								  </font></blockquote>
								  
<p>However, it is important to remember 
that in addition to the mathematics that is 
important to the intelligent layman, 
there is another mathematics, as expressed  by 
G.H. Hardy in his A Mathematician’s Apology  [19]:<blockquote><font size="-1">  
There are then two mathematics. There is 
the real mathematics of the real 
mathematicians, and there is what I will 
call ‘trivial’ mathematics, for want of a better 
word. The trivial mathematics may be 
justified by arguments which would appeal to 
Hogben, or other writers of his school,  
but there is no such defence for the real 
mathematics, which must be justified as 
an art if it can be justified at all. There is 
nothing in the least paradoxical or unusual 
in this view, which is that held commonly 
by mathematicians.</font></blockquote>



<h3><a name="11B."></a><a href="#11: Proofs">11B. Informal proofs</a>
<a href="#S11B."><font size="-1">S11B.</font></a></h3>
We will illustrate a proof by first guessing 
at a relation, using the function <code>odd</code> 
from Section 2E:<pre>
   odd=: 1:+2:*i.
   odd 6
1 3 5 7 9 11
   +/odd 6
36
   (+/ odd 1),(+/odd 2),(+/odd 3),(+/odd 4),(+/odd 5)
1 4 9 16 25</pre>
It appears that the sum of the first <code>n</code> odd integers 
is <code>n*n</code>, a relation we will 
demonstrate by using a few facts illustrated by the following:<pre>
   |. odd 6
11 9 7 5 3 1
   (+/odd 6),(+/|.odd 6)
36 36
   (odd 6)+(|.odd 6)
12 12 12 12 12 12
   6 # 2*6      NB. Six copies of twice six 
12 12 12 12 12 12
   half=: % with 2
   half 6 # 2*6
6 6 6 6 6 6
   +/half 6 # 2*6
36
   +/6#6
36
   6*6 
36</pre>
We now write a sequence of (obviously?) equivalent  sentences:<pre>
   n=: 6
   +/odd n
36
   +/|.odd n
36
   half (+/odd n)+(+/|.odd n)
36
   half +/(odd n)+(|.odd n)
36
   half +/6 # 2*6
36
   +/6 # 6
36
   n*n
36</pre>
Because a value (<code>6</code>) was assigned to the 
argument <code>n</code>, each of the foregoing 
sentences were executable, and were 
executed to give results whose equality 
provided some assurance that an error 
had not been made. We will, however, write 
an informal proof  as a similar sequence, 
omitting the results that would have been 
produced by their execution. Thus:<pre>
   +/odd n
   +/|.odd n
   half (+/odd n)+(+/|.odd n)
   half +/(odd n)+(|.odd n)
   half +/6 # 2*6
   +/6 # 6
   n*n</pre>
   
   
   
<h3><a name="11C."></a><a href="#11: Proofs">11C. Formal proofs</a>
<a href="#S11C."><font size="-1">S11C.</font></a></h3>
In a formal proof it is necessary to state 
clearly the justification for each 
equivalence, that is, the reason why each 
statement is believed to be equivalent to 
the one that precedes it. For example, we 
will begin to convert the foregoing 
informal proof to a formal proof as follows:<pre>
   +/odd n
   +/|.odd n
   half (+/odd n)+(+/|.odd n)
   half +/(odd n)+(|.odd n)
   half +/6 # 2*6    
   +/6 # 6     NB. Half of sum is sum of halves
   n*n         NB. Def of multiplication (in 1G)</pre>
A stickler for logic might ask why he 
should believe that half of a sum equals the 
sum of the halves of the list summed. 
A convincing answer is not as easy as might 
be supposed, leading to an appreciation 
of the following statement from Lakatos:<blockquote><font size="-1">
 TEACHER: This decomposition of the 
 conjecture suggested by the proof 
opens new vistas for testing. The 
decomposition deploys the conjecture on 
a wider front, so that our criticism has more targets.
</font></blockquote> 
<P>What about other steps, such as the 
equivalence of <code>+/odd n</code> and <code>+/|.odd n</code>? 
It may seem obvious, but what is special 
about <code>+/</code> that would not apply for 
another function such as <code>%/</code> ? A mathematician 
might say (and offer proofs that) 
functions such as <code>+/</code>
 and <code>*/</code> and <code>gcd/</code> and <code>&gt;./</code> are  
<I>symmetric</i>, meaning that 
they give the same result when applied to 
any permutation (re-ordering) of their 
arguments. <p>For the layman it may be best 
to accept informal proofs, but harbor a 
healthy suspicion that obvious ideas are sometimes wrong.
In a further quotation from Lakatos:
<blockquote><font size="-1">
TEACHER: I agree with you that the conjecture 
has received a severe 
criticism by Alpha’s counterexample. 
But it is untrue that the proof has 
"completely misfired". If, for the time 
being, you agree to my earlier 
proposal to use the word ‘proof’ for a 
‘thought experiment’ which leads to 
a decomposition of the original conjecture 
into ‘subconjectures’, instead of 
using it in the sense of a ‘guarantee of 
certain truth’, you need not draw 
this conclusion. <P>… You are interested only in 
proofs which ‘prove’ what 
they have set out to prove. I am interested 
in proofs even if they do not 
accomplish their intended task. Columbus 
did not reach India but he 
discovered something quite interesting.</font></blockquote>
<p><b><div align="center">Exercises</div></b><ol><p><li>
 Determine and test an expression 
equivalent to <code>+/even n</code>, and write an informal proof of 
the equivalence.
<p><li> Repeat Exercise 1 for <code>+/i.n</code>
<p><li> Examine and discuss the Taylor series <code>+/ 
on i. t. i. 4</code></ol>



<h3><a name="11D."></a><a href="#11: Proofs">11D. Inductive proofs</a>
<a href="#S11D."><font size="-1">S11D.</font></a></h3>
<p>Suppose that by assuming that <code>+/ on odd n</code>
were equal to <code>n*n</code> for a certain 
value of <code>n</code>, we were able to use this 
assumption to prove that <code>+/ on odd n+1</code> 
must therefore equal <code>(n+1)*(n+1)</code>, we 
could then conclude that equality must 
hold for all succeeding values, <code>n+2</code> 
and <code>n+3</code>, and so on.  
<p>If, independently of this assumption, we are able 
to show further that equality does 
hold for some specific value (such as <code>n=: 0</code>), 
we may further conclude that the 
relation is true for all integers greater 
than or equal to that value. For example:<pre>
+/ on odd n+1

(+/odd n)+(2*n)+1   NB. From definition of odd

(n*n)+(2*n)+1       NB. Assumed "induction hypothesis"

(n+1)*(n+1)         NB. Simple algebra</pre>



<h3><a name="11E."></a><a href="#11: Proofs">11E. Recursive definition</a>
<a href="#S11E."><font size="-1">S11E.</font></a></h3>    
A function that is defined in terms of 
itself is said to be recursively defined. For 
example, a factorial function <code>fac</code> might 
be defined by saying that <code>fac n</code> is
<code>n * fac n-1</code>. However, it is necessary to 
further define its value for some 
specific argument; for example, to 
define <code>fac 0</code> as <code>1</code>. 
<p>A recursive definition therefore depends 
upon three functions, such as
<code>]*fac on &lt;:</code> to perform the recursion, 
the constant function <code>1:</code> for the 
specific argument <code>0</code>, and the “conditional 
function” <code>= with 0</code> to choose 
between  them. Thus:<pre>
   fac=:  (]*fac  on  &lt;:) ` 1:  @. (= with 0)
   fac 0
1
   fac 4
24
   !4
24</pre>
In the foregoing, the tie operator <code>`</code> forms 
a gerund from the two functions to 
which it is applied, and the agenda 
operator <code>@.</code>selects one of them according to the 
result of the conditional function <code>= with 0</code>.
<p>A recursively defined function provides 
a convenient base for an hypothesis for use 
in an inductive proof. For example a 
function <code>sodd</code> for the sum of the odd 
integers might be recursively defined as follows:<pre>
   sodd=: (sodd on &lt;: + 2 with * - 1:)`0: @. (= with 0)
  (sodd 0),(sodd 1),(sodd 2),(sodd 3),(sodd 4)
0 1 4 9 16</pre>
The first and “main” function of the three 
used in this recursive definition may be 
interpreted as follows: <code>sodd n</code> is equal to 
<code>(sodd n-1) + (2*n) – 1</code> or, 
equivalently, that  <code>sodd n+1</code> 
equals <code>(sodd n) + (2*n+1) – 1</code>. 
<p>We will 
use this last relation in an 
inductive proof that the sum of the first <code>n</code> odd numbers 
is <code>n*n</code>, using the inductive hypothesis 
of Section D as follows:<pre>
   sodd n+1
   (sodd n) + (2*n+1) – 1  NB. Recursive def of sodd
   (n*n) + (2*n+1) – 1     NB. Induction hypothesis
   (n+1)*(n+1)             NB. Simple algebra</pre>
<p><b><div align="center">Exercises</div></b><ol>
<p><li> Make recursive definitions for functions 
such as the sum of even integers and the sum of all 
integers. Then write proofs of the appropriate identities.
<p><li> Test and prove the equality suggested by 
the following expressions for the sum of squares:<pre>
   n=: 6
   d=:  0 1r6 _1r2 1r3
   +/*:i.n
55
   d p. n
55</pre></ol>



<h3><a name="11F."></a><a href="#11: Proofs">11F. Guessing games</a>
<a href="#S11F."><font size="-1">S11F.</font></a></h3>               
<p>The quotes from Lakatos in Section 11A 
emphasize the importance of guessing at 
relationships, and the use of proofs 
to test and refine the resulting conjectures. We 
will now discuss techniques for guessing, 
emphasizing the use of the computer. 
However, games are seductive; the reader 
should perhaps limit the time spent on 
this section, but plan to return to it again and again.
<p><b>EACHBOX and BOX</b>
The list function <code>i.</code> applies to an argument 
such as <code>3 4</code> to produce a table, but 
we may also wish to apply it to each of the 
arguments <code>3</code> and <code>4</code> to produce separate 
lists. Thus:<pre>
   a=: 3 4
   i. a
0 1  2  3
4 5  6  7
8 9 10 11
   i.3
0 1 2
   i.4
0 1 2 3
   eachbox=: &amp;.&gt;
   i. eachbox a
+-----+-------+
|0 1 2|0 1 2 3|
+-----+-------+
</pre>

<b>PREFIX</b>
In summing the list <code>2 7 1 8</code>, we may also wish 
to obtain the “subtotals” or 
“partial sums” by applying sumation over each 
prefix of the list. Thus:<pre>
   pref=: \
   sum=: +/
   a=: 2 7 1 8
   sum a
18
   sum pref a
2 9 10 18
   */pref a
2 14 14 112
   &lt;./pref a
2 2 1 1
   &gt;./pref a
2 7 7 8</pre><p>
<b>DIAGONAL</b>
It is sometimes necessary to apply a function 
to each diagonal of a table. For 
example:<pre>
   diag=: /.
   c=: 1 2 1
   d=: 1 3 3 1
   t=: c */d
   t
1 3 3 1
2 6 6 2
1 3 3 1
   sum diag t
1 5 10 10 5 1
</pre><p>
<b>DIFFERENCES</b>
If <code>f</code> is a function and <code>g</code> is a guess at 
an equivalent function, then <code>f-g</code> gives the 
needed correction. For example:<pre>
   x=: 0 1 2 3 4 5 6 7r1
   
   each=:"0
   
   f=: +/ on i. each    NB. Sums of integers
   f x
0 0 1 3 6 10 15 21
   g=: (^ with 2 % 2:) each 
   g x
0 1r2 2 9r2 8 25r2 18 49r2
   (f-g) x
0 _1r2 _1 _3r2 _2 _5r2 _3 _7r2

   corr=: (- % 2:) each 
   corr x
0 _1r2 _1 _3r2 _2 _5r2 _3 _7r2

   gc=: g+corr          NB. Corrected guess
   (f=gc) x
1 1 1 1 1 1 1 1</pre>
<b>RATIOS</b>
The ratio <code>f%g</code> may sometimes provide a better 
guide to correction. Consider, for 
example, the following sums of powers:<pre>
   f1=: +/ on (^&amp;1) on i. each
   f2=: +/ on (^&amp;2) on i. each
   f3=: +/ on (^&amp;3) on i. each
   f4=: +/ on (^&amp;4) on i. each
   f5=: +/ on (^&amp;5) on i. each
   (f1,f2,f3,f4,:f5) x
0 0 1  3   6   10   15    21
0 0 1  5  14   30   55    91
0 0 1  9  36  100  225   441
0 0 1 17  98  354  979  2275
0 0 1 33 276 1300 4425 12201</pre>
For <code>f1</code> the equivalent function <code>g1</code> is, 
of course, the function <code>gc</code> derived above, 
and we will use the ratio <code>f3%g1</code> to look 
for a definition of a function <code>g3</code> 
corresponding to <code>f3</code>. Thus:<pre>
   g1=: gc
   (f3%g1) x
0 0 1 3 6 10 15 21
   g1 x
0 0 1 3 6 10 15 21</pre>
It therefore appears that <code>g3</code> may be 
expressed as the product of <code>g1</code> with itself:<pre>
   g3=: g1*g1
   (f3=g3) x
1 1 1 1 1 1 1 1</pre>
<b>TAYLOR COEFFICIENTS</b>
For functions such as <code>g1</code> and <code>g3</code> that 
are expressed directly in terms of powers, 
quotients, products, and sums, the Taylor 
operator may be applied to give the 
coefficients of an equivalent polynomial. For example:<pre>
   x=: 0 1 2 3 4 5 6 7r1
   c1=: g1 t. x
   c1
0 _1r2 1r2 0 0 0 0 0
   c1&amp;p. x
0 0 1 3 6 10 15 21
   f1 x
0 0 1 3 6 10 15 21
   c3=: g3 t. x
   c3
0 0 1r4 _1r2 1r4 0 0 0
   (f3=c3&amp;p.) x
1 1 1 1 1 1 1 1</pre>
<b>POLYNOMIAL APPROXIMATIONS</b>
The Taylor operator does not apply to 
functions such as the square root, and we 
use instead an expression that gives 
coefficients that approximate the function. 
Thus:<pre>
   f=: %:
   f x
0 1 1.4142 1.7321 2 2.2361 2.4495 2.6458
   (f x)*(f x)  NB. To verify that f is square root 
0 1 2 3 4 5 6 7
   c=: (f x) %. (x ^/ i.#x)
   c p. x
0 1 1.4142 1.7321 2 2.2361 2.4495 2.6458</pre>
It may be noted that the polynomial appeared 
to give not just an approximation, 
but the exact result. However, the result 
may be far from correct for arguments 
other than the <code>x</code> used in computing the 
coefficients, especially so for arguments 
outside the range of the elements of <code>x</code>.
For example:<pre>
   c p. x+1r2
0.64666 1.2301 1.5796 1.8717 2.1204 2.3468 2.5436 2.8157
   f x+1r2
0.70711 1.2247 1.5811 1.8708 2.1213 2.3452 2.5495 2.7386
   c p. 9
5.9577
   f 9
3</pre>



<a name="12: Anagrams and Permutations"></a>
<h3><div align="center"><a href="#MATH">12: Anagrams and Permutations</a></div></h3>
<a href="#12A.">12A. Anagrams<p>                                                                           


<h3><a name="12A."></a><a href="#12: Anagrams and Permutations">12A. Anagrams</a>
<a href="#S12A."><font size="-1">S12A.</font></a></h3> 
Although we have discussed the importance 
of relations and analysis (proofs) in 
math, our exclusive use of numeric arguments 
has probably given the impression 
that math is exclusively about numbers. 
To redress the balance, we will now treat 
some relations concerning English words, 
beginning with sorting and anagrams.
<p>The letters in a word can be sorted into 
alphabetical order by using the function <code>
sort=: /:~</code> (which applies equally to numeric arguments). 
For example:<pre>
   sort=: /:~
   w0=: 'REVEL'
   sort w0
EELRV
   w1=: 'LEVER'
   sort w1
EELRV
   w0=w1
0 1 1 1 0
   (sort w0)=(sort w1)
1 1 1 1 1</pre>
As shown in the last results the words are not equal, 
but they are similar, in the 
sense that they are anagrams, or permutations of 
one another, containing the same 
letters but in a different order. Although 
it is not an English word, we will also call 
the word <code>'EELVR'</code> an anagram.
<p><b><div align="center">Exercises</div></b><ol><p><li>
 Make a table of all anagrams of 
the word <code>w2=: 'AH'</code> (including itself).
<p><li> Repeat Exercise 1 for the word <code>w3=: 'ART'</code> .
<p><li> Repeat Exercise 1 for the word <code>w4a=: 'SPOT'</code> .
<p><li> Repeat Exercise 1 for the word <code>w4b=: 'ABCD'</code> .
To check your work, use the anagram function <code>A.</code> as 
illustrated below:<pre>
   0 A. w2=: 'AH'
AH
   1 A. w2
HA
   0 1 A. w2
AH
HA
   0 1 2 3 4 5 A. w3=: 'ART'
ART
ATR
RAT
RTA
TAR
TRA
   6 A. w3
|index error
|   6     A.w3</pre></ol>
<p>The last result indicates that there 
are only six anagrams of the three-letter word, 
with the indices <code>i.6</code>. Similar tests 
will show that there are twenty-four anagrams 
of four-letter words, leading to the following tables:<pre>
   (i.24) A. w4a=: 'SPOT'
SPOT
SPTO
SOPT
SOTP
STPO
STOP
PSOT
PSTO
POST
POTS
PTSO
PTOS
OSPT
OSTP
OPST
OPTS
OTSP
OTPS
TSPO
TSOP
TPSO
TPOS
TOSP
TOPS

   trans=: |:   NB. Function to transpose a table
   trans (i.24) A. w4a=: 'SPOT'
SSSSSSPPPPPPOOOOOOTTTTTT
PPOOTTSSOOTTSSPPTTSSPPOO
OTPTPOOTSTSOPTSTSPPOSOSP
TOTPOPTOTSOSTPTSPSOPOSPS

   trans (i.24) A. w4b=: 'ABCD'
AAAAAABBBBBBCCCCCCDDDDDD
BBCCDDAACCDDAABBDDAABBCC
CDBDBCCDADACBDADABBCACAB
DCDBCBDCDACADBDABACBCABA

   trans (i.24) A. i.4
0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3
1 1 2 2 3 3 0 0 2 2 3 3 0 0 1 1 3 3 0 0 1 1 2 2
2 3 1 3 1 2 2 3 0 3 0 2 1 3 0 3 0 1 1 2 0 2 0 1
3 2 3 1 2 1 3 2 3 0 2 0 3 1 3 0 1 0 2 1 2 0 1 0

   (trans (i.24) A. i.4) { 'arst'
aaaaaarrrrrrsssssstttttt
rrssttaassttaarrttaarrss
strtrsstatasrtatarrsasar
tstrsrtstasatrtarasrsara

   trans (i.24) A. 'arst'
aaaaaarrrrrrsssssstttttt
rrssttaassttaarrttaarrss
strtrsstatasrtatarrsasar
tstrsrtstasatrtarasrsara</pre>
<p>The last results illustrate that anagrams 
of lists of numbers may be made, and that 
if these lists are indices (such as <code>i.4</code>) they 
may be used to index a word to 
produce its anagrams.
<p><b><div align="center">Exercises</div></b><ol><p><li>
 Experiment with the function 
<code>anag=: trans on (i. on !  on # A. ])</code> on 
various lists of numbers and letters.</ol>
<p>In making tables of anagrams by hand 
as required in the first list of Exercises, it 
was probably easy to do the first two 
by simply jotting down the anagrams 
unsystematically. However, for larger 
tables it becomes difficult to avoid 
repetitions and to ensure that the table 
is complete, especially if one does not know 
how many there are in all.
<p>The number of anagrams of an <code>n</code>-letter 
word can be obtained by a simple 
argument: the leading letter can be 
chosen in <code>n</code> ways, so that 
the total is <code>n</code> times 
the number of anagrams of an (<code>n-1</code>)-letter 
word, 
leading to the product <code>n</code> times <code>n-1</code>  
times <code>n-2</code>, etc. -- in other 
words, <code>!n</code>. Thus:<pre>
   #w4a
4
   !#w4a
24</pre>
<p>A comparison of Exercises 3 and 4 indicates 
that it is easier to write the table for a 
word whose letters are in some systematic order, 
preferably alphabetic. The result 
of <code>(i.24) A. 'ABCD'</code> suggests a systematic 
approach: choose the first letter 
of the word as the initial letter, and 
append to it the table for the remaining letters 
organized by the same principle; then 
choose the second letter as the initial, and so 
on.   
<p><b><div align="center">Exercises</div></b><ol>
<p><li> Enter <code>i.4 3 2</code> and <code>(i.4 3 2) A. 'ABCD'</code> 
and <code>&lt;"2(i.4 3 2) A. 'ABCD'</code> . Study the 
results, and try similar expressions for 
shorter and longer words.</ol>   
<p>If <code>p</code> is any one of the six permutations 
of <code>0 1 2</code>, then <code>3,p</code> is a permutation of 
order four. However, if <code>p</code> is prefixed by 
any of the other possible beginnings of a 
permutation of order four (<code>2</code> or 
<code>1</code> or <code>0</code>) 
the result is not a permutation, but it can 
be made so by incrementing each element 
of <code>p</code> that is greater than or equal to the 
prefix. Thus:<pre>
   P=: (i.6) A. 0 1 2
   
P;(3,.P);(P>:2);(P+P>:2);(2,.P+P>:2);(1,.P+P>:1);(0,.P+P>:0)
+-----+-------+-----+-----+-------+-------+-------+
|0 1 2|3 0 1 2|0 0 1|0 1 3|2 0 1 3|1 0 2 3|0 1 2 3|
|0 2 1|3 0 2 1|0 1 0|0 3 1|2 0 3 1|1 0 3 2|0 1 3 2|
|1 0 2|3 1 0 2|0 0 1|1 0 3|2 1 0 3|1 2 0 3|0 2 1 3|
|1 2 0|3 1 2 0|0 1 0|1 3 0|2 1 3 0|1 2 3 0|0 2 3 1|
|2 0 1|3 2 0 1|1 0 0|3 0 1|2 3 0 1|1 3 0 2|0 3 1 2|
|2 1 0|3 2 1 0|1 0 0|3 1 0|2 3 1 0|1 3 2 0|0 3 2 1|
+-----+-------+-----+-----+-------+-------+-------+</pre>
<p>This suggests a method for making permutations 
of the next higher order: replicate 
and modify the table of permutations of 
order <code>n</code>, and prefix each by an element of 
<code>i.n+1</code>. The scheme can also be used as 
the basis for a recursive definition of a 
function for making tables of permutations.



<a name="13: Logic and Sets"></a>
<h3><a href="#MATH"><div align="center">13: Logic and Sets</div></a></h3>
<a href="#13A.">13A. Introduction<p>                                                                       
<a href="#13B.">13B. Or, and, and not<p>                                                                   
<a href="#13C.">13C. Lists and sets<p>                                                                     
<a href="#13D.">13D. Classification<p>

<h3><a name="13A."></a><a href="#13: Logic and Sets">13A. Introduction</a>
<a href="#S13A."><font size="-1">S13A.</font></a></h3>

<i>Boolean</i> or <i>symbolic</i> logic concerns propositions, 
a proposition being simply a 
function that produces one of only two 
possible results. These two results are 
commonly referred to as true and false, 
and (following George Boole, the father of 
symbolic logic) will be denoted by the 
numbers <code>1</code> and <code>0</code>. For example:<pre>
   f1=: &lt;&amp;0
   f2=: &gt;&amp;0
   x=: i:3
   x
_3 _2 _1 0 1 2 3
   f1 x
1 1 1 0 0 0 0
   f2 x
0 0 0 0 1 1 1</pre>
The proposition <code>f1</code> is true (that is, gives the 
result <code>1</code>) 
for any negative number, 
and is said to define the set of negative 
numbers; <code>f2</code> defines the set of positive 
numbers.
<p>The list of positive numbers that occur 
in a list <code>y</code> may be obtained by using the 
result <code>f2 y</code> to copy from <code>y</code> each element 
of <code>y</code> for which <code>f2 y</code> is true. For 
example:<pre>
   y=: 3 1 4 1 5 9 - 3
   y
0 _2 1 _2 2 6
   f2 y
0 0 1 0 1 1
   (f2 y) # y
1 2 6</pre> 



<h3><a name="13B."></a><a href="#13: Logic and Sets">13B. Or, and, and not</a>
<a href="#S13B."><font size="-1">S13B.</font></a></h3>
The function <code>or=: +.</code> may be applied to two 
propositions to yield a proposition 
that is true if either of the propositions is true. For example:<pre>
   or=: +.
   g=: f1 or f2
   g x
1 1 1 0 1 1 1</pre>
Similarly for <code>and=: *.</code>, the proposition 
proposition <code>h=: f1 and f2</code> is true 
only if both <code>f1</code> and <code>f2</code> are true. Since 
a number cannot be both positive and 
negative, <code>h</code> can never be true, and is 
said to define an empty set. Thus:  <pre>
   and=: *.
   h=: f1 and f2
   h x
0 0 0 0 0 0 0
   (h x) # x

   (g x) # x
_3 _2 _1 1 2 3</pre>
The (monadic) function <code>not=: -.</code> negates a 
boolean result. For example: <pre>
  not=: -.
  (f1,.(not on f1),.g,.(not on g),.h,.(not on h)) x
1 0 1 0 0 1
1 0 1 0 0 1
1 0 1 0 0 1
0 1 0 1 0 1
0 1 1 0 0 1
0 1 1 0 0 1
0 1 1 0 0 1</pre>



<h3><a name="13C."></a><a href="#13: Logic and Sets">13C. Lists and sets</a>
<a href="#S13C."><font size="-1">S13C.</font></a></h3>
The set of English vowels is defined by the 
proposition <code>vow</code>, developed as 
follows:<pre>
   s=: 'do you love me'
   'aeiou' =/ s
0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 1 0 0 1
0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 1 0 0 1 0 0 0 1 0 0 0 0 0
0 0 0 0 0 1 0 0 0 0 0 0 0 0
   or/'aeiou' =/ s
0 1 0 0 1 1 0 0 1 0 1 0 0 1

   vow=: or/ on ('aeiou'&amp;(=/)) 
   vow s
0 1 0 0 1 1 0 0 1 0 1 0 0 1
   (vow s)#s
oouoee
   (not vow s)#s
d y lv m

   alphabet=: 'abcdefghijklmnopqrstuvwxyz '
   (vow alphabet)#alphabet
aeiou</pre>
It is important to understand that the 
set of English vowels is defined by the 
function <code>vow</code>, <i>not</i> by 
the list <code>'aeiou'</code> 
(nor by the same list that resulted from 
applying the function to the universe 
of the entire alphabet). 
<p>Otherwise one might 
confuse the question of the ordering of 
the defining list <code>'aeiou'</code> or repetitions 
of its elements (neither of which affect 
the definition of the function) with the 
question of whether a set is ordered (which it is not). 



<h3><a name="13D."></a><a href="#13: Logic and Sets">13D. Classification</a>
<a href="#S13D."><font size="-1">S13D.</font></a></h3>
A single proposition can be used to classify 
its arguments according to whether they 
belong to the set it defines,  and several 
propositions can be used to provide 
several classifications. Consider, for 
example, a list of transactions that are 
recorded as a list of account numbers 
(<code>an</code>) and a 
corresponding list of credits (<code>cr</code>) 
to the accounts, as well as the list of 
all possible account numbers (<code>all</code>). Thus:<pre>
   an=: 1010 1040 1030 1030 1060 1010 1040 1040 1050
   cr=:  131  755  458  532  218   47  678  679  934
   all=: 1010 1020 1030 1040 1050 1060
   c=: all =/ an
   c
1 0 0 0 0 1 0 0 0
0 0 0 0 0 0 0 0 0
0 0 1 1 0 0 0 0 0
0 1 0 0 0 0 1 1 0
0 0 0 0 0 0 0 0 1
0 0 0 0 1 0 0 0 0
   eachrow=: "1
   cr +/ on * eachrow c
178 0 990 2112 934 218</pre>



<a name="14: Properties of Functions"></a>
<h3><div align="center"><a href="#MATH">14: Properties of Functions</a></div></h3> 


<a href="#14A.">14A. Introduction<p>                                                                       
<a href="#14B.">14B. Commutativity<p>                                                                      
<a href="#14C.">14C. Associativity<p>                                                                      
<a href="#14D.">14D. Symmetry<p>                                                                           
<a href="#14E.">14E. Distributivity<p>                                                                     
<a href="#14F.">14F. Distributivity of dyadic functions<p>                                                 
<a href="#14G.">14G. Parity<p>          
                                                                   
<h3><a name="14A."></a><a href="#14: Properties of Functions">14A. Introduction</a>
<a href="#S14A."><font size="-1">S14A.</font></a></h3>
A pair of expressions (such as <code>x*y</code> and <code>y*x</code>) 
that give identical results for all 
possible values of the arguments are said to 
form an identity. Identities are 
important because they allow a function to 
be expressed in different ways, each of 
which may possess particular advantages, 
such as ease of evaluation or insight 
into the behaviour of the function.
<p>For example, Section 11C showed 
that <code>+/ odd n</code> (the sum of the first <code>n</code> odd 
numbers) is identical to the more 
easily computed product <code>n*n</code>. Similarly, the sum 
of the squares of the first <code>n</code> positive 
integers (<code>+/(1+i.n)^2</code>) is identical to the 
polynomial <code>0 1r6 1r2 1r3 p. n</code>.
<p>Certain important identities are expressed 
as general properties of functions, 
referred to as <i>commutativity</i>, <i>associativity</i>, 
<i>symmetry</i>, <i>distributivity</i>, and <i>parity</i>.



<h3><a name="14B."></a><a href="#14: Properties of Functions">14B. Commutativity</a>
<a href="#S14B."><font size="-1">S14B.</font></a></h3>
The commute operator <code>~</code> interchanges the 
arguments of the function to which it is 
applied. For example:<pre>
   3 -~ 5
2
   5 – 3
2
   from=: -~
   3 from 5
2
   into=: %~
   5 into 3
0.6</pre>
If <code>f~</code> is identical to <code>f</code>, 
then the function <code>f</code> is said to be commutative. 
For example, 
<code>+</code> and <code>*</code> are commutative, 
but <code>-</code> and 
<code>%</code> are not.
<p><b><div align="center"></div><div align="center">Exercises</div></b><ol><p><li>
 Test a number of functions for 
commutativity, including <code>&lt;</code>, <code>=</code>, <code>[</code>(left), <code>]</code>,
 <code>&lt;.</code> 
(min), <code>&gt;.</code>, <code>+:</code> 
(greatest common divisor), and <code>*:</code> (least common multiple).
<p><li> Make function tables of the form <code>f table i:4</code>
 for both commutative and non-commutative 
 functions, and observe the symmetry 
of the former.</ol>



<h3><a name="14C."></a><a href="#14: Properties of Functions">14C. Associativity</a>
<a href="#S14C."><font size="-1">S14C.</font></a></h3>
<p>The expressions <code>3-(4-5)</code> and <code>(3-4)-5</code> apply the
 same function to the same 
arguments, but yield different results because 
the parentheses associate them 
differently; subtracting <code>5</code> from <code>4</code> and then 
subtracting the result from <code>3</code> to yield <code>4</code> 
in the first case, and subtracting <code>4</code> from <code>3</code> 
and then subtracting <code>5</code> from the result to 
yield <code> _6</code> in the last.
<p>A function that yields the same result for 
any association imposed by parentheses is 
said to be associative. For example, <code>3+(4+5)</code> 
and <code>(3+4)+5</code> both yield <code>12</code>.
<p><b><div align="center">Exercises</div></b><ol><p><li>
 Test a number of functions for associativity.</ol>
 
 
 
<h3><a name="14D."></a><a href="#14: Properties of Functions">14D. Symmetry</a>
<a href="#S14D."><font size="-1">S14D.</font></a></h3>
<p>A function that applies to any permutation 
of a list to yield the same result is said 
to be symmetric. For example:<pre>
   +/2 3 5 7
17
   +/3 5 2 7
17
   -/2 3 5 7
_3
   -/3 5 2 7
_7</pre>
If <code>f</code> is both associative and commutative, 
then <code>f/</code> is symmetric. For example:<pre>
   all=: (i.!3) A. 2 3 5r1
   all
2 3 5
2 5 3
3 2 5
3 5 2
5 2 3
5 3 2

   lcm=: *.
   eachrow=: "1
   lcm/ eachrow all
30 30 30 30 30 30
   %/ eachrow all
10r3 6r5 15r2 6r5 15r2 10r3</pre>



<h3><a name="14E."></a><a href="#14: Properties of Functions">14E. Distributivity</a>
<a href="#S14E."><font size="-1">S14E.</font></a></h3>
If <code>f(x g y)</code> is equivalent to <code>(f x)g(f y)</code>, 
we say that the (monadic) 
function <code>f</code> distributes over the (dyadic) 
function <code>g</code>. The two parts of this identity 
may also be stated as <code>f on g</code> and <code>(f on [) g (f on ])</code>.
For example, <code>+:</code> (double) and <code>-:</code> (halve) 
each distribute over both addition and 
subtraction, facts that may be tested in the following manner:<pre>
   3 (+:on+) 5
16
   3 (+:on[ + +:on]) 5
16</pre>
The operator <code>over</code> defined below can be 
used in the expression <code>f over g</code> to 
test whether <code>f</code> distributes over <code>g</code>. Thus:<pre>
   over=: 2 : '(u. on v.) = ((u. on [) v. (u. on ]))'each
   (+:over - table ,. -: over + table ,. +: over * table) i:3
+--+----------------+--+----------------+--+----------------+
|  |_3 _2 _1 0 1 2 3|  |_3 _2 _1 0 1 2 3|  |_3 _2 _1 0 1 2 3|
+--+----------------+--+----------------+--+----------------+
|_3| 1  1  1 1 1 1 1|_3| 1  1  1 1 1 1 1|_3| 0  0  0 1 0 0 0|
|_2| 1  1  1 1 1 1 1|_2| 1  1  1 1 1 1 1|_2| 0  0  0 1 0 0 0|
|_1| 1  1  1 1 1 1 1|_1| 1  1  1 1 1 1 1|_1| 0  0  0 1 0 0 0|
| 0| 1  1  1 1 1 1 1| 0| 1  1  1 1 1 1 1| 0| 1  1  1 1 1 1 1|
| 1| 1  1  1 1 1 1 1| 1| 1  1  1 1 1 1 1| 1| 0  0  0 1 0 0 0|
| 2| 1  1  1 1 1 1 1| 2| 1  1  1 1 1 1 1| 2| 0  0  0 1 0 0 0|
| 3| 1  1  1 1 1 1 1| 3| 1  1  1 1 1 1 1| 3| 0  0  0 1 0 0 0|
+--+----------------+--+----------------+--+----------------+</pre>
<p><b><div align="center">Exercises</div></b><ol><p><li>
 Use <code>over</code> to test whether <code>+:</code> distributes 
over <code>gcd</code> and <code>lcm</code>.</ol>
<p>Since double and halve each distribute 
over addition, and since they may be 
expressed as the equivalent 
functions <code>d=: * with 2</code> and <code>h=: % with 2</code> it 
appears that numbers other 
than <code>2</code> would do as well, that is, any multiple or 
fraction function would distribute 
over addition (and subtraction). Thus:<pre>
   (((* with 2.5)over + table),.((% with 4)over + table))i:3
+--+----------------+--+----------------+
|  |_3 _2 _1 0 1 2 3|  |_3 _2 _1 0 1 2 3|
+--+----------------+--+----------------+
|_3| 1  1  1 1 1 1 1|_3| 1  1  1 1 1 1 1|
|_2| 1  1  1 1 1 1 1|_2| 1  1  1 1 1 1 1|
|_1| 1  1  1 1 1 1 1|_1| 1  1  1 1 1 1 1|
| 0| 1  1  1 1 1 1 1| 0| 1  1  1 1 1 1 1|
| 1| 1  1  1 1 1 1 1| 1| 1  1  1 1 1 1 1|
| 2| 1  1  1 1 1 1 1| 2| 1  1  1 1 1 1 1|
| 3| 1  1  1 1 1 1 1| 3| 1  1  1 1 1 1 1|
+--+----------------+--+----------------+
</pre>
Since <code>*</code> is commutative, <code>2.5 with*</code> would 
serve as well as <code>*with 2.5</code> in 
the foregoing, but would <code>4 with%</code> give 
the same result as <code>%with 4</code> ?



<h3><a name="14F."></a><a href="#14: Properties of Functions">14F. Distributivity of dyadic functions</a>
<a href="#S14F."><font size="-1">S14F.</font></a></h3>
Although we have discussed the distribution of 
<i>monadic</i> functions over dyadic 
functions, it is more common in mathematics to 
discuss the distribution of <i>dyadic</i> 
functions over dyadic functions. Thus, 
because <code>a*(b+c)</code> is equivalent to 
<code>(a*b)+(a*c)</code>, it is said that multiplication 
distributes over addition. Similarly 
<code>(a+b)*c</code> is equivalent to <code>(a*c)+(b*c)</code>, and 
again multiplication distributes 
over addition.  
<p>However, <code>(a+b)%c</code> is equivalent to <code>(a%c)+(b%c)</code> 
and we might conclude 
that division also distributes over addition. 
On the other hand, <code>a%(b+c)</code> is not 
equivalent to <code>(a%b)+(a%c)</code>, and it is 
sometimes said that division “distributes 
to the left” over addition.
<p>The situation is more accurately stated 
by saying that the monadic functions
<code>x with *</code> and <code>* with x</code> and <code>% with x</code> 
distribute over addition, but that
<code>x with %</code> does not.
Finally, the idea of a monadic function 
distributing over addition leads to the important notion of 
linear functions, treated in Chapter 15. 



<h3><a name="14G."></a><a href="#14: Properties of Functions">14G. Parity</a>
<a href="#S14G."><font size="-1">S14G.</font></a></h3>
A graph of the square function appears to be reflected
(as in a mirror) in the vertical line through the origin.
This is so because the square of <code>-x</code> equals the 
square of <code>x</code> for every <code>x</code>. Thus:<pre>
   sqr=: ^ with 2
   x=: i:1j10
   x
_1 _0.8 _0.6 _0.4 _0.2 0 0.2 0.4 0.6 0.8 1
   sqr x
1 0.64 0.36 0.16 0.04 0 0.04 0.16 0.36 0.64 1
   PLOT x;sqr x</pre>
<img src="gr14g1.jpg" border=0 alt="">   
Similarly, a graph of the cube is reflected in the origin,
because the cube of <code>-x</code> equals the <i>negative</i>
of the cube of <code>x</code>:<pre>
   cube=: ^ with 3
   PLOT x;cube x</pre>
<img src="gr14g2.jpg" border=0 alt="">   
<pre>   (cube -x)=(-cube x)
1 1 1 1 1 1 1 1 1 1 1
   (sqr x)=(sqr x)
1 1 1 1 1 1 1 1 1 1 1</pre>
Simple algebra shows that for any function <code>f</code>
, the function <code>ef=: f + f with -</code> is even, and 
that the function <code>of=: f - f with -</code> is odd.
For example:<pre>   f=: ^ NB. The exponential (which is neither even nor odd)
   ef=: f+f with -
   of=: f-f with -
   PLOT x;(f,ef,:of) x</pre>
   <img src="gr14g3.jpg" border=0 alt="">
   The functions <code>hef=: ef % 2:</code> and
   <code>hof=: of % 2:</code> are called the <i>even</i>
   and <i>odd</i> parts of <code>f</code> because they are,
   respectively, even and odd, and because they sum to <code>f</code>:
   <pre>   hef=: ef % 2:
   hof=: of % 2:
   (f=hef+hof) x
1 1 1 1 1 1 1 1 1 1 1
   PLOT x;(hef,hof,:hef+hof) x</pre>
   <img src="gr14g4.jpg" border=0 alt="">
   
   The odd and even parts of a function are often functions
   of interest in their own right. For example, <code>hof</code>
   is the <i>hyperbolic sine</i>, and <code>hef</code>
   is the <i>hyperbolic cosine</i>. They are denoted in J by
   <code>5 with o.</code> and <code>6 with o.</code>, respectively.
   <p>As we will show in Chapter 19, we can use complex numbers
   to similarly express the sine and cosine as odd and even
   parts of a function closely related to the exponential. 
   
   
   
 <a name="15: Linear Vector Functions"></a>

<h3><a href="#MATH"><div align="center">15: Linear Vector Functions</div></a></h3>

<a href="#15A.">15A. Dot product and vector functions<p>                                                   
<a href="#15B.">15B. Dot product as a linear vector function<p>                                            
<a href="#15C.">15C. Matrix inverse<p>   

<h3><a name="15A."></a><a href="#15: Linear Vector Functions">15A. Dot product and vector functions</a>
<a href="#S15A."><font size="-1">S15A.</font></a></h3>
The expression <code>+/w*x</code> gives a sum over the 
argument <code>x</code> weighted by the vector 
<code>w</code>. For example:<pre>
   x=: 2 3 5 7 11
   w=: 0 1 2 3 4
   w*x
0 3 10 21 44
   +/w*x
78</pre>
The dot operator (<code>.</code>) applied to the 
functions <code>+/</code> and <code>*</code> produces an equivalent 
function called the <i>dot</i>, <i>inner</i>, or <i>matrix</i> product.
Thus:<pre>
   dp=: +/ . *
   w dp x
78</pre>
Moreover, <code>dp</code> applies to a matrix (table) 
left argument to produce a vector (list) of 
results, using successive rows of the 
matrix as weights. For example:<pre>
   a=: 3 1 4
   b=: 2 7 8
   c=: 2 1 0
   ]m=: a,b,:c
3 1 4
2 7 8
2 1 0

   m dp 2 3 5
29 65 7
   b dp 2 3 5
65

   g=: m with dp
   g 2 3 5
29 65 7</pre>
If <code>m</code> is a square matrix (as in the present example), 
then <code>m with dp</code> applies to a 
vector to produce a vector of the same number of 
elements. We will call such a 
function a <i>vector</i> function.


 
<h3><a name="15B."></a><a href="#15: Linear Vector Functions">15B. Dot product as a linear vector function</a>
<a href="#S15B."><font size="-1">S15B.</font></a></h3>
The dot product with a vector or matrix left 
argument distributes over addition, 
and is therefore a linear function, as defined in Section
14F. For example:<pre>
   x=: 2 3 5
   y=: 0 1 2
   f=: 2 7 8 with dp

   ((f x)+(f y)) , (f x+y)
88 88
   g=: m with dp
   ((g x)+(g y)) ,: (g x+y)
38 88 8
38 88 8</pre>
The function <code>I=:  =/~ on i.</code> yields a result 
called an <i>identity matrix</i>, because 
when used 
with <code>dp</code> it produces an identity 
function (that yields its argument 
unchanged). For example:<pre>
   I=: i. =/ i.
   ]i=:  I 3
1 0 0
0 1 0
0 0 1
   i with dp 2 3 5
2 3 5</pre>
A linear vector function need not be 
expressed as a dot product, but if it is not, the 
required matrix is easily determined. 
For example, <code>sop=: +/\</code> (sums over 
prefixes) is a linear vector function, 
and the matrix <code>m</code> for an equivalent function
<code>m with dp</code> may be determined as follows:<pre>
   x=: 2 3 5 7 11
   y=: 0 1 2 3 4
   sop=: +/\
   ((sop x)+(sop y)) ,: (sop x+y)
2 6 13 23 38
2 6 13 23 38

   ]i=: I # x
1 0 0 0 0
0 1 0 0 0
0 0 1 0 0
0 0 0 1 0
0 0 0 0 1

   i dp x
2 3 5 7 11
   sop i dp x
2 5 10 17 28
   (sop i) dp x
2 5 10 17 28

   ]m=: sop i
1 0 0 0 0
1 1 0 0 0
1 1 1 0 0
1 1 1 1 0
1 1 1 1 1</pre>  
The resulting matrix provides an 
interesting way of looking at the sums over 
prefixes: the ones in the successive 
rows indicate the elements included in the 
successive sums.



<h3><a name="15C."></a><a href="#15: Linear Vector Functions">15C. Matrix inverse</a>
<a href="#S15C."><font size="-1">S15C.</font></a></h3>
The inverse of a linear vector 
function <code>m with dp</code> is itself a linear vector 
function, and can therefore be 
expressed in the form <code>mi with dp</code>. The matrix 
<code>mi</code> may be obtained from <code>m</code> by 
applying the matrix inverse function <code>%.</code> . Thus:<pre>
   ]z=:  m dp x=: 2 3 5 7 11
2 5 10 17 28
   mi=: %.m
   mi dp z
2 3 5 7 11
   mi
 1  0  0  0 0
_1  1  0  0 0
 0 _1  1  0 0
 0  0 _1  1 0
 0  0  0 _1 1</pre>
The pairs <code>_1 1</code> in the rows of the 
inverse <code>mi</code> indicate that the inverse of the sum 
over prefixes is a differencing operation, 
and the matrix <code>mi</code> may be called a 
difference matrix.
<p><b><div align="center">Exercises</div></b><ol><p><li>
 Experiment with various linear vector 
functions such as reversal (<code>|.</code>), 
rotation (<code>2 with |.</code>)  and <code>8 with A.</code>. 
<p>Comment on the matrices 
that represent them and their inverses.</ol>



<a name="16: Polynomials and NUMBER SYSTEMS"></a>
<h3><a href="#MATH"><div align="center">16: Polynomials and NUMBER SYSTEMS</div></a></h3>

<a href="#16A.">16A. Ascending and descending order of exponents<p>                
<a href="#16B.">16B. Products of polynomials<p>                                    
<a href="#16C.">16C. Multiplication of decimal numbers<p>                          
<a href="#16D.">16D. Other bases<p>                                                
<a href="#16E.">16E. Remainder, Divisibility, and Integer part<p>                  
<a href="#16F.">16F. Notes<p>   

<h3><a name="16A."></a><a href="#16: Polynomials and NUMBER SYSTEMS">16A. Ascending and descending order of exponents</a>
<a href="#S16A."><font size="-1">S16A.</font></a></h3>
In conventional mathematics, polynomials 
are sometimes expressed with the 
exponents in ascending order (beginning with zero), 
and sometimes in descending 
order (beginning with the largest exponent). Thus:<p>
      ax<sup>0</sup>+bx<sup>1</sup>+cx<sup>2</sup>+dx<sup>3</sup><p>  
      ax<sup>3</sup>+bx<sup>2</sup>+cx<sup>1</sup>+dx<sup>0</sup>
<p>Descending order is commonly used in high school, 
but ascending order is more 
suitable in advanced math, because in 
truncated power series a “largest exponent” 
may not be clearly identified.
<p>To compare these schemes we will define 
two functions called <code>pa</code> (for ascending 
order), and <code>pd</code> (for descending). The 
former is the function <code>p.</code> that we have used 
in earlier chapters, and the latter 
may be expressed in terms of it using the reversal 
function (<code>|.</code>) to reverse the order of the 
coefficients. Thus:<pre>
   pa=: p.
   pd=: |. on [ pa ]
   x=: 0 1 2 3 4 5
   1 2 3 pa x
1 6 17 34 57 86
   1 2 3 pd x
3 6 11 18 27 38
   1 2 3 pd 10
123</pre>
<p>The final example suggests that a descending 
polynomial with right argument <code>10</code> 
gives the value in decimal of the digits in 
the list of coefficients. In fact, the decimal 
number system (and number systems with bases 
other than ten) are “polynomial 
representations” of numbers, and we may 
find that schemes for multiplying 
polynomials lead to improved methods 
of multiplying multi-digit decimal numbers.


<h3><a name="16B."></a><a href="#16: Polynomials and NUMBER SYSTEMS">16B. Products of polynomials</a>
<a href="#S16B."><font size="-1">S16B.</font></a></h3>
The product of two polynomials <code>c1 with p.</code> 
and <code>c2 with p.</code> 
is itself a 
polynomial, whose coefficients can be computed 
from <code>c1</code> and <code>c2</code> by first forming 
their multiplication table. For example:<pre>
   c1=: 2 3 5
   c2=: 4 1 0 3
   c1 * table c2
+-+---------+
| | 4 1 0  3|
+-+---------+
|2| 8 2 0  6|
|3|12 3 0  9|
|5|20 5 0 15|
+-+---------+
</pre>
The coefficient <code>8</code> in the upper left corner is 
the coefficient of <code>x^0</code> in the product 
polynomial, the elements of the next 
diagonal (<code>2 12</code>) are coefficients of <code>x^1</code>, the 
next diagonal has coefficients of <code>x^2</code>, 
and so on. The combined coefficients of 
successive powers may therefore be 
obtained by summing diagonals of the table to 
obtain <code>c3=: 8 14 23 11 9 15</code>. Thus:<pre>
   c3=: 8 14 23 11 9 15
   x=: 0 1 2 3 4 5
   (c1 p. x) * (c2 p. x)
8 80 840 4928 18800 54528
   c3 p. x
8 80 840 4928 18800 54528</pre>
In the expression <code>f/.</code> the oblique 
operator <code>/.</code> produces a function that applies <code>f</code> 
to each of the diagonals of a table argument. Thus:<pre>
   c1 */ c2
 8 2 0  6
12 3 0  9
20 5 0 15
   +//. c1 */ c2
8 14 23 11 9 15
   c3 = +//. c1 */ c2
1 1 1 1 1 1</pre>
 
We may therefore define a function <code>pc</code> to 
produce product coefficients as follows:<pre>
   pc=:  +//. on (*/)
   c1 pc c2
8 14 23 11 9 15
   1 1 pc 1 1
1 2 1
   1 1 pc 1 1 pc 1 1
1 3 3 1</pre>
Similar reasoning will show that the 
same function <code>pc</code> produces coefficients for 
the product of descending polynomials. 
This may be tested as follows:<pre>
   c1 pd x
5 10 19 32 49 70
   c2 pd x
3 8 39 120 275 528
   (c1 pd x)*(c2 pd x)
15 80 741 3840 13475 36960
   c3 pd x
15 80 741 3840 13475 36960</pre>


<h3><a name="16C."></a><a href="#16: Polynomials and NUMBER SYSTEMS">16C. Multiplication of decimal numbers</a>
<a href="#S16C."><font size="-1">S16C.</font></a></h3>
The last result of Section 16A indicates 
that the result of <code>c pd 10</code> is the decimal 
value of the number whose digits are the 
elements of the list <code>c</code>. Thus:<pre>
   c1=:  1 2 3
   c2=:  1 2 0 3
   (c1 pd 10),(c2 pd 10)
123 1203</pre>
<p>It follows that the elements of <code>c1 pc c2</code> 
represent the product of the numbers 
<code>123</code> and <code>1203</code>. Thus:<pre>
   ]c3=: c1 pc c2
1 4 7 9 6 9
   c3 pd 10
147969
   123*1203
147969</pre>
Consequently, the product can be obtained 
by making the table <code>c1 * table c2</code> 
and summing its diagonals:<pre>
   c1 * table c2
+-+-------+
| |1 2 0 3|
+-+-------+
|1|1 2 0 3|
|2|2 4 0 6|
|3|3 6 0 9|
+-+-------+
   1,(+/2 2),(+/0 4 3),(+/3 0 6),(+/6 0),9
1 4 7 9 6 9</pre>
However, these diagonal sums for other 
arguments may yield results greater than 
<code>9</code>, and therefore themselves be multi-digit numbers. 
For example:<pre>
   c4=: 1 2 3 4 5 6 7 
   c5=: 8 7 6 5 4
   ]c6=: c4 pc c5
8 23 44 70 100 130 160 126 92 59 28
   c6 pd 10
108214735818
   1234567*87654
108214735818</pre>
The result <code>c6</code> does correctly represent 
the product, but it is unsatisfactory in that 
its multi-digit elements cannot be simply 
squeezed together (as in <code>8234470100130160126925928</code>) 
to produce the correct product.
<p>An equivalent list of single digits can, 
however, be obtained by “carrying” all but 
the final digit to the next higher element, 
as illustrated in the following sequence:<pre>
   c6=: 8 23 44 70 100 130 160 126 92 59 28
   c7=: 8 23 44 70 100 130 160 126 92 61 8
   c8=: 8 23 44 70 100 130 160 126 98 1 8
   c9=: 8 23 44 70 100 130 160 135 8 1 8
   c10=: 8 23 44 70 100 130 173 5 8 1 8
   c11=: 8 23 44 70 100 147 3 5 8 1 8
   c12=: 8 23 44 70 114 7 3 5 8 1 8
   c13=: 8 23 44 81 4 7 3 5 8 1 8
   c14=: 8 23 52 1 4 7 3 5 8 1 8
   c15=: 8 28 2 1 4 7 3 5 8 1 8
   c16=: 10 8 2 1 4 7 3 5 8 1 8
   c17=: 1 0 8 2 1 4 7 3 5 8 1 8  
   c6 pd 10
108214735818
   c17 pd 10
108214735818</pre>
Moreover, the entire <i>normalization</i> 
from <code>c6</code> to <code>c17</code> can be done easily by hand in a 
single process. In summary, multiplication 
of decimal numbers represented by the 
lists of digits <code>d1</code> and <code>d2</code> can be performed 
by hand by writing down the table
<code>d1 * table d2</code>, summing the diagonals, 
and “normalizing” the results to single-digit 
elements (written together without spaces).
This process may be compared with the 
commonly-taught scheme shown below:<pre>
     1234567
       87654
------------	   
     4938268
    6172835
   7407402
  8641969
 9876536 
------------
108214735818</pre>
In contrast to the three distinct steps 
of recording the multiplications in a table, 
summing its diagonals, and a final 
normalizion by carry, this conventional scheme 
combines multiplication and carry 
in each step of the production of each line, and 
again uses carrying in the final 
summation of the several lines. 
<p>Not only is this 
combined multiplication-and-carry 
more difficult to execute accurately, but the 
resulting record is almost impossible to check 
for possible errors except by 
repeating the entire process – a repetition that 
invites repetition of the same errors. 


<h3><a name="16D."></a><a href="#16: Polynomials and NUMBER SYSTEMS">16D. Other bases</a>
<a href="#S16D."><font size="-1">S16D.</font></a></h3>
Just as <code>c pd 10</code> gives the decimal (or base-<code>10</code>) 
value of <code>c</code> as a weighted sum 
with weights of decreasing powers of <code>10</code>, 
so <code>c pd 8</code> gives the base-<code>8</code> value, 
using powers of <code>8</code> as weights. For example:<pre>
   c1=: 1 2 3
   c2=: 1 2 0 3  
   (c1 pd 8),(c2 pd 8)
83 643
   ]c3=: c1 pc c2
1 4 7 9 6 9
   c3 pd 8
53369
   (c1 pd 8)*(c2 pd 8)
53369</pre>
Again the result <code>c3</code> can be normalized, 
this time to the range <code>0</code> to <code>7</code>. This requires 
dividing by <code>8</code>, “carrying” the integer 
quotient, and leaving the remainder. Thus:<pre>
   c3
1 4 7 9 6 9
   1 4 7 9 7 1 pd 8
53369
   1 4 8 1 7 1 pd 8
53369
   1 5 0 1 7 1 pd 8
53369</pre>


<h3><a name="16E."></a><a href="#16: Polynomials and NUMBER SYSTEMS">16E. Remainder, Divisibility, and Integer part</a>
<a href="#S16E."><font size="-1">S16E.</font></a></h3>
The carrying process used in preceding sections 
made use of the <i>remainder</i>. For example, <code>8</code>
divides into <code>24</code> exactly (that is, an
integer number of times), but it divides <code>27</code>
leaving a remainder of <code>3</code>.
<p>The remainder function is denoted by <code>|</code> and is 
illustrated by:<p>
<pre>   | table i=: 1 2 3 4 5 6 7 8
+-+---------------+
| |1 2 3 4 5 6 7 8|
+-+---------------+
|1|0 0 0 0 0 0 0 0|
|2|1 0 1 0 1 0 1 0|
|3|1 2 0 1 2 0 1 2|
|4|1 2 3 0 1 2 3 0|
|5|1 2 3 4 0 1 2 3|
|6|1 2 3 4 5 0 1 2|
|7|1 2 3 4 5 6 0 1|
|8|1 2 3 4 5 6 7 0|
+-+---------------+</pre>
<p>If the remainder <code>d|n</code> is zero, we 
say that <code>n</code> is <i>divisible</i> by <code>d</code>, as
illustrated by the following 
divisibility table:<p><pre>   =&amp;0 on | table i
+-+---------------+
| |1 2 3 4 5 6 7 8|
+-+---------------+
|1|1 1 1 1 1 1 1 1|
|2|0 1 0 1 0 1 0 1|
|3|0 0 1 0 0 1 0 0|
|4|0 0 0 1 0 0 0 1|
|5|0 0 0 0 1 0 0 0|
|6|0 0 0 0 0 1 0 0|
|7|0 0 0 0 0 0 1 0|
|8|0 0 0 0 0 0 0 1|
+-+---------------+</pre>
<p>The number <code>n-d|n</code> is divisible by <code>d</code>,
and the result of the division <code>d%~n-d|n</code> is
called the <i>integer quotient</i>. Thus:<p><pre>   iq=: ([%~]-|)"0
   8 iq 22 23 24 25 26 27
2 2 3 3 3 3
   iq table i
+-+---------------+
| |1 2 3 4 5 6 7 8|
+-+---------------+
|1|1 2 3 4 5 6 7 8|
|2|0 1 1 2 2 3 3 4|
|3|0 0 1 1 1 2 2 2|
|4|0 0 0 1 1 1 1 2|
|5|0 0 0 0 1 1 1 1|
|6|0 0 0 0 0 1 1 1|
|7|0 0 0 0 0 0 1 1|
|8|0 0 0 0 0 0 0 1|
+-+---------------+</pre>
<p>The integer quotient can also be obtained by
applying the <i>integer part</i> function <code>&lt;.</code> to
the result of division. For example:<p><pre>   i%5
0.2 0.4 0.6 0.8 1 1.2 1.4 1.6
   &lt;.i%5
0 0 0 0 1 1 1 1
   &lt;. on (%~) table i
+-+---------------+
| |1 2 3 4 5 6 7 8|
+-+---------------+
|1|1 2 3 4 5 6 7 8|
|2|0 1 1 2 2 3 3 4|
|3|0 0 1 1 1 2 2 2|
|4|0 0 0 1 1 1 1 2|
|5|0 0 0 0 1 1 1 1|
|6|0 0 0 0 0 1 1 1|
|7|0 0 0 0 0 0 1 1|
|8|0 0 0 0 0 0 0 1|
+-+---------------+</pre>


<h3><a name="16F."></a><a href="#16: Polynomials and NUMBER SYSTEMS">16F. Notes</a>
<a href="#S16F."><font size="-1">S16F.</font></a></h3>
In his Chapter 6: The Dawn of nothing, Hogben provides
an interesting discussion of number systems and
the role of <i>zero</i> in their development. For example:
<p><blockquote><font size="-1">
Why this is necessarily true, is easy to see if we recall
the Roman representation of 32, i.e. XXXII. If the 
Romans had written it in the form III II, 
there would have been no way of distinguishing it from 302,
320, 3,020, 3,200, etc. The one simple way of escape
from this dilemma is to introduce a sign such as
the Maya lozenge ..., a dot or a circle for the 
<i>empty</i> column of the abacus. We can then write
32, 302, 320, 3,020 as below: <p>
III II; IIIoII; III IIo; IIIoIIo

<p>...If our base is <i>b</i>, we need only (<i>b</i>-1)
other signs
e.g. if <i>b</i>=10 the other signs we need are nine in all.
We can then express any nameable number however great
without enlarging our stock in trade.

<p>...Its invention liberated the human intellect from the prison
bars of the counting frame. The new script was a
complete model of the mechanical process one performs
with it. With a sign for the empty 
column, 'carrying over' on slate, paper or parchment is 
just as easy as carrying over on the abacus.

<p>...In mediaeval Europe, the name for such rules 
was <i>algorithms</i>, a corruption of the name of a
thirteenth century mathematician, spelled Al 
Khwarismi or Alkarismi.</font></blockquote>


<a name="17: Algorithms"></a>
<h3><a href="#MATH"><div align="center">17: Algorithms</div></a></h3>

<a href="#17A.">17A. Introduction<p>                                               
<a href="#17B.">17B. Designing an algorithm<p> 
<a href="#17C.">17C. Explicit definition<p>

<h3><a name="17A."></a><a href="#17: Algorithms">17A. Introduction</a>
<a href="#S17A."><font size="-1">S17A.</font></a></h3>
In cooking, a list of one or more instructions is called
a <i>recipe</i>; in mathematics or computer science it is
called a <i>program</i> or <i>algorithm</i>.
<p>A recipe may call for some thing (such as Hollandaise
sauce) which is itself specified by a recipe; in mathematics or
programming such a thing is more commonly called
a <i>function</i> or <i>component function</i>. For
example, in the program<p><pre>   odd=: 1:+even
      even=: 2:*i.</pre>
<p>the program for the function <code>odd</code> makes
use of the function <code>even</code>, and each function may
be used independently:<p><pre>   odd 5
1 3 5 7 9
   even 5
0 2 4 6 8
   (odd*even) 5
0 6 20 42 72</pre>


<h3><a name="17B."></a><a href="#17: Algorithms">17B. Designing an algorithm</a>
<a href="#S17B."><font size="-1">S17B.</font></a></h3>
Except for the very simplest cases, it is best to begin
by computing an example and assessing its suitability, and
only then composing the required definition or definitions.
We will illustrate two approaches to this final step:<p>
<ol><li>Define component functions (such as <code>f</code>
and <code>g</code>), and use them in a single definition
(such as <code>h=: f+f on g</code>).<p><li>Use the <i>explicit</i>
form of definition, in which the body of the definition is 
essentially a copy of the worked example, but with the arguments
denoted by <code>x.</code> and <code>y.</code> .
</ol>
<p><b>EXAMPLE 1</b> Define a function for the decaying sine curve.
<p>We begin by assigning values to a list argument <code>x</code>,
and applying sine and decay functions to it:<pre>
   x=: 1r2*i.11
   s=: 1&amp;o. x
   ]n=: _1r5 * x
0 _1r10 _1r5 _3r10 _2r5 _1r2 _3r5 _7r10 _4r5 _9r10 _1
   d=: ^ n
   set 2
   d*s
0 0.43 0.69 0.74 0.61 0.36 0.077 _0.17 _0.34 _0.4 _0.35
   PLOT x;d,s,:d*s</pre><img src="gr17b1.jpg" border=0 alt="">
   
   
   <h3><a name="17C."></a><a href="#17: Algorithms">17C. Explicit definition</a>
   <a href="#S17C."><font size="-1">S17C.</font></a></h3>
We will now illustrate the use of a form of definition in
which the arguments occur explicitly (using the names <code>x.</code>
and <code>y.</code>), and allows multiple lines in which names
may be assigned to intermediate results. Thus:<pre>   b=: 4 
   b
4
   
   f=: 4 : 0
a=: i. x.
b=: a ^ y.
c=: +/b
b;c
)
   
   5 f 2
+----------+--+
|0 1 4 9 16|30|
+----------+--+
   b
0 1 4 9 16</pre>It is clear that the value originally assigned to <code>b</code>
(in order to illustrate this matter) has been changed by the execution of <code>f</code>, behaviour
that might cause the loss of valuable data. This unsuitable
behaviour can be avoided by using a different copula (<code>=.</code>)
to <i>localize</i> the names assigned within the function. Thus:<pre>   f=: 4 : 0
a=.i. x.
b=.a ^ y.
c=.+/b
b;c
)
   
   7 f 3
+-------------------+---+
|0 1 8 27 64 125 216|441|
+-------------------+---+
   b
0 1 4 9 16</pre>
See Section S16C for a further example of explicit definition.
<p>In Section 11E, the agenda operator <code>@.</code> was 
used to provide a <i>conditional</i> execution of functions
in its argument. In many programming languages, conditional
execution is provided by constructs such as <i>if</i>,
<i>then</i>, <i>else</i>, and <i>while do</i>. The form used in
explicit definition is illustrated 
by:<pre>   SUM=: 3 : 0
i=.0
a=.0
while. i&lt;y. 
   do. a=.next a
       i=.next i
end.
a
)
   
   SUM 4
6   
   0+1+2+3
6   
   sum=: +/ on i. 
   sum 4
6
</pre>


<a name="18: Anti-Derivative and Integral"></a>
<h3><a href="#MATH"><div align="center">18: Anti-Derivative and Integral</div></a></h3>

<a href="#18A.">18A. Introduction<p>
<a href="#18B.">18B. Area under a graph as a function<p>                       
<a href="#18C.">18C. Polynomial approximations<p>

<h3><a name="18A."></a><a href="#18: Anti-Derivative and Integral">18A. Introduction</a>
<a href="#S18A."><font size="-1">S18A.</font></a></h3>
Just as the operator <code>d.1</code> can be applied to
a function <code>f</code> to obtain its derivative,
so the operator <code>d._1</code> can be applied to obtain
its <i>anti-derivative</i>, that is, a function whose
derivative is <code>f</code>. For example:<pre>   derv=: d.1
   anti=: d._1
   
   c=: 1 2 3 4 5 6
   c with p.
1 2 3 4 5 6&amp;p.
   c with p. derv
2 6 12 20 30&amp;p.
   c with p. anti
0 1 1 1 1 1 1&amp;p.
   c with p. anti derv
1 2 3 4 5 6&amp;p.</pre><div align="center"><b>Exercises</b></div><p>
<ol><li>Experiment with the operators <code>derv</code> and
<code>anti</code> on functions such as <code>^</code> and
<code>1&amp;o.</code> and <code>2&amp;o.</code> and <code>6&amp;o.</code><p>
<li>Compare the derivatives of the functions <code>1 2 3 4 5&amp;p.</code>
and <code>7 2 3 4 5&amp;p. </code>, and explain their agreement.</ol>


<h3><a name="18B."></a><a href="#18: Anti-Derivative and Integral">18B. Area under a graph as a function</a>
<a href="#S18B."><font size="-1">S18B.</font></a></h3>
A study of the graph of Section 3B (an approximation to
a circle) suggests that the area under the
graph of a function <code>f</code> from the 
argument <code>_1</code> (or any fixed point) to
an argument <code>x</code> is itself a function of <code>x</code> (that
depends upon the function <code>f</code>). <p> We will first make a
similar graph, using a finer grid (with a spacing 0.05 between points):<pre>   a=:  i:1j40
   PLOT a;cir a</pre><img src="gr18b1.jpg" border=0 alt="">
   
What is the rate of change of the area function? <p>Consider
the point <code>x=: 0.5</code>, the spacing <code>s=: 0.05</code>, and
the next plotted point <code>x+s</code>. The change in area is due to 
the quadrilateral with base <code>s</code> and heights <code>cir x</code>
and <code>cir x+s</code>, an area equal to <code>s</code> times
the average of the heights <code>cir x</code> and <code>cir x+s</code>.<p>

The rate of change <code>((cir x+s)-(cir x))%s</code> is
therefore the average of <code>cir x</code> and <code>cir x+s</code>.
For small values of <code>s</code>, this average approaches <code>cir x</code>;
the derivative of the area under the graph of <code>cir</code>
is therefore the function <code>cir</code> itself.<p>

In other words, the area under the graph of a function
is the anti-derivative of the function. Since this area
can be viewed as the aggregation or <i>integration</i> of
the component areas, it is also called the <i>integral</i>
of the function.


<p align="right"><h3><a name="18C."></a><a href="#18: Anti-Derivative and Integral">18C. Polynomial approximations</a>
<a href="#S18C."><font size="-1">S18C.</font></a></h3>

As illustrated in Section 3B, the area under a curve can be
computed to give the value of the anti-derivative of a function
at a chosen point. But this does not yield a <i>function</i> for
the anti-derivative in the sense that the operator <code>d._1</code>
does for the functions to which it applies.
<p>This situation is analogous to the equation-solving of
Chapter 9, which gives the inverse of a function for some
chosen point, but not the inverse function itself.

<p>A practical solution to the anti-derivative of a function <code>f</code>
is provided by finding the coefficients of a polynomial that 
approximates it, and then
using the fact that the anti-derivative (as well as the derivative) of
a polynomial is easily obtained.

<p>The expression <code>(f x) %. x^/i.n</code> yields the
coefficients of an <code>n</code>-term polynomial that best
fits the function <code>f</code> at the points <code>x</code>.
For example:<pre>   ]x=: i:1j10
_1 _0.8 _0.6 _0.4 _0.2 0 0.2 0.4 0.6 0.8 1

   ]c=: (1&amp;o. x) %. x ^/i.5
_3.46945e_17 0.997542 9.99201e_16 _0.156378 _7.77156e_16

   c&amp;p. _1 0 1
_0.841164 _3.46945e_17 0.841164

   1&amp;o. _1 0 1
_0.841471 0 0.841471

   (c&amp;p. x) ,. (sin x)
   _0.841164 _0.841471
   _0.717968 _0.717356
   _0.564748 _0.564642
   _0.389009 _0.389418
   _0.198257 _0.198669
_3.46945e_17         0
    0.198257  0.198669
    0.389009  0.389418
    0.564748  0.564642
    0.717968  0.717356
    0.841164  0.841471</pre>
The polynomial approximations may, however, be wildly wrong
for arguments outside of the list <code>x</code> to which it 
was fitted.
<p>The function <code>der</code> of Section 6B applied to a
list of polynomial coefficients yields the coefficients of
the derivative polynomial. A coresponding function for the
anti-derivative may be defined as follows:<pre>   der=: 1: |. ] * i. on #
   ant=: 0:,] % next i. on #
   ant c
0 1 1 1 1 1 1
   der ant c
1 2 3 4 5 6 0</pre>


<a name="19: Complex Numbers and the Exponential Family"></a>
<h3><a href="#MATH"><div align="center">19:Complex Numbers and the Exponential Family</div></a></h3>

<a href="#19A.">19A. Imaginary numbers<p>
<a href="#19B.">19B. Complex numbers<p>
<a href="#19C.">19C. Division<p>
<a href="#19D.">19D. The Exponential Family<p> 

<h3><a name="19A."></a><a href="#19: Complex Numbers and the Exponential Family">19A. Imaginary numbers</a>

<a href="#S19A."><font size="-1">S19A.</font></a></h3>
In Chapter 1 we began with the counting numbers (<code>1 2 3 4</code> etc.)
and found that the introduction of subtraction as the inverse 
of addition led to a new class of <i>negative</i> numbers (when
we attempted to subtract a larger number from a smaller).
<p>Such negative numbers were once regarded as curious
absurdities, but are found to serve consistently and usefully
under addition, subtraction, and multiplication.
<p>Similarly, the introduction of division as the inverse of
multiplication leads to the consistent and useful notion
of fractional numbers.
<p>Because the square of </i>any</i> number (positive or negative)
is non-negative, the introduction of the square root as the inverse
of the square leads to a further extension when applied to
a negative number. These new numbers were (and still are) called
<i>imaginary</i>. For example:
<pre>   set=: 9!:11
   set 4

   sqr=: *:
   sqrt=: sqr^:_1
   a=: i.10
   a
0 1 2 3 4 5 6 7 8 9
   sqr a
0 1 4 9 16 25 36 49 64 81
   sqrt a
0 1 1.414 1.732 2 2.236 2.449 2.646 2.828 3
   b=: sqrt -a
   b
0 0j1 0j1.414 0j1.732 0j2 0j2.236 0j2.449 0j2.646 0j2.828 0j3
   sqr b
0 _1 _2 _3 _4 _5 _6 _7 _8 _9
</pre>


<h3><a name="19B."></a><a href="#19: Complex Numbers and the Exponential Family">19B. Complex numbers</a>
<a href="#S19B."><font size="-1">S19B.</font></a></h3>
The sum of a real and an imaginary number is called a <i>complex</i>
number. For example:
<pre>   a+b
0 1j1 2j1.414 3j1.732 4j2 5j2.236 6j2.449 7j2.646 8j2.828 9j3
   sqr (a+b)
0 0j2 2j5.657 6j10.39 12j16 20j22.36 30j29.39 42j37.04 56j45.25 72j54
   a + table b
+-+-------------------------------------------------------------+
| |0 0j1 0j1.414 0j1.732 0j2 0j2.236 0j2.449 0j2.646 0j2.828 0j3|
+-+-------------------------------------------------------------+
|0|0 0j1 0j1.414 0j1.732 0j2 0j2.236 0j2.449 0j2.646 0j2.828 0j3|
|1|1 1j1 1j1.414 1j1.732 1j2 1j2.236 1j2.449 1j2.646 1j2.828 1j3|
|2|2 2j1 2j1.414 2j1.732 2j2 2j2.236 2j2.449 2j2.646 2j2.828 2j3|
|3|3 3j1 3j1.414 3j1.732 3j2 3j2.236 3j2.449 3j2.646 3j2.828 3j3|
|4|4 4j1 4j1.414 4j1.732 4j2 4j2.236 4j2.449 4j2.646 4j2.828 4j3|
|5|5 5j1 5j1.414 5j1.732 5j2 5j2.236 5j2.449 5j2.646 5j2.828 5j3|
|6|6 6j1 6j1.414 6j1.732 6j2 6j2.236 6j2.449 6j2.646 6j2.828 6j3|
|7|7 7j1 7j1.414 7j1.732 7j2 7j2.236 7j2.449 7j2.646 7j2.828 7j3|
|8|8 8j1 8j1.414 8j1.732 8j2 8j2.236 8j2.449 8j2.646 8j2.828 8j3|
|9|9 9j1 9j1.414 9j1.732 9j2 9j2.236 9j2.449 9j2.646 9j2.828 9j3|
+-+-------------------------------------------------------------+
</pre>
Since a complex number is a sum of a real and an imaginary
number, the product of complex numbers is treated consistently
as a product of sums. The steps in the multiplication may
be illustrated as follows:
<pre>   c=: 2j3
   d=: 4j5
   c*d
_7j22
   (2+0j3)*(4+0j5)
_7j22
   (2*(4+0j5))+(0j3*(4+0j5))
_7j22
   (2*4)+(2*0j5)+(0j3*4)+(0j3*0j5)
_7j22
   8+0j10+0j12+_15
_7j22
   _7+0j22
_7j22
</pre>
Note that the product of two imaginaries (<code>0j3</code>
and <code>0j5</code>) yields a negative real number.


<h3><a name="19C."></a><a href="#19: Complex Numbers and the Exponential Family">19C. Division</a>
<a href="#S19C."><font size="-1">S19C.</font></a></h3>
We begin by dividing the product <code>e=: c*d</code> by
<code>c</code> and then by <code>d</code> to get the
expected results <code>d</code> and <code>c</code>:
<pre>   ]e=: c*d
_7j22
   e%c
4j5
   e%d
2j3
</pre>
To get a general procedure for division, we first note that 
division by a real number is straightforward. For example:
<pre>   12j22 % 2
6j11</pre>
Similarly, we note that multiplication of both numerator 
and dednominator by the same number leaves the quotient
unchanged. For example:
<pre>   e%c
4j5
   g=: 2j_3
   (e*g)%(c*g)
4j5
</pre> 
Finally, we note that the denominator <code>c*g</code> is
a real number, a result of choosing <code>g</code> as the
<i>conjugate</i> of <code>c</code>, that is, obtained
from <code>c</code> by reversing the sign of its
imaginary part:<pre>   c*g
13
</pre>
The function <code>conj=: +</code> yields the conjugate
of its argument, and it can therefore be used to provide 
division by first producing an equivalent quotient with a
real denominator. For example:
<pre>   conj=: +
   p=: 2j5
   q=: 3j_4
   p%q
_0.56j0.92
   conj q
3j4
   p*conj q
_14j23
   q*conj q
25
   (p*conj q)%(q*conj q)
_0.56j0.92
NB. Compare with p%q</pre>


<h3><a name="19D."></a><a href="#19: Complex Numbers and the Exponential Family">19D. The Exponential Family</a>
<a href="#S19D."><font size="-1">S19D.</font></a></h3>
In Chapter 14 we showed that the hyperbolic sine and the 
hyperbolic cosine belonged to the exponential family in the 
sense that they could be obtained from the exponential
as its odd and even parts. Using imaginary numbers, we
can treat the sine and cosine similarly.
<p>The function <code>j.</code> multiplies its argument
by <code>0j1</code> (the square root of negative one). For
example:<pre>   j.i.10
0 0j1 0j2 0j3 0j4 0j5 0j6 0j7 0j8 0j9</pre> 
Consequently, each term in the polynomial <code>c with p. on j.</code>
differs from that in the polynomial <code>c with p.</code>
by a power of <code>0j1</code> determined by its exponent.
For example:<pre>  0j1^0 1 2 3 4 5 6 7 8

1 0j1 _1 0j_1 1 0j1 _1 0j_1 1

   c=: 1 2 3 4 5 6 7
   f=: c with p.
   f t. i.10 NB. Taylor coefficients
1 2 3 4 5 6 7 0 0 0

   f on j. t. i.10
1 0j2 _3 0j_4 5 0j6 _7 0 0 0</pre>
Consequently, the Taylor coefficients of the function <code>^ with j.</code>
are the same as those of the sum <code>cos+j. sin</code>, and
the cosine and sine can be obtained from the even and odd parts 
of <code>^ with j.</code><p>
<div align="center"><b>Exercises</b></div>
<ol> <p><li>Define the following odd and even operators:
<pre>   O=:  .: -
   E=:  .. -</pre>and experiment with their use on the function
   <code>f=: 0 1 2 3 4 5 with p.</code> using expressions 
   such as <code>f E</code> and <code>f E i:4</code> 
   and <code>(f O+f E) i:4</code><p>
<li>Experiment with the odd and even parts of other polynomials, as
well as with the functions <code>^</code> and <code>sin=: 1 with o.</code>
and <code>cos=: 2 with o.</code> and <code>cosh=: 6 with o. </code>.
   </ol> 
   
   
<a name="20: Further Topics"></a>

<h3><a href="#MATH"><div align="center">20: Further Topics</div></a></h3>

<a href="#20A.">20A. Introduction<p>                                                                           
<a href="#20B.">20B. Mathematics: from the Birth of Numbers<p>                                                 
<a href="#20C.">20C. Concrete mathematics<p>
<a href="#20D.">20D. Computer Resources<p>
<a href="#20E.">20E. Conclusion<p> 

<h3><a name="20A."></a><a href="#20: Further Topics">20A. Introduction</a>
<a href="#S20A."><font size="-1">S20A.</font></a></h3>
In stating the purpose of this book in the preface we said:
<blockquote>In the seventy-odd years since his publication, the 
development of computer programming 
has provided languages with grammars that are simpler and 
more tractable than that of  
conventional mathematical notation. Moreover, the 
general availability of the computer 
makes possible convenient and accurate experimentation 
with mathematical ideas....
<p>These facts make it possible to present to the layman 
a simple view of calculus as the 
study of the rate of change of a function, 
and to use it to provide insight into matters such 
as the sine and cosine functions (so useful in 
trigonometry and the study of mechanical and 
electrical vibrations), and into the exponential 
and its inverse the logarithm (so useful in 
growth processes and matters such as the familiar 
musical scale).</blockquote>
<p>These matters have now been addressed, but
there remain many practical and interesting topics (such
as probability and statistics) that are well within the
grasp and interest of a layman. Rather than pursue these, we will conclude
by suggesting sources for further study.
<p>Although there are many excellent elementary treatments of
math (including some high-school texts), they are all couched
in conventional notation, which we have (except for the
discussion in Chapter 10) largely ignored. This may make
their study difficult.
<p>However, the use of a foreign (that is, unfamiliar)
language also offers advantage: the effort of translation
often forces one to "look behind the words" to gain a clearer
understanding of their import.
<p>We will discuss just two texts, in
addition to resources available on the computer.
<p>The first text (Gullberg, <i>Mathematics: From the Birth 
of Numbers</i> [20]) is serious, entertaining, and extensive,
and provides a wealth of interesting historical detail. As
stated in a foreword by Peter Hilton (an emeritus professor of
mathematics):
<p><blockquote>The unstated premise of this book - a premise that
virtually all mathematicians would agree to - is that
mathematics, like music, is worth doing for its
own sake. The author is, by profession, a medical man, but
he has a love for mathemtics and wants others to share
his enthusiasm.
<p>This is not to deny the usefulness of mathematics;
this very usefulness, however, tends to conceal and
disguise the cultural aspect of mathematics.
<p>...
<p>Further, the study of mathematics starts with the teaching
of arithmetic, a horrible, wretched subject, far removed from 
real mathematics, but perceived to be useful. As a result, 
vast numbers of intelligent people become 'mathematics avoiders'
even though they have never met mathematics. Their desire to
avoid the tedium of elementary arithmetic, with its boring, 
unappetizing algorithms and pointless drill-calculations, is
perfectly natural and healthy.
<p>To those intelligent people, it must seem absurd to liken 
mathematics to music as an art to be savored and enjoyed even
in one's leisure time. Yet that is how it should appear and could
appear if it were playing its proper role in our (otherwise) civilized
society. Just as an appreciation of music is a hallmark of the 
educated person, so should be an appreciation of mathematics. The 
author of this book is a splendid example of an educated person bearing
this hallmark.
</blockquote>
<p>The second (Graham, Knuth and Patashnik, <i>Concrete
Mathematics</i> [2]) is presented as "A foundation for Computer
Science". As stated in the preface:
<p><blockquote>The course title "Concrete Mathematics"
was originally intended as an antidote to "Abstract
Mathematics", since concrete classical results were
rapidly being swept out of the modern mathematical
curriculum by a new wave of abstract ideas popularly
called "The New Math." Abstract mathematics is a
beautiful subject ... But its adherents had become 
deluded that the rest of mathematics was inferior
and no longer worthy of attention.</blockquote>
<p>This text is recommended not only because of its clarity and
coverage, but also because of my <i>Concrete Math Companion </i>[21],
which may prove helpful in the matter of notation.
It provides an extensive commentary on the Graham text,
expressed in the executable notation used here.


<h3><a name="20B."></a><a href="#20: Further Topics">20B. Mathematics: from the Birth of Numbers</a>
<a href="#S20B."><font size="-1">S20B.</font></a></h3>
We will comment on four topics covered by Gullberg,
primarily to show the form of their expression in J, and
the possibility for computer experimentation:
<p><b>CONTINUED FRACTIONS</b> On page 127, Gullberg says:
<pre>All real numbers can be written as periodic 
or nonperiodic, terminating or nonterminating, decimal
fractions. Another way of writing a rational number
is in the form of a <b>continued fraction</b>,<p>
   N = a0 +            1
            -----------------------
            a1 +         1
                 ------------------
                 a2 +      1
                      -------------
                      a3 +    1
                           --------
                           a4 + ...
						   
or, in a kind of accepted mathematical "shorthand",

    N = [a0, a1, a2, a3 ...]
  </pre>
This is equivalent to the function <code>pr=: [+1:%]</code>
applied over the list <code>a0,a1,a2,a3, etc.</code>,
and Gullberg's example of 221/41 may be treated 
as follows:<pre>   pr=: [+1:%]
   2 pr 5
2.2
   pr/5 2 1 1 3 2r1
221r41
   pr/5 2 1 1 3 2
5.39024
   pr/\5 2 1 1 3 2r1
5 11r2 16r3 27r5 97r18 221r41</pre>
The final expression illustrates how the operator <code>\</code>
may be used to obtain the partial sums or "convergents" to
the complete continued fraction.
<p>The <i>fibonacci numbers</i> (treated by Gullberg
on page 287) may also be obtained as continued fractions.
For example:<pre>   pr/\1 1 1 1 1 1 1 1 1 1r1
1 2 3r2 5r3 8r5 13r8 21r13 34r21 55r34 89r55
   pr/\1 1 1 1 1 1 1 1 1 1
1 2 1.5 1.66667 1.6 1.625 1.61538 1.61905 1.61765 1.61818</pre>
These decimal results may be recognized as increasingly
good approximations to the Golden Mean (or golden number),
also treated by Gullberg.
<p>On page 143, Gullberg shows examples of continued fraction
approximations to irrational numbers such as the square root
of six:
<pre>   a=: 2 2 4 2 4 2 4 2 4
   b=: pr/a
   b
2.44949
   b*b
6</pre>
<b>DETERMINANTS</b> 
On pages 646,7, Gullberg states:<pre>A determinant is a <i>value</i>
representing sums and products of a <i>square matrix</i>.

The determinant of a matrix <b>A</b>, det <b>A</b>, is denoted as
arrays of numbers or algebraic quantities, called 
<b>entries</b> or <b>elements</b>, disposed in horizontal rows and 
vertical columns enclosed between single vertical bars:

           | a11 a12 ... a1n |
   det <b>A</b> = | ... ... ... ... |
           | an1 an2 ... ann |
...
has 3! = 6 triple products of entries from every row
and column, of which no two triplets can be the same,

<font size="-1">
a11 a22 a33  a11 a23 a32  a12 a21 a33  a12 a23 a31  a13 a21 a32  a13 a22 a31
   1-2-3        1-3-2        2-1-3        2-3-1        3-1-2        3-2-1    
# of inversions:
    none         one          one          two          two         three
Correction factor:
     +1           -1           -1           +1           +1           -1
</font></pre>
In J the determinant function is defined as <code>det=: -/ . *</code>
which, applied to the three-by-three matrix (that is, table) of
Gullberg's example yields the following 
results:<pre>   det=: -/ . *
   A=:  2 3 4,.0 1 2,.4 0 2
   A
2 0 4
3 1 0
4 2 2
   det A
12</pre>
Gullberg notes the following properties:<blockquote>
The value of a determinant is reversed in sign if any two
rows are interchanged.<p>

Multiplying all entries of any row multiplies the determinant
by the same factor.

<p>The area of a triangle is one-half the 
absolute value of the determinant of 
the matrix obtained by bordering the three-by-two 
table of its coordinates by a column of <i>ones</i>.</blockquote>
For example:<pre>   (1 A. A);(det 1 A. A);(det A)
+-----+---+--+
|2 0 4|   |  |
|4 2 2|_12|12|
|3 1 0|   |  |
+-----+---+--+
   (1 3 1 * A);(det 1 3 1 * A);(3 * det A)
+-----+--+--+
|2 0 4|  |  |
|9 3 0|36|36|
|4 2 2|  |  |
+-----+--+--+
   (2 3 4 * A);(det 2 3 4 * A);((*/2 3 4)*det A)
+------+---+---+
| 4 0 8|   |   |
| 9 3 0|288|288|
|16 8 8|   |   |
+------+---+---+
   triangle=: 3 2$3 _2 , _4 1 , 8 3
   bt=: triangle,.1
   triangle;bt;(det bt);(1 A. bt);(det 1 A. bt)
+-----+-------+---+-------+--+
| 3 _2| 3 _2 1|   | 3 _2 1|  |
|_4  1|_4  1 1|_50| 8  3 1|50|
| 8  3| 8  3 1|   |_4  1 1|  |
+-----+-------+---+-------+--+</pre>
The last result agrees with Gullberg's statement that
the <i>absolute value</i> of the determinant yields twice
the area of the triangle. But, more generally, the determinant
yields a <i>signed</i> area that indicates whether the
vertices of the triangle (when plotted) occur in
clockwise or counter-clockwise order.
<p>Similarly, the tetrahedron specified by a four-by-three
table of points in three dimensions may be bordered by ones
and subjected to the determinant to yield six times (<code>!3</code>)
its signed volume. For example:<pre>   ]tet=: 4 3$0 0 0 , 1 0 0 , 0 1 0 , 0 0 1
0 0 0
1 0 0
0 1 0
0 0 1
   det tet,.1
_1
   ]tet2=: ?. 4 3$10
1 7 4
5 2 0
6 6 9
3 5 8
   det tet2,.1
_106</pre>
<b>LOGARITHMS</b>
On page 154 Gullberg says:<blockquote>
that is, a <b>logarithm</b> is an <b>exponent</b>
which defines to what power the <b>base</b> <i>a</i>
must be raised in order to give <i>x</i>, called the
<b>anti-logarithm</b>.<p>The following practicable 
systems of logarithms are used:
<p>lg <i>x</i> The <b>common</b> logarithm of <i>x</i> 
(to  base 10) (also called log <i>x</i> ...)<p>
ln <i>x</i> The <b>natural</b> logarighm of <i>x</i> (to base e)<p>
lb <i>x</i> The <b>binary</b> logarithm of <i>x</i> (to base 2)<p>
log<sub>a</sub> <i>x</i> The logarithm of <i>x</i> to the base <i>a</i>
(also called <sup><i>a</i></sup>log <i>x</i>, especially
in older texts)
</blockquote>In J the function <code>a with ^.</code> gives
the base <code>a</code> logarithm, and the function <code>^.</code>
(or <code>1x1 with ^.</code>) gives the natural log. 
Hence:<pre>   ln=: ^.
   log=: 10 with ^.
   lb=: 2 with ^.
   x=: 1 2 4 10 100
   ln x
0 0.693147 1.38629 2.30259 4.60517
   log x
0 0.30103 0.60206 1 2
   lb x
0 1 2 3.32193 6.64386
   ln -1 2 4 10
0j3.14159 0.693147j3.14159 1.38629j3.14159 2.30259j3.14159 
   ^ ln -x
_1 _2 _4 _10 _100
   log -x
0j1.36438 0.30103j1.36438 0.60206j1.36438 1j1.36438 2j1.36438
   10 ^ log -x
_1 _2 _4 _10 _100</pre>
<b>THE PEANO AXIOMS</b>
On page 157 Gullberg says:<blockquote>The natural numbers were 
axiomatically defined in 1899 by <b>Giuseppe Peano</b> in
his ... Later, Peano modified his axioms to include 
also zero:<p>1. Zero is a number.<p>2. Every natural number or 
zero, <i>a</i>, has an immediate successor <i>a</i> + 1. </blockquote>
The treatment in our Chapter 1 is based on Peano's original
formulation (which did not include zero as a natural number), and
denotes Peano's successor function by <code>&gt;:</code> (and its
inverse, the predecessor, by <code>&lt;:</code>).


<h3><a name="20C."></a><a href="#20: Further Topics">20C. Concrete Mathematics</a>
<a href="#S20C."><font size="-1">S20C.</font></a></h3>
The text <i>Concrete Mathematics</i> [2] will be referred to as GKP, and 
will be discussed together with commentary on it (expressed in J)
from <i>Concrete Math Companion</i> [21], to be referred to as CMC.
<p><b>GENERATING FUNCTIONS and TAYLOR SERIES</b> In Section 7.2 
GKP states: <blockquote>Our generic generating function
has the form <p> G(z) = g<sub>0</sub> + g<sub>1</sub>z + g<sub>2</sub>z<sup>2</sup>
+ ...    (7.12)<p> and we say that G(z), or G for short, is
the generating function for the sequence 
&lt;g<sub>0</sub>,g<sub>1</sub>,g<sub>2</sub>, ...&gt;, which we also call
&lt;g<sub>n</sub>&gt;. The coefficient g<sub>n</sub>
of z<sup>n</sup> in G(z) is sometimes denoted [z<sup>n</sup>]G(z).

</blockquote>In Section 7B, CMC discusses this as follows:<blockquote>
In GKP7.12 the limit (as <code>n</code> approaches infinity) of the 
polynomial <code>G=. (g i.n) p. ]</code> is defined to be the 
<i>generating function</i> for the function <code>g</code>.
In other words, <code>g k</code> is the <code>k</code>th element
of the Taylor series for <code>g</code>.<p> For example, the
functions for the exponential, sine, and the product of the sine and the
exponential may be generated as follows:<pre>      gex=. ^ t.
     gsin=. 1&amp;o. t.
   gsinex=. (1&amp;o. * ^) t.
   ]ce=. gex i. 8
1 1 0.5 0.166667 0.0416667 0.00833333 0.00138889 0.000198413
   ]cs=. gsin i.8
0 1 0 _0.166667 0 0.00833333 0 _0.000198413
   ]cse=. gsinex i. 8
0 1 1 0.333333 0 _0.0333333 _0.0111111 _0.0015873</pre>
</blockquote><b>SUBSCRIPTS VERSUS FUNCTIONS</b> In Section
2.1 GKP states that:<blockquote>We'll be working with sums of the general form
<p> a<sub>1</sub> + a<sub>2</sub> +...+ a<sub>n</sub>
<p>where each a<sub>k</sub> is a number that 
has been defined somehow.

</blockquote>
In Section 2A, CMC discusses this as follows:
<blockquote>We will therefore treat <code>a</code>
as a function, and the list of indices as a second
function, typically <code>i.</code> or the
function <code>Ei=. i.@&gt;: </code>. For example<pre>   Ei=. i.@&gt;:
   Ei 5
0 1 2 3 4 5
   a=. *:
   a Ei 5
0 1 4 9 16 25
   +/ a Ei 5
55</pre>
</blockquote>

<b>STIRLING NUMBERS</b> In Section 6.1, GKP defines Stirling
Numbers of the first and second kind 
by:<blockquote>...the number of ways to arrange n objects into k 
cycles<p>...the number of ways to partition a set of n things into k
nonempty subsets</blockquote>
and provides tables of them in <b>Table 245</b> and <b>Table 244</b>.
<p>In Section 5F, CMC introduces the falling factorial
function <code>^!._1</code> and uses it to define the
Stirling numbers as matrices that provide
the coefficients for linear transformations between the
coefficients of certain important polynomials.
<p>The required transformation matrices are given by:<pre>   s1=: |: on ((i. ^!._1/ i.) %. (i. ^/ i.))
   s2=: %. on s1
   (s1;s2) 8r1
+--------------------------------+-----------------------+
|1    0     0    0    0   0   0 0|1 0  0   0   0   0  0 0|
|0    1     0    0    0   0   0 0|0 1  0   0   0   0  0 0|
|0   _1     1    0    0   0   0 0|0 1  1   0   0   0  0 0|
|0    2    _3    1    0   0   0 0|0 1  3   1   0   0  0 0|
|0   _6    11   _6    1   0   0 0|0 1  7   6   1   0  0 0|
|0   24   _50   35  _10   1   0 0|0 1 15  25  10   1  0 0|
|0 _120   274 _225   85 _15   1 0|0 1 31  90  65  15  1 0|
|0  720 _1764 1624 _735 175 _21 1|0 1 63 301 350 140 21 1|
+--------------------------------+-----------------------+</pre>
Functions to provide Tables 245 and 244 of GkP are defined
in terms of these as follows<pre>   S1=: | on s1
   S2=: s2
   (S1;S2) 8r1
+----------------------------+-----------------------+
|1   0    0    0   0   0  0 0|1 0  0   0   0   0  0 0|
|0   1    0    0   0   0  0 0|0 1  0   0   0   0  0 0|
|0   1    1    0   0   0  0 0|0 1  1   0   0   0  0 0|
|0   2    3    1   0   0  0 0|0 1  3   1   0   0  0 0|
|0   6   11    6   1   0  0 0|0 1  7   6   1   0  0 0|
|0  24   50   35  10   1  0 0|0 1 15  25  10   1  0 0|
|0 120  274  225  85  15  1 0|0 1 31  90  65  15  1 0|
|0 720 1764 1624 735 175 21 1|0 1 63 301 350 140 21 1|
+----------------------------+-----------------------+</pre> 


<h3><a name="20D."></a><a href="#20: Further Topics">20D. Computer Resources</a>
<a href="#S20D."><font size="-1">S20D.</font></a></h3>
<b>LABORATORIES</b> Clicking the mouse on the menu item marked "Studio"
shows a menu that allows the selection of either 
"Labs" or "Demos". Clicking on "Labs" provides an
opportunity to choose a variety of topics.<P>
These topics are presented as labs in the sense that,
at any point in the presentation, you may enter your
own J expressions to experiment with the ideas presented. Or
you may use the facilities described in Section 4B to
capture and revise expressions already used in the presentation
or in your own experiments.
<p>For example, choosing "Fractals, Visualization, &amp; J" leads
to a function which, applied repeatedly to the one-element 
list <code>,1</code>, produces a matrix with an interesting
pattern. Moreover, it provides a function <code>viewmat</code>
that plots a view of the matrix as a grid of black and white
elements. Thus:<pre>   f=: ,~ ,.~
   f ,1
1 1
1 0
   f f ,1
1 1 1 1
1 0 1 0
1 1 0 0
1 0 0 0
   f f f ,1
1 1 1 1 1 1 1 1
1 0 1 0 1 0 1 0
1 1 0 0 1 1 0 0
1 0 0 0 1 0 0 0
1 1 1 1 0 0 0 0
1 0 1 0 0 0 0 0
1 1 0 0 0 0 0 0
1 0 0 0 0 0 0 0

   load 'graph numeric trig'
   viewmat f f f f f f f f ,1</pre>
   <img src="gr20d1.jpg" border=0 alt=""><p>
<b>DEMONSTRATIONS</b> The demos include a game (called Pousse), a table of
distances between major cities, and numerous graphical displays
of objects in two and three dimensions. By choosing the
Definition option in some displays you may study, and even
modify, the programs that produce them.<p>
<b>DICTIONARY DEFINITIONS</b> Further information about J may
be obtained from the Help menu as described in Section 4B, but
definitions may also be obtained more directly by pressing
key F1 to display the vocabulary, and then clicking on
the desired item.<p>

For example, selecting the item <code>o.</code> will
show that the definition of the function <code>0 with o.</code> (used
to graph circles in Sections 3B and 18B) is the square root of
one minus the square.<p>

A definition may also be displayed by placing the cursor immediately
to the left of a symbol on the screen and pressing F1 while 
holding down the CONTROL key.


<h3><a name="20E."></a><a href="#20: Further Topics">20E. Conclusion</a>
<a href="#S20E."><font size="-1">S20E.</font></a></h3>
Study of this book will not make a mathematician, but we hope
that the use of precise executable language possessing a
simple strict grammar will further the cause stated by Hogben in our preface
(and repeated here):
<blockquote><font size="-1">
<p>The view which we shall explore is that mathematics is the 
language of size, shape and order and that it is an essential 
part of the equipment of an intelligent citizen to 
understand this language. If the rules of mathematics are 
the rules of grammar, there is no stupidity involved when 
we fail to see that a mathematical truth is obvious. The rules 
of ordinary grammar are not obvious. They have to be learned. 
They are not eternal truths. They are conveniences without 
whose aid truths about the sorts of things in the 
world cannot be communicated from one person to another.
</blockquote></font>
Perhaps the most important lesson for the layman is that
there is no need to be intimidated by mathematics or
mathematicians. On this matter, we give the final
word to Hogben:
<font size="-1">
<blockquote>There is a story about Diderot, the Encyclopaedist 
and materialist, a foremost figure in the intellectual awakening
which immediately preceded the French Revolution. Diderot
was staying at the Russian court, where his elegant flippancy
was entertaining the nobility. Diderot was informed that a
mathematician had established a proof of the existence of God.<p> 

 .......
<p>Before the assembled court, Euler accosted him with the following
pronouncement, which was uttered with due gravity:</font>
<pre><i>         a+b<sup>n</sup>
       ------- = x</i>, donc Dieu existe, repondez!
         <i> n</i></pre><font size="-1">
Algebra was Arabic to Diderot. Unfortunately, he did not 
realize that was the trouble. Had he realized that algebra 
was just a language in which we describe the <i>sizes</i> of
things, ... he would have asked Euler to
translate ... into French.<p> ....... <p>Like many of us, Diderot 
had stagefright when confronted with a sentence in size language. 
He left the court abruptly amid the titters of the assembly, 
confined himself to his chambers, demanded a safe conduct, and
promptly returned to France.</font></blockquote>


<div align="center">
<h3><a name="Supplement"></a><a href="#MATH">Supplement</a></h3></div>


<a name="S1A."></a>
<h3><a href="#1A.">S1A. The Counting (Natural) Numbers</a></h3>

This definition of the counting numbers in terms of a <i>successor</i>
function was made in 1899 by Giuseppe Peano. For further details,
see the discussion in Section 20B, and the Gullberg text to which
it refers.

<p>This discussion may be found by first clicking on Chapter 20 in
the list at the beginning of the text, then clicking on Section
20C, and then moving back up the page to the last part of Section 20B. 

<a name="S1B."></a>
<h3><a href="#1B.">S1B. Lists and Names</a></h3>
The function (or verb) denoted by <code>,.</code> can be used to <i>stitch</i>
lists together to form tables, and lists and tables together to form
further tables, as illustrated by the following:
<pre>   a=:1 4 7
   b=:2 5 8
   c=:3 6 9
   
   a,.b
1 2
4 5
7 8
   a,.b,.c
1 2 3
4 5 6
7 8 9
   table=:a,.b,.c
   table,.&gt;:c
1 2 3  4
4 5 6  7
7 8 9 10
   &gt;:table
2 3  4
5 6  7
8 9 10
   table,.&gt;:&gt;:&gt;:table
1 2 3  4  5  6
4 5 6  7  8  9
7 8 9 10 11 12</pre>

The function denoted by <code>,</code> can be used to <i>catenate</i> lists
and tables as illustrated by the following:
<pre>   a,b
1 4 7 2 5 8
   a,b,c
1 4 7 2 5 8 3 6 9
   table,a
1 2 3
4 5 6
7 8 9
1 4 7
   table,&gt;:&gt;:&gt;:&gt;:&gt;:&gt;:&gt;:&gt;:&gt;:table
 1  2  3
 4  5  6
 7  8  9
10 11 12
13 14 15
16 17 18</pre>
The function denoted by <code>|:</code> can be used to <i>transpose</i> a
table as follows:
<pre>   |:table
1 4 7
2 5 8
3 6 9
   |:table,&gt;:c
1 4 7  4
2 5 8  7
3 6 9 10</pre>
Write various expressions employing the functions used in the preceding
examples, and show the results produced.

<a name="S1C."></a>
<h3><a href="#1C.">S1C. Iteration (Repetition)</a></h3>
Write the result of the 
expression <code>next for list list </code>, and compare your
result with that produced by entering it on the computer.
<a name="S1D."></a>
<h3><a href="#1D.">S1D. Inverse</a></>
<a name="S1D."></a></h3>

While we had only the counting numbers (which begin at <code>1</code>), our
lists could contain neither negative numbers nor zero; but now that we
have extended our domain to the integers this restriction is removed. We
may therefore introduce the functions <code>i.</code> and <code>i:</code> that produce
lists of integers as illustrated below:
<pre>   i.5   NB. The first five non-negative integers
0 1 2 3 4

   i:5   NB. The integers from _5 to 5
_5 _4 _3 _2 _1 0 1 2 3 4 5
</pre>
In the foregoing we used <code>NB.</code> which indicates that what follows
it is a note or comment that has no effect on the meaning of the preceding sentence.

<p>The function denoted by <code>+:</code> <i>doubles</i> its argument.
For example:
<pre>   x=:i:5
   x
_5 _4 _3 _2 _1 0 1 2 3 4 5
   +:x
_10 _8 _6 _4 _2 0 2 4 6 8 10
   double=:+:
   double x
_10 _8 _6 _4 _2 0 2 4 6 8 10
   y=:double for 2 x
   y
_20 _16 _12 _8 _4 0 4 8 12 16 20

   double for _1 y  NB. Inverse of double
_10 _8 _6 _4 _2 0 2 4 6 8 10

   double for _1 x
_2.5 _2 _1.5 _1 _0.5 0 0.5 1 1.5 2 2.5
</pre>
Some of the results of the last expression are not integers. Just
as the inverse of the successor function led us out of the domain of
the counting numbers, so the inverse of <code>double</code> has led out
of the domain of integers -- this time into <i>fractions</i> or
<i>rationals</i>. These matters are treated further in Section 1J.

<h3><a href="#1E.">S1E. Addition and Subtraction (+ and -)</a>
<a name="S1E."></a></h3>
Study the following function tables, and try to state the definitions of
each of the functions denoted by <code>= &gt; &lt;. &lt;: |</code> and <code>!</code>
<p>Compare your definitions with those given below.
<pre>   a=:i.6
   a
0 1 2 3 4 5
   =table a
+-+-----------+
| |0 1 2 3 4 5|
+-+-----------+
|0|1 0 0 0 0 0|
|1|0 1 0 0 0 0|
|2|0 0 1 0 0 0|
|3|0 0 0 1 0 0|
|4|0 0 0 0 1 0|
|5|0 0 0 0 0 1|
+-+-----------+

   (=table a),.(&gt;table a),.(&lt;.table a)
+-+-----------+-+-----------+-+-----------+
| |0 1 2 3 4 5| |0 1 2 3 4 5| |0 1 2 3 4 5|
+-+-----------+-+-----------+-+-----------+
|0|1 0 0 0 0 0|0|0 0 0 0 0 0|0|0 0 0 0 0 0|
|1|0 1 0 0 0 0|1|1 0 0 0 0 0|1|0 1 1 1 1 1|
|2|0 0 1 0 0 0|2|1 1 0 0 0 0|2|0 1 2 2 2 2|
|3|0 0 0 1 0 0|3|1 1 1 0 0 0|3|0 1 2 3 3 3|
|4|0 0 0 0 1 0|4|1 1 1 1 0 0|4|0 1 2 3 4 4|
|5|0 0 0 0 0 1|5|1 1 1 1 1 0|5|0 1 2 3 4 5|
+-+-----------+-+-----------+-+-----------+

   (&lt;:table a),.(|table a),.(!table a)
+-+-----------+-+-----------+-+------------+
| |0 1 2 3 4 5| |0 1 2 3 4 5| |0 1 2 3 4  5|
+-+-----------+-+-----------+-+------------+
|0|1 1 1 1 1 1|0|0 1 2 3 4 5|0|1 1 1 1 1  1|
|1|0 1 1 1 1 1|1|0 0 0 0 0 0|1|0 1 2 3 4  5|
|2|0 0 1 1 1 1|2|0 1 0 1 0 1|2|0 0 1 3 6 10|
|3|0 0 0 1 1 1|3|0 1 2 0 1 2|3|0 0 0 1 4 10|
|4|0 0 0 0 1 1|4|0 1 2 3 0 1|4|0 0 0 0 1  5|
|5|0 0 0 0 0 1|5|0 1 2 3 4 0|5|0 0 0 0 0  1|
+-+-----------+-+-----------+-+------------+</pre>

<code>=</code> is a <i>truth function</i> that compares its arguments for
equality, giving <code>1</code> if the relation is true, and <code>0</code>
if it is false.<p>
<code>&gt;</code> is a truth function called <i>greater than</i>.<p>

<code>&lt;.</code> is called <i>lesser-of</i> or <i>minimum</i>.

<p><code>&lt;:</code> is a truth function called <i>less than or equal</i>.

<p><code>|</code> is <i>remainder</i> on dividing by the left argument.

<p><code>!</code> is the <i>binomial coefficient</i> (<code>m!n</code>
is the number of different ways of choosing <code>m</code> things from <code>n</code> things).
This table is commonly shown without the zeros, and called <i>Pascal's Triangle</i>.

<a name="S1F."></a>
<h3><a href="#1F.">S1F. Bonding</a></h3>
Apply the bond (<code>with=:&amp;</code>) to some of the functions 
<code>= &lt; &gt;. &lt;: |</code> introduced in Section S1E, and show
their results. Compare your results with the following:
<pre>   with=: &amp;
   
   a=:i:3
   a
_3 _2 _1 0 1 2 3
   
   = with 2 a
0 0 0 0 0 1 0
   
   &lt; with 2 a
1 1 1 1 1 0 0
   
   &lt;: with 2 a
1 1 1 1 1 1 0
   
   &lt;. with 2 a
_3 _2 _1 0 1 2 2
   
   2 with | a
1 0 1 0 1 0 1
   
   3 with | a
0 1 2 0 1 2 0</pre>


<a name="S1G."></a>
<h3><a href="#1G.">S1G. Multiplication or Times (*)</a></h3>

Comment on the pattern of positive and negative numbers in the four
quadrants defined by the row and column of zeros in the
following multiplication table:
<pre>   * table i:4
+--+-----------------------------+
|  | _4  _3 _2 _1 0  1  2   3   4|
+--+-----------------------------+
|_4| 16  12  8  4 0 _4 _8 _12 _16|
|_3| 12   9  6  3 0 _3 _6  _9 _12|
|_2|  8   6  4  2 0 _2 _4  _6  _8|
|_1|  4   3  2  1 0 _1 _2  _3  _4|
| 0|  0   0  0  0 0  0  0   0   0|
| 1| _4  _3 _2 _1 0  1  2   3   4|
| 2| _8  _6 _4 _2 0  2  4   6   8|
| 3|_12  _9 _6 _3 0  3  6   9  12|
| 4|_16 _12 _8 _4 0  4  8  12  16|
+--+-----------------------------+
</pre>
The idea of multiplication can be introduced at an elementary level
by pictures of rectangles. For example:
<pre>   a=:3 4 $ 1
   a
1 1 1 1
1 1 1 1
1 1 1 1
   ,a
1 1 1 1 1 1 1 1 1 1 1 1
   +/,a
12
   +/a
3 3 3 3
   +/+/a
12

   b=:|:a
   b
1 1 1
1 1 1
1 1 1
1 1 1
   ,b
1 1 1 1 1 1 1 1 1 1 1 1
   +/,b
12
   +/b
4 4 4
   +/+/b
12
</pre>

Discussion of the notation used here (such as <code>$</code>)
may be found in Sections 2E and 2F.

<p>In his imaginative and persuasive <i>Vision in Elementary
Mathematics</i> [22], W.W. Sawyer uses similar (hand-drawn)
pictures to introduce elementary concepts in arithmetic and
algebra, clarifying the ideas by "translating" from pictures
to notation and back.

<p>Sawyer's pictures do not even require the somewhat abstract
notion of the numeral <code>1</code> used above, but uses dots:
<pre>   c=: a { ' .'
   c
....
....
....
   |:c
...
...
...
...
   c='.'
1 1 1 1
1 1 1 1
1 1 1 1
   +/+/c='.'
12</pre>

Moreover, he draws a tied bag (rather similar to &amp;) to denote
an unknown quantity, and translates to algebraic expressions
that denote unknowns by letters such as <i>x</i> and <i>y</i>.
For example:<pre>   g=:'&amp;&amp;...'
   g
&amp;&amp;...</pre>
translates to <code>2<i>x</i>+3</code>.

<p>Addition is shown as:
<pre>   g,g
&amp;&amp;...&amp;&amp;...</pre>

which is denoted by <code>(2<i>x</i>+3)+(2<i>x</i>+3)</code> and
is (pictorially) equivalent to that shown above, or to 
<code>&amp;&amp;&amp;&amp;......</code> which, in turn, translates
to <code>4<i>x</i>+6</code>.

<a name="S1H."></a>
<h3><a href="#1H.">S1H. Power and Exponent</a></h3>
See Section S1J for an extension of the power table to negative arguments.

<a name="S1I."></a>
<h3><a href="#1I.">S1I. Monomials and Polynomials (p.)</a></h3>

Write various expressions using the polynomial function <code>p.</code> and
show the results they produce. Include cases with negative coefficients and 
negative arguments, and compare your results with the following:
<pre>   b=:i:4
   b
_4 _3 _2 _1 0 1 2 3 4
   
   1 3 3 1 p. b
_27 _8 _1 0 1 8 27 64 125
   
   _1 3 _3 1 p. b
_125 _64 _27 _8 _1 0 1 8 27
   
   (b-1)^3
_125 _64 _27 _8 _1 0 1 8 27
   
   1 _4 6 _4 1 p. b
625 256 81 16 1 0 1 16 81
   
   (b-1)^4
625 256 81 16 1 0 1 16 81</pre>

<a name="S1J."></a>
<h3><a href="#1J.">S1J. Division (%)</a></h3>

Comment on the pattern in the rows and columns of the division table. Then
make a division table for both positive and negative arguments, and compare 
your results with the following:
<pre>   c=:i:5r1
   c
_5 _4 _3 _2 _1 0 1 2 3 4 5

   %table c
+--+------------------------------------------------+
|  |  _5   _4   _3   _2 _1  0  1    2    3    4    5|
+--+------------------------------------------------+
|_5|   1  5r4  5r3  5r2  5 __ _5 _5r2 _5r3 _5r4   _1|
|_4| 4r5    1  4r3    2  4 __ _4   _2 _4r3   _1 _4r5|
|_3| 3r5  3r4    1  3r2  3 __ _3 _3r2   _1 _3r4 _3r5|
|_2| 2r5  1r2  2r3    1  2 __ _2   _1 _2r3 _1r2 _2r5|
|_1| 1r5  1r4  1r3  1r2  1 __ _1 _1r2 _1r3 _1r4 _1r5|
| 0|   0    0    0    0  0  0  0    0    0    0    0|
| 1|_1r5 _1r4 _1r3 _1r2 _1  _  1  1r2  1r3  1r4  1r5|
| 2|_2r5 _1r2 _2r3   _1 _2  _  2    1  2r3  1r2  2r5|
| 3|_3r5 _3r4   _1 _3r2 _3  _  3  3r2    1  3r4  3r5|
| 4|_4r5   _1 _4r3   _2 _4  _  4    2  4r3    1  4r5|
| 5|  _1 _5r4 _5r3 _5r2 _5  _  5  5r2  5r3  5r4    1|
+--+------------------------------------------------+</pre>
Comment on the patterns in the following extension of the power table
to negative arguments. In particular, note the value of <code>0^0</code> (which
may have surprised you in the power table in Section 1H). 
<p>For further justification of the choice of <code>1</code> for
the value of the "indeterminate" expression <code>0^0</code>, see
page 785 of Gullberg [20].
<pre>   ^table c
+--+-----------------------------------------------------+
|  |     _5    _4     _3   _2   _1 0  1  2    3   4     5|
+--+-----------------------------------------------------+
|_5|_1r3125 1r625 _1r125 1r25 _1r5 1 _5 25 _125 625 _3125|
|_4|_1r1024 1r256  _1r64 1r16 _1r4 1 _4 16  _64 256 _1024|
|_3| _1r243  1r81  _1r27  1r9 _1r3 1 _3  9  _27  81  _243|
|_2|  _1r32  1r16   _1r8  1r4 _1r2 1 _2  4   _8  16   _32|
|_1|     _1     1     _1    1   _1 1 _1  1   _1   1    _1|
| 0|      _     _      _    _    _ 1  0  0    0   0     0|
| 1|      1     1      1    1    1 1  1  1    1   1     1|
| 2|   1r32  1r16    1r8  1r4  1r2 1  2  4    8  16    32|
| 3|  1r243  1r81   1r27  1r9  1r3 1  3  9   27  81   243|
| 4| 1r1024 1r256   1r64 1r16  1r4 1  4 16   64 256  1024|
| 5| 1r3125 1r625  1r125 1r25  1r5 1  5 25  125 625  3125|
+--+-----------------------------------------------------+
</pre>


<a name="S1K."></a>
<h3><a href="#1K.">S1K. Review and Supplement</a></h3>

Experiment with moving around in the text as follows:

<p>Click on any one of the Chapters listed at the beginning of the text, and
then click on the chapter heading to return to the list of chapters.

<p>Click on any one of the Sections listed at the beginning of
the selected chapter, and then click on the Section heading to return to the chapter.

<p>Again select a chapter and a section within it. Then click on the
label beginning with S that appears to the right of the section heading.

<p>Click on the heading of the supplemental section to return to
the corresponding main section.

<a name="S1L."></a>
<h3><a href="#1L.">S1L. Notes</a></h3>


<a name="S2A."></a>
<h3><a href="#2A.">S2A. Introduction</a></h3>

To gain further familiarity with the computer, enter some of the expressions from the
supplemental sections for Chapter 1.

<a name="S2B."></a>
<h3><a href="#2B.">S2B. Number of places</a></h3>

The <code>!:</code> used in the expression <code>set=:9!:11</code> to
define the function for setting the number of digits displayed
is called the <i>foreign conjunction</i>, because it concerns matters other than
the normal verbs such as <code>+ *</code> and <code>%</code>.

<p>Click on the Help menu to display the items for which information is
available. Then click on Foreign Conjunction, and then on item 9 to see the
case used in defining <code>set</code>. Also click on the button marked &gt;&gt; to
see further pages.

<p>Finally press the Escape key (Esc) to remove the Help display.


<a name="S2C."></a>
<h3><a href="#2C.">S2C. Displays</a></h3>Sawyer [22] emphasizes
the use of trees and tables for insight, and introduces an
interesting non-numeric table as follows:
<blockquote>In the Japanese Hiragana alphabet, each character
represents a sound such as <i>ka, ru, si, or o</i>. There are 10
possible beginnings - the consonants k, s, t, n, m, y, r, w, and 
'blank'; ... The ending is always one one of the five sounds
a, e, i, o, u. How many characters are there in this alphabet? 
We could show this as a tree with 10 branches and 5
twigs on each ... This problem could equally well be solved by 
the rectangle ...</blockquote>
<pre>   Beginnings=:' KSTNHMYRW'
      Endings=:'aeiou'
   
   { Beginnings;Endings
+--+--+--+--+--+
| a| e| i| o| u|
+--+--+--+--+--+
|Ka|Ke|Ki|Ko|Ku|
+--+--+--+--+--+
|Sa|Se|Si|So|Su|
+--+--+--+--+--+
|Ta|Te|Ti|To|Tu|
+--+--+--+--+--+
|Na|Ne|Ni|No|Nu|
+--+--+--+--+--+
|Ha|He|Hi|Ho|Hu|
+--+--+--+--+--+
|Ma|Me|Mi|Mo|Mu|
+--+--+--+--+--+
|Ya|Ye|Yi|Yo|Yu|
+--+--+--+--+--+
|Ra|Re|Ri|Ro|Ru|
+--+--+--+--+--+
|Wa|We|Wi|Wo|Wu|
+--+--+--+--+--+
</pre>
The <i>catalogue</i> function (<code>{</code>) used above may
be further illustrated as follows:

<pre>   { 0 1 2;0 1 2;0 1 2
+-----+-----+-----+
|0 0 0|0 0 1|0 0 2|
+-----+-----+-----+
|0 1 0|0 1 1|0 1 2|
+-----+-----+-----+
|0 2 0|0 2 1|0 2 2|
+-----+-----+-----+

+-----+-----+-----+
|1 0 0|1 0 1|1 0 2|
+-----+-----+-----+
|1 1 0|1 1 1|1 1 2|
+-----+-----+-----+
|1 2 0|1 2 1|1 2 2|
+-----+-----+-----+

+-----+-----+-----+
|2 0 0|2 0 1|2 0 2|
+-----+-----+-----+
|2 1 0|2 1 1|2 1 2|
+-----+-----+-----+
|2 2 0|2 2 1|2 2 2|
+-----+-----+-----+

   { 'cht';'oa';'gtw'
+---+---+---+
|cog|cot|cow|
+---+---+---+
|cag|cat|caw|
+---+---+---+

+---+---+---+
|hog|hot|how|
+---+---+---+
|hag|hat|haw|
+---+---+---+

+---+---+---+
|tog|tot|tow|
+---+---+---+
|tag|tat|taw|
+---+---+---+</pre>

<a name="S2D."></a>
<h3><a href="#2D.">S2D. Integer Lists</a></h3>

Explain the difference between the following tables:
<pre>   %table i:4
+--+--------------------------------------------------+
|_4|    1   1.33333    2  4 __ _4   _2  _1.33333    _1|
|_3| 0.75         1  1.5  3 __ _3 _1.5        _1 _0.75|
|_2|  0.5  0.666667    1  2 __ _2   _1 _0.666667  _0.5|
|_1| 0.25  0.333333  0.5  1 __ _1 _0.5 _0.333333 _0.25|
| 0|    0         0    0  0  0  0    0         0     0|
| 1|_0.25 _0.333333 _0.5 _1  _  1  0.5  0.333333  0.25|
| 2| _0.5 _0.666667   _1 _2  _  2    1  0.666667   0.5|
| 3|_0.75        _1 _1.5 _3  _  3  1.5         1  0.75|
| 4|   _1  _1.33333   _2 _4  _  4    2   1.33333     1|
+--+--------------------------------------------------+
   %table i:4r1
+--+--------------------------------------+
|  |  _4   _3   _2 _1  0  1    2    3    4|
+--+--------------------------------------+
|_4|   1  4r3    2  4 __ _4   _2 _4r3   _1|
|_3| 3r4    1  3r2  3 __ _3 _3r2   _1 _3r4|
|_2| 1r2  2r3    1  2 __ _2   _1 _2r3 _1r2|
|_1| 1r4  1r3  1r2  1 __ _1 _1r2 _1r3 _1r4|
| 0|   0    0    0  0  0  0    0    0    0|
| 1|_1r4 _1r3 _1r2 _1  _  1  1r2  1r3  1r4|
| 2|_1r2 _2r3   _1 _2  _  2    1  2r3  1r2|
| 3|_3r4   _1 _3r2 _3  _  3  3r2    1  3r4|
| 4|  _1 _4r3   _2 _4  _  4    2  4r3    1|
+--+--------------------------------------+</pre>

<a name="S2E."></a>
<h3><a href="#2E.">S2E. Vocabulary </a></h3>

The Vocabulary provides <i>two</i> definitions for the symbol <code>-</code>;
one (called Negate) for use with one argument,
and the other (called Minus) for use with two arguments. For example:
<pre>   - i.7    NB. Monadic use
0 _1 _2 _3 _4 _5 _6
   
   3 - i.7  NB. Dyadic use
3 2 1 0 _1 _2 _3
</pre>
Other functions also have both monadic and dyadic cases. For example, <code>a * b</code>
denotes the product of <code>a</code> and <code>b</code>, while <code>*b</code> denotes
the <i>sign</i> of <code>b</code>.
<p>A deinition may be displayed directly without displaying the Vocabulary: simply
place the cursor just to the left of the symbol, and press F1 while holding down the 
control key (Ctrl).

<a name="S2F."></a>
<h3><a href="#2F.">S2F. Functions over lists</a></h3>

Just as the <i>over</i> adverb <code>/</code> modifies a verb to which it applies,
the <i>prefix</i> adverb <code>\</code> modifies its argument verb, applying 
it to each prefix of the eventual argument. For example:
<pre>   a=:1 2 3 4 5
   +/a
15
   
   +/\a
1 3 6 10 15
   
   sum=:+/
   sum\a
1 3 6 10 15
   
   (sum 1),(sum 1 2),(sum 1 2 3),(sum 1 2 3 4),(sum 1 2 3 4 5)
1 3 6 10 15
   
   b=:1 2 3 4 5 6r1
   
   */\b
1 2 6 24 120 720
   
   !b
1 2 6 24 120 720
   
   %/\b
1 1r2 3r2 3r8 15r8 5r16</pre>

Consulting the Vocabulary if necessary, state the results of
the following expressions, and check your results by executing them
on the computer:

<pre>   c=:18 3 96 17 24 12
   &lt;./c

   &lt;./\c

   &gt;./\c

   +./c

   +./\c

   c % +./\c

   *./\c

   (*./\c) % c</pre>

<a name="S2G."></a>
<h3><a href="#2G.">S2G. Notes</a></h3>



<a name="S3A."></a>
<h3><a href="#3A.">S3A. Plotting</a></h3>

The <i>link</i> function (denoted by <code>;</code>) used in the expression
<code>PLOT x;f x</code> in Section 3A <i>boxes</i> its arguments and
catenates them to form a two-element list. Together with the <i>laminate</i>
function also introduced in Section 3A and the <code>,</code> and
<code>,.</code> introduced in Section S1B, they provide four ways
of forming lists and tables.

<p>Experiment with their joint use, employing the <i>shape</i> function
<code>$</code> to examine the shapes of results.

<a name="S3B."></a>
<h3><a href="#3B.">S3B. Local behaviour and area</a></h3>

Use the Vocabulary to examine the definition of the <i>circle</i>
function <code>o.</code> used in Section 3 B. In particular,
experiment with the monadic case in expressions such as
<code>o.1</code> and <code>o.2</code> and <code>o.1r2 </code>.

<p>Examine a plot of the sine function (<code>sin=:1 with o.</code>) 
to determine the approximate area under one of its arches. Then define 
<code>cos=:2 with o.</code> and use <code>plot</code>
to plot each of <code>sin</code> and <code>cos</code> against the argument, 
and against one another.

<p>Look up the definition of <code>+:</code> (the double function) and plot
<code>sin on +:</code> against <code>sin</code> .

<p>Finally, plot <code>5 with o.</code> against <code>6 with o.</code> on 
the argument <code>1r12*i:10</code> to draw a hyperbola.

<a name="S3C."></a>
<h3><a href="#3C.">S3C. Graphs versus function tables</a></h3>


<ol><li>Determine the pairwise differences of various polynomials, including
<code>0 0 1 with p.</code> and <code>2 0 1 with p.</code> and <code>1 4 6 4 1 with p.</code> .
</ol><p>


<a name="S3D."></a>
<h3><a href="#3D.">S3D. Notes</a></h3>

<a name="S4A."></a>
<h3><a href="#4A.">S4A. Bonding</a></h3>


<ol><li>If the lists <code>c</code> and <code>d</code> are the same length
(that is, have the same number of elements), then the polynomial <code>(c+d) with p.</code>
is equivalent to the sum <code>c with p. + d with p.</code> . If one is shorter
than the other, it must be extended by trailing zeros before adding it.<p>
Test this assertion for various values of <code>c</code> and <code>d</code>.<p>
<li>A coefficient list that has a single non-zero element defines a polynomial 
that is a multiple of a power of its argument. In other words, it defines a
<i>monomial</i> in the sense defined in Section 1I. For example:
<pre>   with=:&amp;
   x=:i:4
   x
_4 _3 _2 _1 0 1 2 3 4
   0 0 1 with p. x
16 9 4 1 0 1 4 9 16
   x^2
16 9 4 1 0 1 4 9 16
   0 0 3 with p. x
48 27 12 3 0 3 12 27 48
   3*x^2
48 27 12 3 0 3 12 27 48</pre>
<p><li>If <code>e</code> is the diagonal sum(s) of the multiplication table
<code>c */ d</code>, then the function <code>e with p.</code> is
equivalent to the product <code>g=: c with p. * d with p. </code>. Test
this assertion for various values of the coefficients <code>c</code> and
<code>d</code>.

<p><li>The expression <code>1 1 with p. x</code> yields the result 
<code>1+x</code>, and <code>(1 1 with p. * 1 1 with p.) x</code>
yields <code>(1+x)^2</code>. Determine (by hand and by computer) the
coefficients of polynomials equivalent to further powers of <code>1+x</code>.
Compare your results with the table of binomial coefficients <code>!table i.8</code>.

<p><li>As shown in Section 6B, the list <code>d</code> obtained by multiplying a list of
coefficients <code>c</code> by its indices <code>i.#c</code> and then deleting
the leading element gives the polynomial <code>d with p.</code> that is the
<i>derivative</i> or <i>rate of change</i> of the function <code>c with p. </code>. Thus:
<pre>   c=:1 2 1
   c
1 2 1
   i.#c
0 1 2
   c*i.#c
0 2 2
   d=:2 2
   x=:i:3
   x
_3 _2 _1 0 1 2 3
   (c with p. ,: d with p.) x
 4  1 0 1 4 9 16
_4 _2 0 2 4 6  8
</pre>

Use the expression <code>PLOT x;(c with p. ,: d with p.) x</code> to plot
the function together with its derivative, and observe that the derivative does
represent the rate of change. Repeat for other polynomials.

<p><li>Use the derivative operator <code>d.1</code> (discussed in Chapter 6) as
illustrated below:
<pre>   c with p. d.1 x
_4 _2 0 2 4 6 8
   c with p. d.1 t. i.5
2 2 0 0 0</pre>

<p><li>The operator <code>d.2</code> gives the <i>second derivative</i>, the 
derivative of the derivative. Experiment with its use.

<p><li>Use the Taylor operator <code>t.</code> to determine the coessicients of sums,
differences, products, and composition of various polynomials.

<p><li>The operator <code>d._1</code> yields the <i>anti-derivative</i> or
<i>integral</i> discussed in Chapter 18. Experiment with its use on various polynomials.

</ol>
<a name="S4B."></a>
<h3><a href="#4B.">S4B. Notes</a></h3>

<a name="S5A."></a>
<h3><a href="#5A.">S5A. Introduction</a></h3>

<ol><li>Press key F1 and use the Vocabulary to select the definitions
of the functions <code>! | _1: 3: ]</code> used in the definition of the
power series function <code>ps</code> . Then experiment with each of the
following "components" of <code>ps</code>, and explain their behaviour:
<pre>   a=:4: | ]
   b=:3: = a
   c=:_1: ^ b
   d=:2 with |
   e=: d * c
   f=:% on !
   g=:f * e
</pre>
</ol>
<a name="S5B."></a>
<h3><a href="#5B.">S5B. Truncated power series</a></h3>

The function <code>pg=:% on !</code> is the power series function for the 
<i>growth</i> or <i>exponential</i> function discussed in Chapter 7. Evaluate,
plot, and otherwise experiment with, its use.

<p>Experiment with the growth function <code>g=:(pg 0 1 2 3 4 5 6) with p.</code>

<a name="S5C."></a>
<h3><a href="#5C.">S5C. Notes</a></h3>

<a name="S6A."></a>
<h3><a href="#6A.">S6A. Approximation to the derivative (rate of change)</a></h3>

<a name="S6B."></a>
<h3><a href="#6B.">S6B. Derivatives of polynomials</a></h3>

<ol><li>Compare the behaviours of the functions:
<pre>   DER=: 1: }. ] * i. on #
   der=: 1: |. ] * i. on #</pre>
Note that their results are equivalent as polynomial coefficients, but
that the latter has the (sometimes convenient) property of yielding a result
with the same number of elements as the argument.

<p><li>The point where the derivative of a function <code>f</code> reaches its lowest
point (and therefore changes from decreasing to increasng) is called a
<i>point of inflection</i> of <code>f</code>. Enter the following expressions, and
comment on the resulting graphs:
<pre>der=: 1: |. ] * i. on #
c=: 4 _3 _2 1
PLOT x2;(c with p.,(der c)with p.,:(der der c)with p.)x2
</pre></ol>

<a name="S6C."></a>
<h3><a href="#6C.">S6C. Taylor coefficients</a></h3>

Experiment with the approximations to the exponential, sine, and cosine functions
and their derivatives given in Section 6C, by applying them to the following argument:
<pre>   x=: i: 1j5
   x
_1 _0.6 _0.2 0.2 0.6 1</pre>

<a name="S6D."></a>
<h3><a href="#6D.">S6D. Notes</a></h3>

<a name="S7A."></a>
<h3><a href="#7A.">S7A. Growth polynomials</a></h3>

Execute the following expressions, and comment on the results:
<pre>   x=:i:2
   x
   ^x
   ^ - x
   %^x
   (^x)*(^-x)
   (^*^ on -) x</pre>

<a name="S7B."></a>
<h3><a href="#7B.">S7B. The name Exponential</a></h3>

<a name="S8A."></a>
<h3><a href="#8A.">S8A. Introduction</a></h3>

Plot the sine and cosine functions together, using the argument <code>y=:i:3j100</code>.

<a name="S8B."></a>
<h3><a href="#8B.">S8B. Harmonics</a></h3>

For a discussion of Harmonic Analysis see Chapter 31 of Gullberg [20].

<a name="S8C."></a>
<h3><a href="#8C.">S8C. Decay</a></h3>

<a name="S9A."></a>
<h3><a href="#9A.">S9A. Inverse</a></h3>
Experiment with the use of the inverse adverb on other functions
in expressions such as:
<pre>   INV=:^:_1
   a=:i.5
   a
0 1 2 3 4
   ^&amp;3 a
0 1 8 27 64
   ^&amp;3 INV a
0 1 1.25992 1.44225 1.5874
   ^&amp;3 ^&amp;3 INV a
0 1 2 3 4
   ^&amp;1r3 a
0 1 1.25992 1.44225 1.5874
   
   ^ a
1 2.71828 7.38906 20.0855 54.5982
   ^INV ^ a
0 1 2 3 4
   
   a+2
2 3 4 5 6
   !a+2
2 6 24 120 720
   ! INV ! a+2
2 3 4 5 6
</pre>

<a name="S9B."></a>
<h3><a href="#9B.">S9B. Equations</a></h3>

Repeat the first few steps of Section 9B to find approximations to the root of
the function <code>g</code> defined therein.

<a name="S9C."></a>
<h3><a href="#9C.">S9C. The method of false position</a></h3>

Define the function <code>g</code> as follows:
<pre>   c=: 4 6 _8 2
   g=: c with p.</pre>
Use the function <code>tighten</code> of Section 9C with the initial bracket 
<code>ab=: _1 1</code> to get approximations to one of the roots of <code>g</code>.

<p>Then use other initial brackets to approximate the other two roots, and apply 
<code>g</code> to the results to confirm that they are indeed (near) roots. Compare
your roots with the result of <code>p. c </code>.

<p>Experiment with other polynomial functions. Note that a polynomial will have
one less root than the number of elements in its coefficient, but that some of them
will be <i>complex</i> in the sense defined in Chapter 19.

<p>The method of false position will find only the <i>real</i> (that is, non-complex)
roots. The result of <code>p. c</code> shows each complex root with a <code>j</code>
separating its <i>real</i> and <i>imaginary</i> parts.

<a name="S9D."></a>
<h3><a href="#9D.">S9D. Newton's method</a></h3>

Apply Newton's method to obtain the roots of various polynomials.

<a name="S9E."></a>
<h3><a href="#9E.">S9E. Roots of Polynomials</a></h3>
Pages 87-88 of Gullberg [20] give a brief history of complex numbers.
Gullberg uses the conventional notation <i>i</i> for 
the <i>imaginary</i> square root of negative one, and <i>a+bi</i>
for the <i>complex</i> number obtained by adding the real number
<i>a</i> to the product of the real number <i>b</i> with the
imaginary <i>i</i>.

<p>We will use the <i>function</i> <code>j.</code> which multiplies
its single argument by the square root of negative one, and
which forms a complex number from two arguments. For example:
<pre>   j.4
0j4
   (j.4)*(j.4)
_16
   3+j.4
3j4
   3 j. 4
3j4
   
   3j4 * 5j12
_33j56
   
   (3*5)+(3*0j12)+(0j4*5)+(0j4*0j12)
_33j56
</pre>
The last result illustrates the fact that the multiplication
of complex numbers follows the normal rules for the product
of the sums of their components (<code>3 0j4 5</code>
and <code>0j12</code>).

<p>Experiment with multiplying other pairs of complex numbers.
In particular, verify that the product of <code>3j4</code> with
its <i>conjugate</i> <code>3j_4</code> yields a real number.

<p>The (monadic) function <code>+</code> yields the conjugate
of its argument. For example:
<pre>   +5j12
5j_12
   5j12 * +5j12
169
   %: 5j12 * +5j12
13
   | 5j12 
13</pre>

The foregoing illustrates that the square root of the product of
a number with its conjugate is its <i>magnitude</i> (given
by the function <code>|</code>). Verify that the magnitude of a real
number is itself, as is its conjugate.
<a name="S9F."></a>
<h3><a href="#9F.">S9F. Logarithms</a></h3>

<a name="S10A."></a>
<h3><a href="#10A.">S10A. Introduction</a></h3>



<a name="S10B."></a>
<h3><a href="#10B.">S10B. Word formation</a></h3>

<a name="S10C."></a>
<h3><a href="#10C.">S10C. Parsing</a></h3>

<a name="S10D."></a>
<h3><a href="#10D.">S10D. Conventional Mathematical Notation</a></h3>

<a name="S11A."></a>
<h3><a href="#11A.">S11A. Introduction</a></h3>

<a name="S11B."></a>
<h3><a href="#11B.">S11B. Informal proofs</a></h3>
Write an informal proof that <code>+/i.n</code> (the sum 
of the first <code>n</code> non-negative integers) is equivalent
to <code>n*(n-1)%2</code>.

<p>Make a table of the sum of squares (<code>+/*:i.n</code>)
and try to find an equivalent expression that is easier to
calculate. Then write an informal proof of the discovered
relation.

<a name="S11C."></a>
<h3><a href="#11C.">S11C. Formal proofs</a></h3>
Make formal proofs of the informal proofs of Section S11B.

<a name="S11D."></a>
<h3><a href="#11D.">S11D. Inductive proofs</a></h3>
Make inductive proofs for the relations found in Section S11B.
<a name="S11E."></a>
<h3><a href="#11E.">S11E. Recursive definition</a></h3>

Enter the following recursive definitions and apply the
resulting functions to integer arguments to learn what
you can about them:
<pre>   f=:1:`(+//.@(,:~)@($:@&lt;:))@.*
   
   g=:1:`((],+/@(_2&amp;{.))@$:@&lt;:)@.*</pre>
See page 286 of Gullberg for a discussion of Fibonacci numbers.
<a name="S11F."></a>
<h3><a href="#11F.">S11F. Guessing games</a></h3>

<a name="S12A."></a>
<h3><a href="#12A.">S12A. Anagrams</a></h3>

Execute the following:
<pre>a=: 'episcopal'
p=:1 0 6 3 2 4 5 8 7
p{a
!#a  NB. Number of permutations of a
index=: A. p
index
index A. a</pre>

<a name="S13A."></a>
<h3><a href="#13A.">S13A. Introduction</a></h3>
Define Boolean functions to determine various properties of 
numbers. For example, is a number the square of an integer;
is it a cube; is it a prime? Consult the Vocabulary for
functions concerning primes.
<a name="S13B."></a>
<h3><a href="#13B.">S13B. Or, and, and not</a></h3>
When restricted to the arguments zero and one, multiplication
is equivalent to the <i>and</i> function, and Boole used the symbol for
multiplication to represent it. The analogy between <i>or</i> and
addition is less compelling, but Boole used <code>+</code> for
<i>or</i>. In a broader domain it is necessary to distinguish between
the arithmetic and logical functions, and we therefore use
<code> + *</code> for the arithmetic functions, and 
<code>+. *.</code> for the logical.

<p>Consult the Vocabulary for the significance of other 
arithmetic functions used as Booleans. Also note that 
<code>p &lt;: q</code> tests whether <code>p</code>
<i>implies</i> <code>q</code>.
<a name="S13C."></a>

<h3><a href="#13C.">S13C. Lists and sets</a></h3>
Write functions to define the set of fricatives in the
English alphabet. Do likewise for the set of all non-negative 
integers that are divisible by either <code>2</code> or
<code>5</code>.
<a name="S13D."></a>
<h3><a href="#13D.">S13D. Classification</a></h3>
Study the discussion of <i>classification</i> in the J
Dictionary: Click on Help/Dictionary/Sample
Topics/8. Classification.

<a name="S14A."></a>
<h3><a href="#14A.">S14A. Introduction</a></h3>

<a name="S14B."></a>
<h3><a href="#14B.">S14B. Commutativity</a></h3>

<a name="S14C."></a>
<h2><a href="#14C.">S14C. Associativity</a></h2>
The functions <code>+</code> and <code>*</code> were
seen to be both associative and commutative, whereas
<code>-</code> and <code>%</code> were neither associative
nor commutative. Try to find a function that is commutative
but not associative.
<p>Hint: Consult the Vocabulary for the functions <code>+:</code>
(not-or) and <code>*:</code> (not-and).

<p>An associative function <code>g</code> defined on a domain
<code>d</code> is said to form a <i>group</i> if the table
<code>d g/ d</code> has the following properties:
<p>a) there is a <i>unit element</i> <code>e</code> such that 
<code>e&amp;g</code> and <code>g&amp;e</code> are identity
functions; that is, both <code>e&amp;g d</code> and
<code>g&amp;e d</code> yield <code>d</code>.
<p>b) Each element <code>x</code> of <code>d</code> has an <i>inverse</i>
<code>xi</code>
in <code>d</code> such that <code>(x&amp;g)@(xi&amp;)</code>
is the identity function.

<p>For example:<pre>   d=:0 1 2 3
   
   g=:4&amp;|@+    NB. Addition modulo 4
   
   d g table d
+-+-------+
| |0 1 2 3|
+-+-------+
|0|0 1 2 3|
|1|1 2 3 0|
|2|2 3 0 1|
|3|3 0 1 2|
+-+-------+</pre>
In the foregoing table it is clear that <code>0</code> is the 
identity element. Thus:<pre>   e=:0        NB. Identity element
   
   e&amp;g d
0 1 2 3
   
   g&amp;e d
0 1 2 3</pre>

Moreover, a little experimentation will show that <code>3</code>
is the inverse of <code>1</code>, and that <code>2</code> is
self-inverse:<pre>   1 g d
1 2 3 0
   
   3 g 1 g d   NB. 3 is inverse of 1
0 1 2 3
   
   2 g d
2 3 0 1
   
   2 g 2 g d   NB. 2 is self-inverse
0 1 2 3</pre>
A group function on a given domain may also form a <i>subgroup</i>
on a subset of the domain. For example:<pre>   0 2 g table 0 2
+-+---+
| |0 2|
+-+---+
|0|0 2|
|2|2 0|
+-+---+</pre> 
A function on the domain of the leading integers can be easily
mapped onto another domain, so as to give a more abstract
appearance to a group. For example:<pre>   ad=:'ABCD'
   
   map=: ad&amp;i."0
   
   map ad
0 1 2 3
   
   ad g&amp;.map table ad
+-+----+
| |ABCD|
+-+----+
|A|ABCD|
|B|BCDA|
|C|CDAB|
|D|DABC|
+-+----+</pre>

Define a group of order eight as follows:<pre>   d=:i.8
   
   g=:8&amp;|@+</pre>
   
Then display the group table, and try to find any subgroups.
Also show that the element <code>1</code> is a <i>generator</i>
of the group by entering the expression 
<code>1&amp;g ^:(i.12) d</code>. The result shows 
that the powers of the
function <code>1&amp;g</code> generate all rows of the 
group table.

<a name="S14D."></a>
<h3><a href="#14D.">S14D. Symmetry</a></h3>

<a name="S14E."></a>
<h3><a href="#14E.">S14E. Distributivity</a></h3>

<a name="S14F."></a>
<h3><a href="#14F.">S14F. Distributivity of dyadic functions</a></h3>

<a name="S14G."></a>
<h3><a href="#14G.">S14G. Parity</a></h3>

<a name="S15A."></a>
<h3><a href="#15A.">S15A. Dot product and vector functions</a></h3>

It is important to note that the 
expression <code>dp=:+/ . *</code><i>must</i> include a space
before the dot, for otherwise the phrase <code>/.</code> would
be recognized as the single entity that represents the
<i>oblique</i> operator as shown in the Vocabulary. Compare the
results of applying the word-formation function <code>;:</code>
to the lists <code>'+/ . *'</code> and <code>'+/. *'</code> .

<a name="S15B."></a>
<h3><a href="#15B.">S15B. Dot product as a linear function</a></h3>

If <code>sop=:+/\</code> (sum over prefixes), then 
<code>sopinv=: sop^:_1</code> is its inverse.Test this assertion 
by entering expressions such 
as <code>sopinv sop x=:2 3 5 7 11</code> and
<code>sop sopinv x</code>. 
<p>Guess at the value of a matrix <code>mi</code> such that
<code>mi &amp; dp=:+/ . *</code> is equivalent to the function
<code>sopinv</code>. Compare your guess with the result of
applying <code>sopinv</code> to an identity matrix.
<a name="S15C."></a>
<h3><a href="#15C.">S15C. Matrix inverse</a></h3>

<a name="S16A."></a>
<h3><a href="#16A.">S16A. Ascending and descending order of exponents</a></h3>

<a name="S16B."></a>
<h3><a href="#16B.">S16B. Products of polynomials</a></h3>

<a name="S16C."></a>
<h3><a href="#16C.">S16C. Multiplication of decimal numbers</a></h3>
A function to perform the normalization described in Section 16C (to
reduce a list to an equivalent list with elements less than the base)
can be defined (using the Explicit Definition described in Section 17C) as follows:
<pre>NORM=:4 : 0
  base=. x.
  list=: y.
result=. i.0
 carry=. 0

while. 0&amp;lt;#list do.
next=. carry + {: list   NB. carry plus last of list
list=. }: list           NB. Delete last from list
rem=. base | next        NB. Remainder on div by base
result=. rem , result    
carry=. (next-rem) % base
end.

result
)</pre>
For example:
<pre>   a=: 2 34 56
   c=:10 NORM a
   c
5 9 6
   10 #. a  NB. Base 10 value of a
596
   10 #. c
596
</pre>
However, an argument such as <code>23 4 5</code> requires a result with more 
elements than the argument, and the function <code>NORM</code> fails to 
account for this. Thus:
<pre>   b=: 23 4 5
   10 NORM b
3 4 5</pre>

The following function produces the correct result:
<pre>norm=:4 : 0
  base=. x.
  list=: y.
result=. i.0
 carry=. 0

while. -.*./0=carry,list do. NB. Not all zero
next=. carry + {: list   NB. carry plus last of list
list=. 0,}: list         NB. Delete last from list
rem=. base | next        NB. Remainder on div by base
result=. rem , result    
carry=. (next-rem) % base
end.

result
)

   10 norm b
2 3 4 5</pre>
Choose a pair of rather large numbers (of eight or more digits)
and multiply them by the conventional method taught in
elementary school. Then multiply them by the method given
in Section 16C and compare the results.
<a name="S16D."></a>
<h3><a href="#16D.">S16D. Other bases</a></h3>

Use the function <code>norm</code> of Section S16C with bases other than <code>10</code>.
Also define and use the functions <code>n10=: 10 with norm</code> and
<code>n2=:2 with norm</code>.
<p> Repeat the exercise suggested in Section S16C, but using
base <code>8</code>.
<a name="S16E."></a>
<h3><a href="#16E.">S16E. Remainder, divisibility, and integer
part</a></h3>
A prime number is one that has exactly two distinct divisors.
Sum the columns of a divisibility table, and use the 
foregoing fact to identify the primes.

<a name="S16F."></a>
<h3><a href="#16F.">S16F. Notes</a></h3>

<a name="S17A."></a>
<h3><a href="#17A.">S17A. Introduction</a></h3>

<a name="S17B."></a>
<h3><a href="#17B.">S17B. Designing an algorithm</a></h3>

<a name="S17C."></a>
<h3><a href="#17C.">S17C. Explicit definition</a></h3>

<a name="S18A."></a>
<h3><a href="#18A.">S18A. Introduction</a></h3>

<a name="S18B."></a>
<h3><a href="#18B.">S18B. Area under a graph as a function</a></h3>

<a name="S18C."></a>
<h3><a href="#18C.">S18C. Polynomial approximations</a></h3>

<a name="S19A."></a>
<h3><a href="#19A.">S19A. Imaginary numbers</a></h3>

<a name="S19B."></a>
<h3><a href="#19B.">S19B. Complex numbers</a></h3>

<a name="S19C."></a>
<h3><a href="#19C.">S19C. Division</a></h3>

<a name="S19D."></a>
<h3><a href="#19D.">S19D. The Exponential family</a></h3>

<a name="S20A."></a>
<h3><a href="#20A.">S20A. Introduction</a></h3>

<a name="S20B."></a>
<h3><a href="#20B.">S20B. Mathematics: from the Birth of Numbers</a></h3>

<a name="S20C."></a>
<h3><a href="#20C.">S20C. Concrete mathematics</a></h3>

<a name="S20D."></a>
<h3><a href="#20D.">S20D. Computer resources</a></h3>

<a name="S20E."></a>
<h3><a href="#20E.">S20E. Conclusion</a></h3>
 
<a name="Appendix 1: Utilities"></a>
<h3><a href="#MATH"><div align="center">Appendix 1: Utilities</div></a></h3>

<pre>and      =:  *.                             NB. 13B 
ant      =: 0:,] % next i. on #             NB. 18C                     
anti     =:  d. _1                          NB. 18A 
cos      =:  2&amp;o.                           NB. 19D
cube     =:  ^ with 3                       NB. 14G                        

dec      =:  rat^:_1                        NB. 2A  
der      =:  1: |. ] * i. on #              NB. 6B  
derv     =:  d.1                            NB. 18A 
decay    =:  ^ on -                         NB. 8C
det      =:  -/ . *                         NB. 20B 

diag     =:  /.                             NB. 11F
dp       =:  +/ . *                         NB. 15A 
each     =:  "0                             NB. 11F
eachbox  =:  &amp;.&gt;                            NB. 11F
eachrow  =: "1                              NB. 13D

exp      =:  ^                              NB. 6C
for      =:  ^:                             NB. 1C
gcd      =:  +.                             NB. 2E
INV      =:  ^:_1                           NB. 9A
lcm      =:  *.                             NB. 2E         

load 'plot'                                 NB. 3A  
mean     =:  +/ % #                         NB. 9C  
next     =:  &gt;:                             NB. 1A
not      =:  -.                             NB. 13B         
on       =:  @                              NB. 2D

or       =:  +.                             NB. 13B 
over     =: 2 :'(u.@v.)=((u.@[)v.(u.@]))'"0 NB. 14E
pa       =:  p.                             NB. 16A                 
pc       =:  +//. on (*/)                   NB. 16B 
pd       =:  |. on [ pa ]                   NB. 16A 

PLOT     =: 'line,stick'&amp;plot               NB. 3A  
pref     =:  \                              NB. 11F
previous =:  &lt;:                             NB. 1A 
pw       =:  1 : '2 with (u.\)'             NB. 3C  
rat      =:  x:                             NB. 2A

roots    =:  &gt; on {: on p.                  NB. 9E 
set      =:  9!:11                          NB. 2B  
sign     =:  *                              NB. 2D 
sin      =:  1&amp;o.                           NB. 5B  
sort     =:  /:~                            NB. 12A

sqr      =:  *:                             NB. 9A
sqrt     =:  %:                             NB. 9A 
sum      =:  +/                             NB. 11F
trans    =:  |:                             NB. 12A
under    =:  &amp;.                             NB. 10D 

with     =:  &amp;                              NB. 1F  
zero     =:  **|                            NB. 9E</pre>
   


<a name="References"></a>
<h3><a href="#MATH"><div align="center">References</div></a></h3> 

<p>1. Hogben, Lancelot, <i>Mathematics for the Million</i>, 1983 paperback edition, 
             W.W. Norton. First published 1937.
<p>2. Graham, R.L., and Knuth, D.E., Patashnik, O., <i>Concrete Mathematics</i>, 
                   Addison-Wesley, 1988.
<p>3. Cajori, F.,  <i>A History of Mathematical Notations</i>, The Open Court Publishing
                      Company, La Salle, Illinois, 1928 (Now available from Dover).
<p>4. Cajori, F., <i>William Oughtred: A great Seventeenth-Century Teacher of
                      Mathematics</i>, Open Court, 1916. 
<p>5. Staff of the Computation Laboratory,  <i>A Description of the 
Mark IV Calculator,
               <i></i>Annals of the Computation Laboratory</i>, Volume XXVIII, Harvard Press, 1952.
<p>6. Backus, J., “The History of FORTRAN I, II, and III”, ACM Sigplan Notices 13 # 7, 1978.
<p>7. Heaviside, O., <i>Electromagnetic Theory</i>, Chelsea Publishing Co. Reprint 1971.
<p>8. Falkoff, A.D., and K.E. Iverson, APL\360 User’s Manual, IBM Corp, 1966.
<p>9. Boole, G., <i>An investigation of the laws of thought on 
which are founded the
               mathematical theories of logic and probabilities</i>, Dover, reprint, 1951. 
<p>10. March, H.W., and H.C. Wolf, Calculus</i>, McGraw-Hill, New York, 1917.
<p>11. Curry, H.B., and R. Feys, <i>Combinatory Logic</i>, North Holland Publishers, 1968.
<p>12. Iverson, K.E. “A Personal View of APL”, IBM Systems Journal, v30 #4, 1991.
<p>13. Synge, J.L., and A. Schild, <i>Tensor Calculus</i>, Dover, reprint, 1978. 
<p>14. Pinker, S., <i>The Language Instinct</i>, William Morrow, 1994.
<p>15. Deacon, T.W., <i>The Symbolic Species</i>, Norton, 1997.
<p>16. Iverson, K.E. <i>Exploring Math</i>, Iverson Software, Toronto, 1996
<p>17. Lakatos, Imre, <i>Proofs and Refutations: the logic 
of mathematical discovery</i>,
               Cambridge University Press, 1976
<p>18. Lanczos, C., <i>Applied Analysis</i>, Prentice-Hall, 1956
<p>19. Hardy, G.H., <i>A Mathematician’s Apology</i>, Cambridge University Press, 1940
<p>20. Gullberg, Jan, <i>Mathematics: From the Birth of Numbers</i>, W.W. Norton, 1997
<p>21. Iverson, K.E., <i>Concrete Math Companion</i>, Iverson Software, Toronto, 1995
<p>22. Sawyer, W.W., <i>Introducing Mathematics:1 Vision in
Elementary Mathematics</i>, Penguin Books, 1964
<p><p>
</body>
</html>
